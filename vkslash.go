package vks

//#cgo LDFLAGS: -lvulkan
//#include <stdlib.h>
//#include <string.h>
//#include "vulkan/vulkan.h"
import "C"
import (
	"fmt"
	"unsafe"
)

const (
	VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256
	VK_UUID_SIZE                     = 16
	VK_LUID_SIZE                     = 8
	VK_LUID_SIZE_KHR                 = VK_LUID_SIZE
	VK_MAX_EXTENSION_NAME_SIZE       = 256
	VK_MAX_DESCRIPTION_SIZE          = 256
	VK_MAX_MEMORY_TYPES              = 32
	VK_MAX_MEMORY_HEAPS              = 16
	VK_LOD_CLAMP_NONE                = 1000.0
	VK_REMAINING_MIP_LEVELS          = ^uint32(0)
	VK_REMAINING_ARRAY_LAYERS        = ^uint32(0)
	VK_WHOLE_SIZE                    = ^uint64(0)
	VK_ATTACHMENT_UNUSED             = ^uint32(0)
	VK_TRUE                          = 1
	VK_FALSE                         = 0
	VK_QUEUE_FAMILY_IGNORED          = ^uint32(0)
	VK_QUEUE_FAMILY_EXTERNAL         = ^uint32(1)
	VK_QUEUE_FAMILY_EXTERNAL_KHR     = VK_QUEUE_FAMILY_EXTERNAL
	VK_QUEUE_FAMILY_FOREIGN_EXT      = ^uint32(2)
	VK_SUBPASS_EXTERNAL              = ^uint32(0)
	VK_MAX_DEVICE_GROUP_SIZE         = 32
	VK_MAX_DEVICE_GROUP_SIZE_KHR     = VK_MAX_DEVICE_GROUP_SIZE
	VK_MAX_DRIVER_NAME_SIZE          = 256
	VK_MAX_DRIVER_NAME_SIZE_KHR      = VK_MAX_DRIVER_NAME_SIZE
	VK_MAX_DRIVER_INFO_SIZE          = 256
	VK_MAX_DRIVER_INFO_SIZE_KHR      = VK_MAX_DRIVER_INFO_SIZE
	VK_SHADER_UNUSED_KHR             = ^uint32(0)
	VK_SHADER_UNUSED_NV              = VK_SHADER_UNUSED_KHR
	VK_MAX_GLOBAL_PRIORITY_SIZE_EXT  = 16
)

type VkFlags uint32

type VkSampleMask uint32

type VkDeviceSize uint64

type VkDeviceAddress uint64

type VkBool32 uint32

// VkFramebuffer is a Handle to a vulkan resource.
type VkFramebuffer C.VkFramebuffer

// VkImage is a Handle to a vulkan resource.
type VkImage C.VkImage

// VkEvent is a Handle to a vulkan resource.
type VkEvent C.VkEvent

// VkDescriptorSet is a Handle to a vulkan resource.
type VkDescriptorSet C.VkDescriptorSet

// VkInstance is a Handle to a vulkan resource.
type VkInstance C.VkInstance

// VkPhysicalDevice is a Handle to a vulkan resource.
type VkPhysicalDevice C.VkPhysicalDevice

// VkDeviceMemory is a Handle to a vulkan resource.
type VkDeviceMemory C.VkDeviceMemory

// VkPipelineCache is a Handle to a vulkan resource.
type VkPipelineCache C.VkPipelineCache

// VkImageView is a Handle to a vulkan resource.
type VkImageView C.VkImageView

// VkDevice is a Handle to a vulkan resource.
type VkDevice C.VkDevice

// VkRenderPass is a Handle to a vulkan resource.
type VkRenderPass C.VkRenderPass

// VkQueue is a Handle to a vulkan resource.
type VkQueue C.VkQueue

// VkSemaphore is a Handle to a vulkan resource.
type VkSemaphore C.VkSemaphore

// VkCommandBuffer is a Handle to a vulkan resource.
type VkCommandBuffer C.VkCommandBuffer

// VkDescriptorPool is a Handle to a vulkan resource.
type VkDescriptorPool C.VkDescriptorPool

// VkShaderModule is a Handle to a vulkan resource.
type VkShaderModule C.VkShaderModule

// VkSampler is a Handle to a vulkan resource.
type VkSampler C.VkSampler

// VkPipeline is a Handle to a vulkan resource.
type VkPipeline C.VkPipeline

// VkCommandPool is a Handle to a vulkan resource.
type VkCommandPool C.VkCommandPool

// VkDescriptorSetLayout is a Handle to a vulkan resource.
type VkDescriptorSetLayout C.VkDescriptorSetLayout

// VkQueryPool is a Handle to a vulkan resource.
type VkQueryPool C.VkQueryPool

// VkBuffer is a Handle to a vulkan resource.
type VkBuffer C.VkBuffer

// VkPipelineLayout is a Handle to a vulkan resource.
type VkPipelineLayout C.VkPipelineLayout

// VkFence is a Handle to a vulkan resource.
type VkFence C.VkFence

// VkBufferView is a Handle to a vulkan resource.
type VkBufferView C.VkBufferView

type VkStructureType uint32

const (
	VK_STRUCTURE_TYPE_APPLICATION_INFO                                        VkStructureType = 0
	VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO                                    VkStructureType = 1
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO                                VkStructureType = 2
	VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO                                      VkStructureType = 3
	VK_STRUCTURE_TYPE_SUBMIT_INFO                                             VkStructureType = 4
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO                                    VkStructureType = 5
	VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE                                     VkStructureType = 6
	VK_STRUCTURE_TYPE_BIND_SPARSE_INFO                                        VkStructureType = 7
	VK_STRUCTURE_TYPE_FENCE_CREATE_INFO                                       VkStructureType = 8
	VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO                                   VkStructureType = 9
	VK_STRUCTURE_TYPE_EVENT_CREATE_INFO                                       VkStructureType = 10
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO                                  VkStructureType = 11
	VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO                                      VkStructureType = 12
	VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO                                 VkStructureType = 13
	VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO                                       VkStructureType = 14
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO                                  VkStructureType = 15
	VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO                               VkStructureType = 16
	VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO                              VkStructureType = 17
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO                       VkStructureType = 18
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                 VkStructureType = 19
	VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO               VkStructureType = 20
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO                 VkStructureType = 21
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO                     VkStructureType = 22
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO                VkStructureType = 23
	VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                  VkStructureType = 24
	VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                VkStructureType = 25
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                  VkStructureType = 26
	VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO                      VkStructureType = 27
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO                           VkStructureType = 28
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO                            VkStructureType = 29
	VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO                             VkStructureType = 30
	VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO                                     VkStructureType = 31
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO                       VkStructureType = 32
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO                             VkStructureType = 33
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO                            VkStructureType = 34
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET                                    VkStructureType = 35
	VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET                                     VkStructureType = 36
	VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO                                 VkStructureType = 37
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO                                 VkStructureType = 38
	VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO                                VkStructureType = 39
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO                            VkStructureType = 40
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO                         VkStructureType = 41
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO                               VkStructureType = 42
	VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO                                  VkStructureType = 43
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER                                   VkStructureType = 44
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER                                    VkStructureType = 45
	VK_STRUCTURE_TYPE_MEMORY_BARRIER                                          VkStructureType = 46
	VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO                             VkStructureType = 47
	VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO                               VkStructureType = 48
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES                     VkStructureType = 1000094000
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO                                 VkStructureType = 1000157000
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO                                  VkStructureType = 1000157001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES                  VkStructureType = 1000083000
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS                           VkStructureType = 1000127000
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO                          VkStructureType = 1000127001
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO                              VkStructureType = 1000060000
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO                     VkStructureType = 1000060003
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO                  VkStructureType = 1000060004
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO                                VkStructureType = 1000060005
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO                           VkStructureType = 1000060006
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO                    VkStructureType = 1000060013
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO                     VkStructureType = 1000060014
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES                        VkStructureType = 1000070000
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO                         VkStructureType = 1000070001
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2                       VkStructureType = 1000146000
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2                        VkStructureType = 1000146001
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2                 VkStructureType = 1000146002
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2                                   VkStructureType = 1000146003
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2                      VkStructureType = 1000146004
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2                              VkStructureType = 1000059000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2                            VkStructureType = 1000059001
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2                                     VkStructureType = 1000059002
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2                               VkStructureType = 1000059003
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2                     VkStructureType = 1000059004
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2                               VkStructureType = 1000059005
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2                     VkStructureType = 1000059006
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2                        VkStructureType = 1000059007
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2              VkStructureType = 1000059008
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES               VkStructureType = 1000117000
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO         VkStructureType = 1000117001
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO                            VkStructureType = 1000117002
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO   VkStructureType = 1000117003
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO                       VkStructureType = 1000053000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES                      VkStructureType = 1000053001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES                    VkStructureType = 1000053002
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES              VkStructureType = 1000120000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES               VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
	VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO                                   VkStructureType = 1000145000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES               VkStructureType = 1000145001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES             VkStructureType = 1000145002
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2                                     VkStructureType = 1000145003
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO                    VkStructureType = 1000156000
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO                           VkStructureType = 1000156001
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO                            VkStructureType = 1000156002
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO                    VkStructureType = 1000156003
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES       VkStructureType = 1000156004
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES        VkStructureType = 1000156005
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO                  VkStructureType = 1000085000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO              VkStructureType = 1000071000
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES                        VkStructureType = 1000071001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO                    VkStructureType = 1000071002
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES                              VkStructureType = 1000071003
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES                           VkStructureType = 1000071004
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO                      VkStructureType = 1000072000
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO                       VkStructureType = 1000072001
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO                             VkStructureType = 1000072002
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO                     VkStructureType = 1000112000
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES                               VkStructureType = 1000112001
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO                                VkStructureType = 1000113000
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO                            VkStructureType = 1000077000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO                 VkStructureType = 1000076000
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES                           VkStructureType = 1000076001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES                VkStructureType = 1000168000
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT                           VkStructureType = 1000168001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES         VkStructureType = 1000063000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES                     VkStructureType = 49
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES                   VkStructureType = 50
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES                     VkStructureType = 51
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES                   VkStructureType = 52
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO                           VkStructureType = 1000147000
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2                                VkStructureType = 1000109000
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2                                  VkStructureType = 1000109001
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2                                   VkStructureType = 1000109002
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2                                    VkStructureType = 1000109003
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2                               VkStructureType = 1000109004
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO                                      VkStructureType = 1000109005
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO                                        VkStructureType = 1000109006
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES                   VkStructureType = 1000177000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES                       VkStructureType = 1000196000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES            VkStructureType = 1000180000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES            VkStructureType = 1000082000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES               VkStructureType = 1000197000
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO         VkStructureType = 1000161000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES            VkStructureType = 1000161001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES          VkStructureType = 1000161002
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO  VkStructureType = 1000161003
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT VkStructureType = 1000161004
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES        VkStructureType = 1000199000
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE               VkStructureType = 1000199001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES            VkStructureType = 1000221000
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO                         VkStructureType = 1000246000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES        VkStructureType = 1000130000
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO                      VkStructureType = 1000130001
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES            VkStructureType = 1000211000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES          VkStructureType = 1000108000
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO                     VkStructureType = 1000108001
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO                       VkStructureType = 1000108002
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO                       VkStructureType = 1000108003
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES VkStructureType = 1000253000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES VkStructureType = 1000175000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES VkStructureType = 1000241000
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT                     VkStructureType = 1000241001
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT                   VkStructureType = 1000241002
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES               VkStructureType = 1000261000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES             VkStructureType = 1000207000
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES           VkStructureType = 1000207001
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO                              VkStructureType = 1000207002
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO                          VkStructureType = 1000207003
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO                                     VkStructureType = 1000207004
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO                                   VkStructureType = 1000207005
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES          VkStructureType = 1000257000
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO                              VkStructureType = 1000244001
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO               VkStructureType = 1000257002
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO             VkStructureType = 1000257003
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO               VkStructureType = 1000257004
	VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR                               VkStructureType = 1000001000
	VK_STRUCTURE_TYPE_PRESENT_INFO_KHR                                        VkStructureType = 1000001001
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR                   VkStructureType = 1000060007
	VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR                         VkStructureType = 1000060008
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR                    VkStructureType = 1000060009
	VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR                             VkStructureType = 1000060010
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR                           VkStructureType = 1000060011
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR                  VkStructureType = 1000060012
	VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR                            VkStructureType = 1000002000
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR                         VkStructureType = 1000002001
	VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR                                VkStructureType = 1000003000
)

var (
	reverseVkStructureType map[VkStructureType]string = map[VkStructureType]string{
		VK_STRUCTURE_TYPE_APPLICATION_INFO:                                        "VK_STRUCTURE_TYPE_APPLICATION_INFO",
		VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:                                    "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO",
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:                                "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO",
		VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:                                      "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO",
		VK_STRUCTURE_TYPE_SUBMIT_INFO:                                             "VK_STRUCTURE_TYPE_SUBMIT_INFO",
		VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:                                    "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO",
		VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:                                     "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE",
		VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:                                        "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO",
		VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:                                       "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO",
		VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:                                   "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO",
		VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:                                       "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO",
		VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:                                  "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO",
		VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:                                      "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO",
		VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:                                 "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO",
		VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:                                       "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO",
		VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:                                  "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO",
		VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:                               "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:                              "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:                       "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:                 "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:               "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:                 "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:                     "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:                "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:                  "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:                "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:                  "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:                      "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:                           "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO",
		VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:                            "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:                             "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO",
		VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:                                     "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO",
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:                       "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO",
		VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:                             "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO",
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:                            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO",
		VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:                                    "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET",
		VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:                                     "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET",
		VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:                                 "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO",
		VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:                                 "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO",
		VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:                                "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO",
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:                            "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO",
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:                         "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO",
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:                               "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO",
		VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:                                  "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO",
		VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:                                   "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER",
		VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:                                    "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER",
		VK_STRUCTURE_TYPE_MEMORY_BARRIER:                                          "VK_STRUCTURE_TYPE_MEMORY_BARRIER",
		VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO:                             "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO",
		VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO:                               "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:                     "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES",
		VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:                                 "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO",
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:                                  "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:                  "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES",
		VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:                           "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS",
		VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:                          "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO",
		VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:                              "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:                     "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:                  "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:                                "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:                           "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO",
		VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:                    "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO",
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:                     "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:                        "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:                         "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO",
		VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:                       "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2",
		VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:                        "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2",
		VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:                 "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2",
		VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:                                   "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2",
		VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:                      "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:                              "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:                            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2",
		VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:                                     "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2",
		VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:                               "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:                     "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2",
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:                               "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:                     "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2",
		VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:                        "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:              "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:               "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES",
		VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:         "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO",
		VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:                            "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:   "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:                       "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:                      "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:                    "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:              "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES",
		VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:                                   "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:               "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:             "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES",
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:                                     "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2",
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:                    "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO",
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:                           "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO",
		VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:                            "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO",
		VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:                    "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:       "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES",
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:        "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES",
		VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:                  "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:              "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO",
		VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:                        "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:                    "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO",
		VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:                              "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:                           "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES",
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:                      "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO",
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:                       "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO",
		VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:                             "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:                     "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO",
		VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:                               "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES",
		VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:                                "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO",
		VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:                            "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:                 "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO",
		VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:                           "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:                "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES",
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:                           "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:         "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:                     "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:                   "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:                     "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:                   "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES",
		VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:                           "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO",
		VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:                                "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2",
		VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:                                  "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2",
		VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:                                   "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2",
		VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:                                    "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2",
		VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:                               "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2",
		VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:                                      "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO",
		VK_STRUCTURE_TYPE_SUBPASS_END_INFO:                                        "VK_STRUCTURE_TYPE_SUBPASS_END_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:                   "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:                       "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:               "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES",
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:         "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:          "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES",
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:  "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO",
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:        "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES",
		VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:               "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES",
		VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:                         "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:        "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES",
		VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:                      "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:          "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES",
		VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:                     "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO",
		VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:                       "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO",
		VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:                       "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES",
		VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:                     "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT",
		VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:                   "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:               "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:             "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:           "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES",
		VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:                              "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO",
		VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:                          "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO",
		VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:                                     "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO",
		VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:                                   "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO",
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:          "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES",
		VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:                              "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO",
		VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:               "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO",
		VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:             "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO",
		VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:               "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO",
		VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:                               "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR",
		VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:                                        "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:                   "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR",
		VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:                         "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR",
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:                    "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR",
		VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:                             "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:                           "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR",
		VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:                  "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR",
		VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:                            "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR",
		VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:                         "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR",
		VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:                                "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR",
	}
)

func (x VkStructureType) String() string {
	if s, ok := reverseVkStructureType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkStructureType=%d", x)
}

type VkImageViewType uint32

const (
	VK_IMAGE_VIEW_TYPE_1D         VkImageViewType = 0
	VK_IMAGE_VIEW_TYPE_2D         VkImageViewType = 1
	VK_IMAGE_VIEW_TYPE_3D         VkImageViewType = 2
	VK_IMAGE_VIEW_TYPE_CUBE       VkImageViewType = 3
	VK_IMAGE_VIEW_TYPE_1D_ARRAY   VkImageViewType = 4
	VK_IMAGE_VIEW_TYPE_2D_ARRAY   VkImageViewType = 5
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY VkImageViewType = 6
)

var (
	reverseVkImageViewType map[VkImageViewType]string = map[VkImageViewType]string{
		VK_IMAGE_VIEW_TYPE_1D:         "VK_IMAGE_VIEW_TYPE_1D",
		VK_IMAGE_VIEW_TYPE_2D:         "VK_IMAGE_VIEW_TYPE_2D",
		VK_IMAGE_VIEW_TYPE_3D:         "VK_IMAGE_VIEW_TYPE_3D",
		VK_IMAGE_VIEW_TYPE_CUBE:       "VK_IMAGE_VIEW_TYPE_CUBE",
		VK_IMAGE_VIEW_TYPE_1D_ARRAY:   "VK_IMAGE_VIEW_TYPE_1D_ARRAY",
		VK_IMAGE_VIEW_TYPE_2D_ARRAY:   "VK_IMAGE_VIEW_TYPE_2D_ARRAY",
		VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY",
	}
)

func (x VkImageViewType) String() string {
	if s, ok := reverseVkImageViewType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkImageViewType=%d", x)
}

type VkFenceCreateFlagBits uint32

const (
	VK_FENCE_CREATE_SIGNALED_BIT VkFenceCreateFlagBits = (1 << 0)
)

var (
	reverseVkFenceCreateFlagBits map[VkFenceCreateFlagBits]string = map[VkFenceCreateFlagBits]string{
		VK_FENCE_CREATE_SIGNALED_BIT: "VK_FENCE_CREATE_SIGNALED_BIT",
	}
)

func (x VkFenceCreateFlagBits) String() string {
	if s, ok := reverseVkFenceCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkFenceCreateFlagBits=%d", x)
}

type VkBufferUsageFlagBits uint32

const (
	VK_BUFFER_USAGE_TRANSFER_SRC_BIT          VkBufferUsageFlagBits = (1 << 0)
	VK_BUFFER_USAGE_TRANSFER_DST_BIT          VkBufferUsageFlagBits = (1 << 1)
	VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT  VkBufferUsageFlagBits = (1 << 2)
	VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT  VkBufferUsageFlagBits = (1 << 3)
	VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT        VkBufferUsageFlagBits = (1 << 4)
	VK_BUFFER_USAGE_STORAGE_BUFFER_BIT        VkBufferUsageFlagBits = (1 << 5)
	VK_BUFFER_USAGE_INDEX_BUFFER_BIT          VkBufferUsageFlagBits = (1 << 6)
	VK_BUFFER_USAGE_VERTEX_BUFFER_BIT         VkBufferUsageFlagBits = (1 << 7)
	VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT       VkBufferUsageFlagBits = (1 << 8)
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT VkBufferUsageFlagBits = (1 << 17)
)

var (
	reverseVkBufferUsageFlagBits map[VkBufferUsageFlagBits]string = map[VkBufferUsageFlagBits]string{
		VK_BUFFER_USAGE_TRANSFER_SRC_BIT:          "VK_BUFFER_USAGE_TRANSFER_SRC_BIT",
		VK_BUFFER_USAGE_TRANSFER_DST_BIT:          "VK_BUFFER_USAGE_TRANSFER_DST_BIT",
		VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT:  "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT",
		VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT:  "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT",
		VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT:        "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT",
		VK_BUFFER_USAGE_STORAGE_BUFFER_BIT:        "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
		VK_BUFFER_USAGE_INDEX_BUFFER_BIT:          "VK_BUFFER_USAGE_INDEX_BUFFER_BIT",
		VK_BUFFER_USAGE_VERTEX_BUFFER_BIT:         "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",
		VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT:       "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT",
		VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT",
	}
)

func (x VkBufferUsageFlagBits) String() string {
	if s, ok := reverseVkBufferUsageFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkBufferUsageFlagBits=%d", x)
}

type VkAttachmentLoadOp uint32

const (
	VK_ATTACHMENT_LOAD_OP_LOAD      VkAttachmentLoadOp = 0
	VK_ATTACHMENT_LOAD_OP_CLEAR     VkAttachmentLoadOp = 1
	VK_ATTACHMENT_LOAD_OP_DONT_CARE VkAttachmentLoadOp = 2
)

var (
	reverseVkAttachmentLoadOp map[VkAttachmentLoadOp]string = map[VkAttachmentLoadOp]string{
		VK_ATTACHMENT_LOAD_OP_LOAD:      "VK_ATTACHMENT_LOAD_OP_LOAD",
		VK_ATTACHMENT_LOAD_OP_CLEAR:     "VK_ATTACHMENT_LOAD_OP_CLEAR",
		VK_ATTACHMENT_LOAD_OP_DONT_CARE: "VK_ATTACHMENT_LOAD_OP_DONT_CARE",
	}
)

func (x VkAttachmentLoadOp) String() string {
	if s, ok := reverseVkAttachmentLoadOp[x]; ok {
		return s
	}
	return fmt.Sprintf("VkAttachmentLoadOp=%d", x)
}

type VkPipelineCreateFlagBits uint32

const (
	VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT         VkPipelineCreateFlagBits = (1 << 0)
	VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT            VkPipelineCreateFlagBits = (1 << 1)
	VK_PIPELINE_CREATE_DERIVATIVE_BIT                   VkPipelineCreateFlagBits = (1 << 2)
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT VkPipelineCreateFlagBits = (1 << 3)
	VK_PIPELINE_CREATE_DISPATCH_BASE_BIT                VkPipelineCreateFlagBits = (1 << 4)
	VK_PIPELINE_CREATE_DISPATCH_BASE                    VkPipelineCreateFlagBits = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT
)

var (
	reverseVkPipelineCreateFlagBits map[VkPipelineCreateFlagBits]string = map[VkPipelineCreateFlagBits]string{
		VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT:         "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT",
		VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT:            "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT",
		VK_PIPELINE_CREATE_DERIVATIVE_BIT:                   "VK_PIPELINE_CREATE_DERIVATIVE_BIT",
		VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT",
		VK_PIPELINE_CREATE_DISPATCH_BASE_BIT:                "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT",
	}
)

func (x VkPipelineCreateFlagBits) String() string {
	if s, ok := reverseVkPipelineCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPipelineCreateFlagBits=%d", x)
}

type VkSubpassContents uint32

const (
	VK_SUBPASS_CONTENTS_INLINE                    VkSubpassContents = 0
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS VkSubpassContents = 1
)

var (
	reverseVkSubpassContents map[VkSubpassContents]string = map[VkSubpassContents]string{
		VK_SUBPASS_CONTENTS_INLINE:                    "VK_SUBPASS_CONTENTS_INLINE",
		VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS",
	}
)

func (x VkSubpassContents) String() string {
	if s, ok := reverseVkSubpassContents[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSubpassContents=%d", x)
}

type VkPipelineShaderStageCreateFlagBits uint32

type VkSharingMode uint32

const (
	VK_SHARING_MODE_EXCLUSIVE  VkSharingMode = 0
	VK_SHARING_MODE_CONCURRENT VkSharingMode = 1
)

var (
	reverseVkSharingMode map[VkSharingMode]string = map[VkSharingMode]string{
		VK_SHARING_MODE_EXCLUSIVE:  "VK_SHARING_MODE_EXCLUSIVE",
		VK_SHARING_MODE_CONCURRENT: "VK_SHARING_MODE_CONCURRENT",
	}
)

func (x VkSharingMode) String() string {
	if s, ok := reverseVkSharingMode[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSharingMode=%d", x)
}

type VkQueryControlFlagBits uint32

const (
	VK_QUERY_CONTROL_PRECISE_BIT VkQueryControlFlagBits = (1 << 0)
)

var (
	reverseVkQueryControlFlagBits map[VkQueryControlFlagBits]string = map[VkQueryControlFlagBits]string{
		VK_QUERY_CONTROL_PRECISE_BIT: "VK_QUERY_CONTROL_PRECISE_BIT",
	}
)

func (x VkQueryControlFlagBits) String() string {
	if s, ok := reverseVkQueryControlFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkQueryControlFlagBits=%d", x)
}

type VkAttachmentStoreOp uint32

const (
	VK_ATTACHMENT_STORE_OP_STORE     VkAttachmentStoreOp = 0
	VK_ATTACHMENT_STORE_OP_DONT_CARE VkAttachmentStoreOp = 1
)

var (
	reverseVkAttachmentStoreOp map[VkAttachmentStoreOp]string = map[VkAttachmentStoreOp]string{
		VK_ATTACHMENT_STORE_OP_STORE:     "VK_ATTACHMENT_STORE_OP_STORE",
		VK_ATTACHMENT_STORE_OP_DONT_CARE: "VK_ATTACHMENT_STORE_OP_DONT_CARE",
	}
)

func (x VkAttachmentStoreOp) String() string {
	if s, ok := reverseVkAttachmentStoreOp[x]; ok {
		return s
	}
	return fmt.Sprintf("VkAttachmentStoreOp=%d", x)
}

type VkCommandBufferUsageFlagBits uint32

const (
	VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT      VkCommandBufferUsageFlagBits = (1 << 0)
	VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT VkCommandBufferUsageFlagBits = (1 << 1)
	VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT     VkCommandBufferUsageFlagBits = (1 << 2)
)

var (
	reverseVkCommandBufferUsageFlagBits map[VkCommandBufferUsageFlagBits]string = map[VkCommandBufferUsageFlagBits]string{
		VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT:      "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT",
		VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT",
		VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT:     "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT",
	}
)

func (x VkCommandBufferUsageFlagBits) String() string {
	if s, ok := reverseVkCommandBufferUsageFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCommandBufferUsageFlagBits=%d", x)
}

type VkDependencyFlagBits uint32

const (
	VK_DEPENDENCY_BY_REGION_BIT    VkDependencyFlagBits = (1 << 0)
	VK_DEPENDENCY_DEVICE_GROUP_BIT VkDependencyFlagBits = (1 << 2)
	VK_DEPENDENCY_VIEW_LOCAL_BIT   VkDependencyFlagBits = (1 << 1)
)

var (
	reverseVkDependencyFlagBits map[VkDependencyFlagBits]string = map[VkDependencyFlagBits]string{
		VK_DEPENDENCY_BY_REGION_BIT:    "VK_DEPENDENCY_BY_REGION_BIT",
		VK_DEPENDENCY_DEVICE_GROUP_BIT: "VK_DEPENDENCY_DEVICE_GROUP_BIT",
		VK_DEPENDENCY_VIEW_LOCAL_BIT:   "VK_DEPENDENCY_VIEW_LOCAL_BIT",
	}
)

func (x VkDependencyFlagBits) String() string {
	if s, ok := reverseVkDependencyFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDependencyFlagBits=%d", x)
}

type VkAttachmentDescriptionFlagBits uint32

const (
	VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT VkAttachmentDescriptionFlagBits = (1 << 0)
)

var (
	reverseVkAttachmentDescriptionFlagBits map[VkAttachmentDescriptionFlagBits]string = map[VkAttachmentDescriptionFlagBits]string{
		VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT",
	}
)

func (x VkAttachmentDescriptionFlagBits) String() string {
	if s, ok := reverseVkAttachmentDescriptionFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkAttachmentDescriptionFlagBits=%d", x)
}

type VkAccessFlagBits uint32

const (
	VK_ACCESS_INDIRECT_COMMAND_READ_BIT          VkAccessFlagBits = (1 << 0)
	VK_ACCESS_INDEX_READ_BIT                     VkAccessFlagBits = (1 << 1)
	VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT          VkAccessFlagBits = (1 << 2)
	VK_ACCESS_UNIFORM_READ_BIT                   VkAccessFlagBits = (1 << 3)
	VK_ACCESS_INPUT_ATTACHMENT_READ_BIT          VkAccessFlagBits = (1 << 4)
	VK_ACCESS_SHADER_READ_BIT                    VkAccessFlagBits = (1 << 5)
	VK_ACCESS_SHADER_WRITE_BIT                   VkAccessFlagBits = (1 << 6)
	VK_ACCESS_COLOR_ATTACHMENT_READ_BIT          VkAccessFlagBits = (1 << 7)
	VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT         VkAccessFlagBits = (1 << 8)
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT  VkAccessFlagBits = (1 << 9)
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT VkAccessFlagBits = (1 << 10)
	VK_ACCESS_TRANSFER_READ_BIT                  VkAccessFlagBits = (1 << 11)
	VK_ACCESS_TRANSFER_WRITE_BIT                 VkAccessFlagBits = (1 << 12)
	VK_ACCESS_HOST_READ_BIT                      VkAccessFlagBits = (1 << 13)
	VK_ACCESS_HOST_WRITE_BIT                     VkAccessFlagBits = (1 << 14)
	VK_ACCESS_MEMORY_READ_BIT                    VkAccessFlagBits = (1 << 15)
	VK_ACCESS_MEMORY_WRITE_BIT                   VkAccessFlagBits = (1 << 16)
)

var (
	reverseVkAccessFlagBits map[VkAccessFlagBits]string = map[VkAccessFlagBits]string{
		VK_ACCESS_INDIRECT_COMMAND_READ_BIT:          "VK_ACCESS_INDIRECT_COMMAND_READ_BIT",
		VK_ACCESS_INDEX_READ_BIT:                     "VK_ACCESS_INDEX_READ_BIT",
		VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT:          "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",
		VK_ACCESS_UNIFORM_READ_BIT:                   "VK_ACCESS_UNIFORM_READ_BIT",
		VK_ACCESS_INPUT_ATTACHMENT_READ_BIT:          "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT",
		VK_ACCESS_SHADER_READ_BIT:                    "VK_ACCESS_SHADER_READ_BIT",
		VK_ACCESS_SHADER_WRITE_BIT:                   "VK_ACCESS_SHADER_WRITE_BIT",
		VK_ACCESS_COLOR_ATTACHMENT_READ_BIT:          "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT",
		VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT:         "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT",
		VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT:  "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT",
		VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT",
		VK_ACCESS_TRANSFER_READ_BIT:                  "VK_ACCESS_TRANSFER_READ_BIT",
		VK_ACCESS_TRANSFER_WRITE_BIT:                 "VK_ACCESS_TRANSFER_WRITE_BIT",
		VK_ACCESS_HOST_READ_BIT:                      "VK_ACCESS_HOST_READ_BIT",
		VK_ACCESS_HOST_WRITE_BIT:                     "VK_ACCESS_HOST_WRITE_BIT",
		VK_ACCESS_MEMORY_READ_BIT:                    "VK_ACCESS_MEMORY_READ_BIT",
		VK_ACCESS_MEMORY_WRITE_BIT:                   "VK_ACCESS_MEMORY_WRITE_BIT",
	}
)

func (x VkAccessFlagBits) String() string {
	if s, ok := reverseVkAccessFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkAccessFlagBits=%d", x)
}

type VkSparseMemoryBindFlagBits uint32

const (
	VK_SPARSE_MEMORY_BIND_METADATA_BIT VkSparseMemoryBindFlagBits = (1 << 0)
)

var (
	reverseVkSparseMemoryBindFlagBits map[VkSparseMemoryBindFlagBits]string = map[VkSparseMemoryBindFlagBits]string{
		VK_SPARSE_MEMORY_BIND_METADATA_BIT: "VK_SPARSE_MEMORY_BIND_METADATA_BIT",
	}
)

func (x VkSparseMemoryBindFlagBits) String() string {
	if s, ok := reverseVkSparseMemoryBindFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSparseMemoryBindFlagBits=%d", x)
}

type VkQueryType uint32

const (
	VK_QUERY_TYPE_OCCLUSION           VkQueryType = 0
	VK_QUERY_TYPE_PIPELINE_STATISTICS VkQueryType = 1
	VK_QUERY_TYPE_TIMESTAMP           VkQueryType = 2
)

var (
	reverseVkQueryType map[VkQueryType]string = map[VkQueryType]string{
		VK_QUERY_TYPE_OCCLUSION:           "VK_QUERY_TYPE_OCCLUSION",
		VK_QUERY_TYPE_PIPELINE_STATISTICS: "VK_QUERY_TYPE_PIPELINE_STATISTICS",
		VK_QUERY_TYPE_TIMESTAMP:           "VK_QUERY_TYPE_TIMESTAMP",
	}
)

func (x VkQueryType) String() string {
	if s, ok := reverseVkQueryType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkQueryType=%d", x)
}

type VkStencilFaceFlagBits uint32

const (
	VK_STENCIL_FACE_FRONT_BIT      VkStencilFaceFlagBits = (1 << 0)
	VK_STENCIL_FACE_BACK_BIT       VkStencilFaceFlagBits = (1 << 1)
	VK_STENCIL_FACE_FRONT_AND_BACK VkStencilFaceFlagBits = 0x00000003
	VK_STENCIL_FRONT_AND_BACK      VkStencilFaceFlagBits = VK_STENCIL_FACE_FRONT_AND_BACK
)

var (
	reverseVkStencilFaceFlagBits map[VkStencilFaceFlagBits]string = map[VkStencilFaceFlagBits]string{
		VK_STENCIL_FACE_FRONT_BIT:      "VK_STENCIL_FACE_FRONT_BIT",
		VK_STENCIL_FACE_BACK_BIT:       "VK_STENCIL_FACE_BACK_BIT",
		VK_STENCIL_FACE_FRONT_AND_BACK: "VK_STENCIL_FACE_FRONT_AND_BACK",
	}
)

func (x VkStencilFaceFlagBits) String() string {
	if s, ok := reverseVkStencilFaceFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkStencilFaceFlagBits=%d", x)
}

type VkDescriptorSetLayoutCreateFlagBits uint32

const (
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT VkDescriptorSetLayoutCreateFlagBits = (1 << 1)
)

var (
	reverseVkDescriptorSetLayoutCreateFlagBits map[VkDescriptorSetLayoutCreateFlagBits]string = map[VkDescriptorSetLayoutCreateFlagBits]string{
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT: "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT",
	}
)

func (x VkDescriptorSetLayoutCreateFlagBits) String() string {
	if s, ok := reverseVkDescriptorSetLayoutCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDescriptorSetLayoutCreateFlagBits=%d", x)
}

type VkBufferCreateFlagBits uint32

const (
	VK_BUFFER_CREATE_SPARSE_BINDING_BIT                VkBufferCreateFlagBits = (1 << 0)
	VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT              VkBufferCreateFlagBits = (1 << 1)
	VK_BUFFER_CREATE_SPARSE_ALIASED_BIT                VkBufferCreateFlagBits = (1 << 2)
	VK_BUFFER_CREATE_PROTECTED_BIT                     VkBufferCreateFlagBits = (1 << 3)
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT VkBufferCreateFlagBits = (1 << 4)
)

var (
	reverseVkBufferCreateFlagBits map[VkBufferCreateFlagBits]string = map[VkBufferCreateFlagBits]string{
		VK_BUFFER_CREATE_SPARSE_BINDING_BIT:                "VK_BUFFER_CREATE_SPARSE_BINDING_BIT",
		VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT:              "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT",
		VK_BUFFER_CREATE_SPARSE_ALIASED_BIT:                "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT",
		VK_BUFFER_CREATE_PROTECTED_BIT:                     "VK_BUFFER_CREATE_PROTECTED_BIT",
		VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
	}
)

func (x VkBufferCreateFlagBits) String() string {
	if s, ok := reverseVkBufferCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkBufferCreateFlagBits=%d", x)
}

type VkPipelineCacheHeaderVersion uint32

const (
	VK_PIPELINE_CACHE_HEADER_VERSION_ONE VkPipelineCacheHeaderVersion = 1
)

var (
	reverseVkPipelineCacheHeaderVersion map[VkPipelineCacheHeaderVersion]string = map[VkPipelineCacheHeaderVersion]string{
		VK_PIPELINE_CACHE_HEADER_VERSION_ONE: "VK_PIPELINE_CACHE_HEADER_VERSION_ONE",
	}
)

func (x VkPipelineCacheHeaderVersion) String() string {
	if s, ok := reverseVkPipelineCacheHeaderVersion[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPipelineCacheHeaderVersion=%d", x)
}

type VkShaderModuleCreateFlagBits uint32

type VkFormatFeatureFlagBits uint32

const (
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT                                                           VkFormatFeatureFlagBits = (1 << 0)
	VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT                                                           VkFormatFeatureFlagBits = (1 << 1)
	VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT                                                    VkFormatFeatureFlagBits = (1 << 2)
	VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT                                                    VkFormatFeatureFlagBits = (1 << 3)
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT                                                    VkFormatFeatureFlagBits = (1 << 4)
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT                                             VkFormatFeatureFlagBits = (1 << 5)
	VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT                                                           VkFormatFeatureFlagBits = (1 << 6)
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT                                                        VkFormatFeatureFlagBits = (1 << 7)
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT                                                  VkFormatFeatureFlagBits = (1 << 8)
	VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT                                                VkFormatFeatureFlagBits = (1 << 9)
	VK_FORMAT_FEATURE_BLIT_SRC_BIT                                                                VkFormatFeatureFlagBits = (1 << 10)
	VK_FORMAT_FEATURE_BLIT_DST_BIT                                                                VkFormatFeatureFlagBits = (1 << 11)
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT                                             VkFormatFeatureFlagBits = (1 << 12)
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT                                                            VkFormatFeatureFlagBits = (1 << 14)
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT                                                            VkFormatFeatureFlagBits = (1 << 15)
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT                                                 VkFormatFeatureFlagBits = (1 << 17)
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT                            VkFormatFeatureFlagBits = (1 << 18)
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT           VkFormatFeatureFlagBits = (1 << 19)
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT           VkFormatFeatureFlagBits = (1 << 20)
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT VkFormatFeatureFlagBits = (1 << 21)
	VK_FORMAT_FEATURE_DISJOINT_BIT                                                                VkFormatFeatureFlagBits = (1 << 22)
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT                                                  VkFormatFeatureFlagBits = (1 << 23)
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT                                             VkFormatFeatureFlagBits = (1 << 16)
)

var (
	reverseVkFormatFeatureFlagBits map[VkFormatFeatureFlagBits]string = map[VkFormatFeatureFlagBits]string{
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT:                                                           "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT",
		VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT:                                                           "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT",
		VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT:                                                    "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT",
		VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT:                                                    "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT",
		VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT:                                                    "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT",
		VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT:                                             "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT",
		VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT:                                                           "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT",
		VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT:                                                        "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT",
		VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT:                                                  "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT",
		VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT:                                                "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT",
		VK_FORMAT_FEATURE_BLIT_SRC_BIT:                                                                "VK_FORMAT_FEATURE_BLIT_SRC_BIT",
		VK_FORMAT_FEATURE_BLIT_DST_BIT:                                                                "VK_FORMAT_FEATURE_BLIT_DST_BIT",
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT:                                             "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT",
		VK_FORMAT_FEATURE_TRANSFER_SRC_BIT:                                                            "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT",
		VK_FORMAT_FEATURE_TRANSFER_DST_BIT:                                                            "VK_FORMAT_FEATURE_TRANSFER_DST_BIT",
		VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT:                                                 "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT",
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT:                            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT",
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT:           "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT",
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT:           "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT",
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT",
		VK_FORMAT_FEATURE_DISJOINT_BIT:                                                                "VK_FORMAT_FEATURE_DISJOINT_BIT",
		VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT:                                                  "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT",
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT:                                             "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT",
	}
)

func (x VkFormatFeatureFlagBits) String() string {
	if s, ok := reverseVkFormatFeatureFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkFormatFeatureFlagBits=%d", x)
}

type VkVendorId uint32

const (
	VK_VENDOR_ID_VIV      VkVendorId = 0x10001
	VK_VENDOR_ID_VSI      VkVendorId = 0x10002
	VK_VENDOR_ID_KAZAN    VkVendorId = 0x10003
	VK_VENDOR_ID_CODEPLAY VkVendorId = 0x10004
	VK_VENDOR_ID_MESA     VkVendorId = 0x10005
	VK_VENDOR_ID_POCL     VkVendorId = 0x10006
)

var (
	reverseVkVendorId map[VkVendorId]string = map[VkVendorId]string{
		VK_VENDOR_ID_VIV:      "VK_VENDOR_ID_VIV",
		VK_VENDOR_ID_VSI:      "VK_VENDOR_ID_VSI",
		VK_VENDOR_ID_KAZAN:    "VK_VENDOR_ID_KAZAN",
		VK_VENDOR_ID_CODEPLAY: "VK_VENDOR_ID_CODEPLAY",
		VK_VENDOR_ID_MESA:     "VK_VENDOR_ID_MESA",
		VK_VENDOR_ID_POCL:     "VK_VENDOR_ID_POCL",
	}
)

func (x VkVendorId) String() string {
	if s, ok := reverseVkVendorId[x]; ok {
		return s
	}
	return fmt.Sprintf("VkVendorId=%d", x)
}

type VkLogicOp uint32

const (
	VK_LOGIC_OP_CLEAR         VkLogicOp = 0
	VK_LOGIC_OP_AND           VkLogicOp = 1
	VK_LOGIC_OP_AND_REVERSE   VkLogicOp = 2
	VK_LOGIC_OP_COPY          VkLogicOp = 3
	VK_LOGIC_OP_AND_INVERTED  VkLogicOp = 4
	VK_LOGIC_OP_NO_OP         VkLogicOp = 5
	VK_LOGIC_OP_XOR           VkLogicOp = 6
	VK_LOGIC_OP_OR            VkLogicOp = 7
	VK_LOGIC_OP_NOR           VkLogicOp = 8
	VK_LOGIC_OP_EQUIVALENT    VkLogicOp = 9
	VK_LOGIC_OP_INVERT        VkLogicOp = 10
	VK_LOGIC_OP_OR_REVERSE    VkLogicOp = 11
	VK_LOGIC_OP_COPY_INVERTED VkLogicOp = 12
	VK_LOGIC_OP_OR_INVERTED   VkLogicOp = 13
	VK_LOGIC_OP_NAND          VkLogicOp = 14
	VK_LOGIC_OP_SET           VkLogicOp = 15
)

var (
	reverseVkLogicOp map[VkLogicOp]string = map[VkLogicOp]string{
		VK_LOGIC_OP_CLEAR:         "VK_LOGIC_OP_CLEAR",
		VK_LOGIC_OP_AND:           "VK_LOGIC_OP_AND",
		VK_LOGIC_OP_AND_REVERSE:   "VK_LOGIC_OP_AND_REVERSE",
		VK_LOGIC_OP_COPY:          "VK_LOGIC_OP_COPY",
		VK_LOGIC_OP_AND_INVERTED:  "VK_LOGIC_OP_AND_INVERTED",
		VK_LOGIC_OP_NO_OP:         "VK_LOGIC_OP_NO_OP",
		VK_LOGIC_OP_XOR:           "VK_LOGIC_OP_XOR",
		VK_LOGIC_OP_OR:            "VK_LOGIC_OP_OR",
		VK_LOGIC_OP_NOR:           "VK_LOGIC_OP_NOR",
		VK_LOGIC_OP_EQUIVALENT:    "VK_LOGIC_OP_EQUIVALENT",
		VK_LOGIC_OP_INVERT:        "VK_LOGIC_OP_INVERT",
		VK_LOGIC_OP_OR_REVERSE:    "VK_LOGIC_OP_OR_REVERSE",
		VK_LOGIC_OP_COPY_INVERTED: "VK_LOGIC_OP_COPY_INVERTED",
		VK_LOGIC_OP_OR_INVERTED:   "VK_LOGIC_OP_OR_INVERTED",
		VK_LOGIC_OP_NAND:          "VK_LOGIC_OP_NAND",
		VK_LOGIC_OP_SET:           "VK_LOGIC_OP_SET",
	}
)

func (x VkLogicOp) String() string {
	if s, ok := reverseVkLogicOp[x]; ok {
		return s
	}
	return fmt.Sprintf("VkLogicOp=%d", x)
}

type VkImageCreateFlagBits uint32

const (
	VK_IMAGE_CREATE_SPARSE_BINDING_BIT              VkImageCreateFlagBits = (1 << 0)
	VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT            VkImageCreateFlagBits = (1 << 1)
	VK_IMAGE_CREATE_SPARSE_ALIASED_BIT              VkImageCreateFlagBits = (1 << 2)
	VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT              VkImageCreateFlagBits = (1 << 3)
	VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT             VkImageCreateFlagBits = (1 << 4)
	VK_IMAGE_CREATE_ALIAS_BIT                       VkImageCreateFlagBits = (1 << 10)
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT VkImageCreateFlagBits = (1 << 6)
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT         VkImageCreateFlagBits = (1 << 5)
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT VkImageCreateFlagBits = (1 << 7)
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT              VkImageCreateFlagBits = (1 << 8)
	VK_IMAGE_CREATE_PROTECTED_BIT                   VkImageCreateFlagBits = (1 << 11)
	VK_IMAGE_CREATE_DISJOINT_BIT                    VkImageCreateFlagBits = (1 << 9)
)

var (
	reverseVkImageCreateFlagBits map[VkImageCreateFlagBits]string = map[VkImageCreateFlagBits]string{
		VK_IMAGE_CREATE_SPARSE_BINDING_BIT:              "VK_IMAGE_CREATE_SPARSE_BINDING_BIT",
		VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT:            "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT",
		VK_IMAGE_CREATE_SPARSE_ALIASED_BIT:              "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT",
		VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT:              "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT",
		VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT:             "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT",
		VK_IMAGE_CREATE_ALIAS_BIT:                       "VK_IMAGE_CREATE_ALIAS_BIT",
		VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT",
		VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT:         "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT",
		VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT",
		VK_IMAGE_CREATE_EXTENDED_USAGE_BIT:              "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT",
		VK_IMAGE_CREATE_PROTECTED_BIT:                   "VK_IMAGE_CREATE_PROTECTED_BIT",
		VK_IMAGE_CREATE_DISJOINT_BIT:                    "VK_IMAGE_CREATE_DISJOINT_BIT",
	}
)

func (x VkImageCreateFlagBits) String() string {
	if s, ok := reverseVkImageCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkImageCreateFlagBits=%d", x)
}

type VkObjectType uint32

const (
	VK_OBJECT_TYPE_UNKNOWN                    VkObjectType = 0
	VK_OBJECT_TYPE_INSTANCE                   VkObjectType = 1
	VK_OBJECT_TYPE_PHYSICAL_DEVICE            VkObjectType = 2
	VK_OBJECT_TYPE_DEVICE                     VkObjectType = 3
	VK_OBJECT_TYPE_QUEUE                      VkObjectType = 4
	VK_OBJECT_TYPE_SEMAPHORE                  VkObjectType = 5
	VK_OBJECT_TYPE_COMMAND_BUFFER             VkObjectType = 6
	VK_OBJECT_TYPE_FENCE                      VkObjectType = 7
	VK_OBJECT_TYPE_DEVICE_MEMORY              VkObjectType = 8
	VK_OBJECT_TYPE_BUFFER                     VkObjectType = 9
	VK_OBJECT_TYPE_IMAGE                      VkObjectType = 10
	VK_OBJECT_TYPE_EVENT                      VkObjectType = 11
	VK_OBJECT_TYPE_QUERY_POOL                 VkObjectType = 12
	VK_OBJECT_TYPE_BUFFER_VIEW                VkObjectType = 13
	VK_OBJECT_TYPE_IMAGE_VIEW                 VkObjectType = 14
	VK_OBJECT_TYPE_SHADER_MODULE              VkObjectType = 15
	VK_OBJECT_TYPE_PIPELINE_CACHE             VkObjectType = 16
	VK_OBJECT_TYPE_PIPELINE_LAYOUT            VkObjectType = 17
	VK_OBJECT_TYPE_RENDER_PASS                VkObjectType = 18
	VK_OBJECT_TYPE_PIPELINE                   VkObjectType = 19
	VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT      VkObjectType = 20
	VK_OBJECT_TYPE_SAMPLER                    VkObjectType = 21
	VK_OBJECT_TYPE_DESCRIPTOR_POOL            VkObjectType = 22
	VK_OBJECT_TYPE_DESCRIPTOR_SET             VkObjectType = 23
	VK_OBJECT_TYPE_FRAMEBUFFER                VkObjectType = 24
	VK_OBJECT_TYPE_COMMAND_POOL               VkObjectType = 25
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION   VkObjectType = 1000156000
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE VkObjectType = 1000085000
	VK_OBJECT_TYPE_SURFACE_KHR                VkObjectType = 1000000000
	VK_OBJECT_TYPE_SWAPCHAIN_KHR              VkObjectType = 1000001000
	VK_OBJECT_TYPE_DISPLAY_KHR                VkObjectType = 1000002000
	VK_OBJECT_TYPE_DISPLAY_MODE_KHR           VkObjectType = 1000002001
)

var (
	reverseVkObjectType map[VkObjectType]string = map[VkObjectType]string{
		VK_OBJECT_TYPE_UNKNOWN:                    "VK_OBJECT_TYPE_UNKNOWN",
		VK_OBJECT_TYPE_INSTANCE:                   "VK_OBJECT_TYPE_INSTANCE",
		VK_OBJECT_TYPE_PHYSICAL_DEVICE:            "VK_OBJECT_TYPE_PHYSICAL_DEVICE",
		VK_OBJECT_TYPE_DEVICE:                     "VK_OBJECT_TYPE_DEVICE",
		VK_OBJECT_TYPE_QUEUE:                      "VK_OBJECT_TYPE_QUEUE",
		VK_OBJECT_TYPE_SEMAPHORE:                  "VK_OBJECT_TYPE_SEMAPHORE",
		VK_OBJECT_TYPE_COMMAND_BUFFER:             "VK_OBJECT_TYPE_COMMAND_BUFFER",
		VK_OBJECT_TYPE_FENCE:                      "VK_OBJECT_TYPE_FENCE",
		VK_OBJECT_TYPE_DEVICE_MEMORY:              "VK_OBJECT_TYPE_DEVICE_MEMORY",
		VK_OBJECT_TYPE_BUFFER:                     "VK_OBJECT_TYPE_BUFFER",
		VK_OBJECT_TYPE_IMAGE:                      "VK_OBJECT_TYPE_IMAGE",
		VK_OBJECT_TYPE_EVENT:                      "VK_OBJECT_TYPE_EVENT",
		VK_OBJECT_TYPE_QUERY_POOL:                 "VK_OBJECT_TYPE_QUERY_POOL",
		VK_OBJECT_TYPE_BUFFER_VIEW:                "VK_OBJECT_TYPE_BUFFER_VIEW",
		VK_OBJECT_TYPE_IMAGE_VIEW:                 "VK_OBJECT_TYPE_IMAGE_VIEW",
		VK_OBJECT_TYPE_SHADER_MODULE:              "VK_OBJECT_TYPE_SHADER_MODULE",
		VK_OBJECT_TYPE_PIPELINE_CACHE:             "VK_OBJECT_TYPE_PIPELINE_CACHE",
		VK_OBJECT_TYPE_PIPELINE_LAYOUT:            "VK_OBJECT_TYPE_PIPELINE_LAYOUT",
		VK_OBJECT_TYPE_RENDER_PASS:                "VK_OBJECT_TYPE_RENDER_PASS",
		VK_OBJECT_TYPE_PIPELINE:                   "VK_OBJECT_TYPE_PIPELINE",
		VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT:      "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT",
		VK_OBJECT_TYPE_SAMPLER:                    "VK_OBJECT_TYPE_SAMPLER",
		VK_OBJECT_TYPE_DESCRIPTOR_POOL:            "VK_OBJECT_TYPE_DESCRIPTOR_POOL",
		VK_OBJECT_TYPE_DESCRIPTOR_SET:             "VK_OBJECT_TYPE_DESCRIPTOR_SET",
		VK_OBJECT_TYPE_FRAMEBUFFER:                "VK_OBJECT_TYPE_FRAMEBUFFER",
		VK_OBJECT_TYPE_COMMAND_POOL:               "VK_OBJECT_TYPE_COMMAND_POOL",
		VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION:   "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION",
		VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE",
		VK_OBJECT_TYPE_SURFACE_KHR:                "VK_OBJECT_TYPE_SURFACE_KHR",
		VK_OBJECT_TYPE_SWAPCHAIN_KHR:              "VK_OBJECT_TYPE_SWAPCHAIN_KHR",
		VK_OBJECT_TYPE_DISPLAY_KHR:                "VK_OBJECT_TYPE_DISPLAY_KHR",
		VK_OBJECT_TYPE_DISPLAY_MODE_KHR:           "VK_OBJECT_TYPE_DISPLAY_MODE_KHR",
	}
)

func (x VkObjectType) String() string {
	if s, ok := reverseVkObjectType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkObjectType=%d", x)
}

type VkFrontFace uint32

const (
	VK_FRONT_FACE_COUNTER_CLOCKWISE VkFrontFace = 0
	VK_FRONT_FACE_CLOCKWISE         VkFrontFace = 1
)

var (
	reverseVkFrontFace map[VkFrontFace]string = map[VkFrontFace]string{
		VK_FRONT_FACE_COUNTER_CLOCKWISE: "VK_FRONT_FACE_COUNTER_CLOCKWISE",
		VK_FRONT_FACE_CLOCKWISE:         "VK_FRONT_FACE_CLOCKWISE",
	}
)

func (x VkFrontFace) String() string {
	if s, ok := reverseVkFrontFace[x]; ok {
		return s
	}
	return fmt.Sprintf("VkFrontFace=%d", x)
}

type VkImageTiling uint32

const (
	VK_IMAGE_TILING_OPTIMAL VkImageTiling = 0
	VK_IMAGE_TILING_LINEAR  VkImageTiling = 1
)

var (
	reverseVkImageTiling map[VkImageTiling]string = map[VkImageTiling]string{
		VK_IMAGE_TILING_OPTIMAL: "VK_IMAGE_TILING_OPTIMAL",
		VK_IMAGE_TILING_LINEAR:  "VK_IMAGE_TILING_LINEAR",
	}
)

func (x VkImageTiling) String() string {
	if s, ok := reverseVkImageTiling[x]; ok {
		return s
	}
	return fmt.Sprintf("VkImageTiling=%d", x)
}

type VkImageType uint32

const (
	VK_IMAGE_TYPE_1D VkImageType = 0
	VK_IMAGE_TYPE_2D VkImageType = 1
	VK_IMAGE_TYPE_3D VkImageType = 2
)

var (
	reverseVkImageType map[VkImageType]string = map[VkImageType]string{
		VK_IMAGE_TYPE_1D: "VK_IMAGE_TYPE_1D",
		VK_IMAGE_TYPE_2D: "VK_IMAGE_TYPE_2D",
		VK_IMAGE_TYPE_3D: "VK_IMAGE_TYPE_3D",
	}
)

func (x VkImageType) String() string {
	if s, ok := reverseVkImageType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkImageType=%d", x)
}

type VkImageUsageFlagBits uint32

const (
	VK_IMAGE_USAGE_TRANSFER_SRC_BIT             VkImageUsageFlagBits = (1 << 0)
	VK_IMAGE_USAGE_TRANSFER_DST_BIT             VkImageUsageFlagBits = (1 << 1)
	VK_IMAGE_USAGE_SAMPLED_BIT                  VkImageUsageFlagBits = (1 << 2)
	VK_IMAGE_USAGE_STORAGE_BIT                  VkImageUsageFlagBits = (1 << 3)
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT         VkImageUsageFlagBits = (1 << 4)
	VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT VkImageUsageFlagBits = (1 << 5)
	VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT     VkImageUsageFlagBits = (1 << 6)
	VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT         VkImageUsageFlagBits = (1 << 7)
)

var (
	reverseVkImageUsageFlagBits map[VkImageUsageFlagBits]string = map[VkImageUsageFlagBits]string{
		VK_IMAGE_USAGE_TRANSFER_SRC_BIT:             "VK_IMAGE_USAGE_TRANSFER_SRC_BIT",
		VK_IMAGE_USAGE_TRANSFER_DST_BIT:             "VK_IMAGE_USAGE_TRANSFER_DST_BIT",
		VK_IMAGE_USAGE_SAMPLED_BIT:                  "VK_IMAGE_USAGE_SAMPLED_BIT",
		VK_IMAGE_USAGE_STORAGE_BIT:                  "VK_IMAGE_USAGE_STORAGE_BIT",
		VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT:         "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT",
		VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT",
		VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT:     "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT",
		VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT:         "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT",
	}
)

func (x VkImageUsageFlagBits) String() string {
	if s, ok := reverseVkImageUsageFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkImageUsageFlagBits=%d", x)
}

type VkSparseImageFormatFlagBits uint32

const (
	VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT         VkSparseImageFormatFlagBits = (1 << 0)
	VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT       VkSparseImageFormatFlagBits = (1 << 1)
	VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT VkSparseImageFormatFlagBits = (1 << 2)
)

var (
	reverseVkSparseImageFormatFlagBits map[VkSparseImageFormatFlagBits]string = map[VkSparseImageFormatFlagBits]string{
		VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT:         "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT",
		VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT:       "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT",
		VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT",
	}
)

func (x VkSparseImageFormatFlagBits) String() string {
	if s, ok := reverseVkSparseImageFormatFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSparseImageFormatFlagBits=%d", x)
}

type VkQueryResultFlagBits uint32

const (
	VK_QUERY_RESULT_64_BIT                VkQueryResultFlagBits = (1 << 0)
	VK_QUERY_RESULT_WAIT_BIT              VkQueryResultFlagBits = (1 << 1)
	VK_QUERY_RESULT_WITH_AVAILABILITY_BIT VkQueryResultFlagBits = (1 << 2)
	VK_QUERY_RESULT_PARTIAL_BIT           VkQueryResultFlagBits = (1 << 3)
)

var (
	reverseVkQueryResultFlagBits map[VkQueryResultFlagBits]string = map[VkQueryResultFlagBits]string{
		VK_QUERY_RESULT_64_BIT:                "VK_QUERY_RESULT_64_BIT",
		VK_QUERY_RESULT_WAIT_BIT:              "VK_QUERY_RESULT_WAIT_BIT",
		VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT",
		VK_QUERY_RESULT_PARTIAL_BIT:           "VK_QUERY_RESULT_PARTIAL_BIT",
	}
)

func (x VkQueryResultFlagBits) String() string {
	if s, ok := reverseVkQueryResultFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkQueryResultFlagBits=%d", x)
}

type VkBorderColor uint32

const (
	VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK VkBorderColor = 0
	VK_BORDER_COLOR_INT_TRANSPARENT_BLACK   VkBorderColor = 1
	VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK      VkBorderColor = 2
	VK_BORDER_COLOR_INT_OPAQUE_BLACK        VkBorderColor = 3
	VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE      VkBorderColor = 4
	VK_BORDER_COLOR_INT_OPAQUE_WHITE        VkBorderColor = 5
)

var (
	reverseVkBorderColor map[VkBorderColor]string = map[VkBorderColor]string{
		VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK",
		VK_BORDER_COLOR_INT_TRANSPARENT_BLACK:   "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK",
		VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK:      "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK",
		VK_BORDER_COLOR_INT_OPAQUE_BLACK:        "VK_BORDER_COLOR_INT_OPAQUE_BLACK",
		VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE:      "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE",
		VK_BORDER_COLOR_INT_OPAQUE_WHITE:        "VK_BORDER_COLOR_INT_OPAQUE_WHITE",
	}
)

func (x VkBorderColor) String() string {
	if s, ok := reverseVkBorderColor[x]; ok {
		return s
	}
	return fmt.Sprintf("VkBorderColor=%d", x)
}

type VkDynamicState uint32

const (
	VK_DYNAMIC_STATE_VIEWPORT             VkDynamicState = 0
	VK_DYNAMIC_STATE_SCISSOR              VkDynamicState = 1
	VK_DYNAMIC_STATE_LINE_WIDTH           VkDynamicState = 2
	VK_DYNAMIC_STATE_DEPTH_BIAS           VkDynamicState = 3
	VK_DYNAMIC_STATE_BLEND_CONSTANTS      VkDynamicState = 4
	VK_DYNAMIC_STATE_DEPTH_BOUNDS         VkDynamicState = 5
	VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK VkDynamicState = 6
	VK_DYNAMIC_STATE_STENCIL_WRITE_MASK   VkDynamicState = 7
	VK_DYNAMIC_STATE_STENCIL_REFERENCE    VkDynamicState = 8
)

var (
	reverseVkDynamicState map[VkDynamicState]string = map[VkDynamicState]string{
		VK_DYNAMIC_STATE_VIEWPORT:             "VK_DYNAMIC_STATE_VIEWPORT",
		VK_DYNAMIC_STATE_SCISSOR:              "VK_DYNAMIC_STATE_SCISSOR",
		VK_DYNAMIC_STATE_LINE_WIDTH:           "VK_DYNAMIC_STATE_LINE_WIDTH",
		VK_DYNAMIC_STATE_DEPTH_BIAS:           "VK_DYNAMIC_STATE_DEPTH_BIAS",
		VK_DYNAMIC_STATE_BLEND_CONSTANTS:      "VK_DYNAMIC_STATE_BLEND_CONSTANTS",
		VK_DYNAMIC_STATE_DEPTH_BOUNDS:         "VK_DYNAMIC_STATE_DEPTH_BOUNDS",
		VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK",
		VK_DYNAMIC_STATE_STENCIL_WRITE_MASK:   "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK",
		VK_DYNAMIC_STATE_STENCIL_REFERENCE:    "VK_DYNAMIC_STATE_STENCIL_REFERENCE",
	}
)

func (x VkDynamicState) String() string {
	if s, ok := reverseVkDynamicState[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDynamicState=%d", x)
}

type VkInternalAllocationType uint32

const (
	VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE VkInternalAllocationType = 0
)

var (
	reverseVkInternalAllocationType map[VkInternalAllocationType]string = map[VkInternalAllocationType]string{
		VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE",
	}
)

func (x VkInternalAllocationType) String() string {
	if s, ok := reverseVkInternalAllocationType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkInternalAllocationType=%d", x)
}

type VkImageLayout uint32

const (
	VK_IMAGE_LAYOUT_UNDEFINED                                  VkImageLayout = 0
	VK_IMAGE_LAYOUT_GENERAL                                    VkImageLayout = 1
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL                   VkImageLayout = 2
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL           VkImageLayout = 3
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL            VkImageLayout = 4
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL                   VkImageLayout = 5
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL                       VkImageLayout = 6
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL                       VkImageLayout = 7
	VK_IMAGE_LAYOUT_PREINITIALIZED                             VkImageLayout = 8
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL VkImageLayout = 1000117000
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL VkImageLayout = 1000117001
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL                   VkImageLayout = 1000241000
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL                    VkImageLayout = 1000241001
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL                 VkImageLayout = 1000241002
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL                  VkImageLayout = 1000241003
	VK_IMAGE_LAYOUT_PRESENT_SRC_KHR                            VkImageLayout = 1000001002
)

var (
	reverseVkImageLayout map[VkImageLayout]string = map[VkImageLayout]string{
		VK_IMAGE_LAYOUT_UNDEFINED:                                  "VK_IMAGE_LAYOUT_UNDEFINED",
		VK_IMAGE_LAYOUT_GENERAL:                                    "VK_IMAGE_LAYOUT_GENERAL",
		VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:                   "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",
		VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:           "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL",
		VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:            "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",
		VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:                   "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",
		VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:                       "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",
		VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:                       "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",
		VK_IMAGE_LAYOUT_PREINITIALIZED:                             "VK_IMAGE_LAYOUT_PREINITIALIZED",
		VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL",
		VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL",
		VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL:                   "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL",
		VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL:                    "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL",
		VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL:                 "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL",
		VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL:                  "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL",
		VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:                            "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR",
	}
)

func (x VkImageLayout) String() string {
	if s, ok := reverseVkImageLayout[x]; ok {
		return s
	}
	return fmt.Sprintf("VkImageLayout=%d", x)
}

type VkMemoryHeapFlagBits uint32

const (
	VK_MEMORY_HEAP_DEVICE_LOCAL_BIT   VkMemoryHeapFlagBits = (1 << 0)
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT VkMemoryHeapFlagBits = (1 << 1)
)

var (
	reverseVkMemoryHeapFlagBits map[VkMemoryHeapFlagBits]string = map[VkMemoryHeapFlagBits]string{
		VK_MEMORY_HEAP_DEVICE_LOCAL_BIT:   "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT",
		VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT",
	}
)

func (x VkMemoryHeapFlagBits) String() string {
	if s, ok := reverseVkMemoryHeapFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkMemoryHeapFlagBits=%d", x)
}

type VkImageAspectFlagBits uint32

const (
	VK_IMAGE_ASPECT_COLOR_BIT    VkImageAspectFlagBits = (1 << 0)
	VK_IMAGE_ASPECT_DEPTH_BIT    VkImageAspectFlagBits = (1 << 1)
	VK_IMAGE_ASPECT_STENCIL_BIT  VkImageAspectFlagBits = (1 << 2)
	VK_IMAGE_ASPECT_METADATA_BIT VkImageAspectFlagBits = (1 << 3)
	VK_IMAGE_ASPECT_PLANE_0_BIT  VkImageAspectFlagBits = (1 << 4)
	VK_IMAGE_ASPECT_PLANE_1_BIT  VkImageAspectFlagBits = (1 << 5)
	VK_IMAGE_ASPECT_PLANE_2_BIT  VkImageAspectFlagBits = (1 << 6)
)

var (
	reverseVkImageAspectFlagBits map[VkImageAspectFlagBits]string = map[VkImageAspectFlagBits]string{
		VK_IMAGE_ASPECT_COLOR_BIT:    "VK_IMAGE_ASPECT_COLOR_BIT",
		VK_IMAGE_ASPECT_DEPTH_BIT:    "VK_IMAGE_ASPECT_DEPTH_BIT",
		VK_IMAGE_ASPECT_STENCIL_BIT:  "VK_IMAGE_ASPECT_STENCIL_BIT",
		VK_IMAGE_ASPECT_METADATA_BIT: "VK_IMAGE_ASPECT_METADATA_BIT",
		VK_IMAGE_ASPECT_PLANE_0_BIT:  "VK_IMAGE_ASPECT_PLANE_0_BIT",
		VK_IMAGE_ASPECT_PLANE_1_BIT:  "VK_IMAGE_ASPECT_PLANE_1_BIT",
		VK_IMAGE_ASPECT_PLANE_2_BIT:  "VK_IMAGE_ASPECT_PLANE_2_BIT",
	}
)

func (x VkImageAspectFlagBits) String() string {
	if s, ok := reverseVkImageAspectFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkImageAspectFlagBits=%d", x)
}

type VkMemoryPropertyFlagBits uint32

const (
	VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT     VkMemoryPropertyFlagBits = (1 << 0)
	VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT     VkMemoryPropertyFlagBits = (1 << 1)
	VK_MEMORY_PROPERTY_HOST_COHERENT_BIT    VkMemoryPropertyFlagBits = (1 << 2)
	VK_MEMORY_PROPERTY_HOST_CACHED_BIT      VkMemoryPropertyFlagBits = (1 << 3)
	VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT VkMemoryPropertyFlagBits = (1 << 4)
	VK_MEMORY_PROPERTY_PROTECTED_BIT        VkMemoryPropertyFlagBits = (1 << 5)
)

var (
	reverseVkMemoryPropertyFlagBits map[VkMemoryPropertyFlagBits]string = map[VkMemoryPropertyFlagBits]string{
		VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT:     "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT",
		VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT:     "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT",
		VK_MEMORY_PROPERTY_HOST_COHERENT_BIT:    "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT",
		VK_MEMORY_PROPERTY_HOST_CACHED_BIT:      "VK_MEMORY_PROPERTY_HOST_CACHED_BIT",
		VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT",
		VK_MEMORY_PROPERTY_PROTECTED_BIT:        "VK_MEMORY_PROPERTY_PROTECTED_BIT",
	}
)

func (x VkMemoryPropertyFlagBits) String() string {
	if s, ok := reverseVkMemoryPropertyFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkMemoryPropertyFlagBits=%d", x)
}

type VkFramebufferCreateFlagBits uint32

const (
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT VkFramebufferCreateFlagBits = (1 << 0)
)

var (
	reverseVkFramebufferCreateFlagBits map[VkFramebufferCreateFlagBits]string = map[VkFramebufferCreateFlagBits]string{
		VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT: "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT",
	}
)

func (x VkFramebufferCreateFlagBits) String() string {
	if s, ok := reverseVkFramebufferCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkFramebufferCreateFlagBits=%d", x)
}

type VkCullModeFlagBits uint32

const (
	VK_CULL_MODE_NONE           VkCullModeFlagBits = 0
	VK_CULL_MODE_FRONT_BIT      VkCullModeFlagBits = (1 << 0)
	VK_CULL_MODE_BACK_BIT       VkCullModeFlagBits = (1 << 1)
	VK_CULL_MODE_FRONT_AND_BACK VkCullModeFlagBits = 0x00000003
)

var (
	reverseVkCullModeFlagBits map[VkCullModeFlagBits]string = map[VkCullModeFlagBits]string{
		VK_CULL_MODE_NONE:           "VK_CULL_MODE_NONE",
		VK_CULL_MODE_FRONT_BIT:      "VK_CULL_MODE_FRONT_BIT",
		VK_CULL_MODE_BACK_BIT:       "VK_CULL_MODE_BACK_BIT",
		VK_CULL_MODE_FRONT_AND_BACK: "VK_CULL_MODE_FRONT_AND_BACK",
	}
)

func (x VkCullModeFlagBits) String() string {
	if s, ok := reverseVkCullModeFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCullModeFlagBits=%d", x)
}

type VkDescriptorType uint32

const (
	VK_DESCRIPTOR_TYPE_SAMPLER                VkDescriptorType = 0
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER VkDescriptorType = 1
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE          VkDescriptorType = 2
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE          VkDescriptorType = 3
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER   VkDescriptorType = 4
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER   VkDescriptorType = 5
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER         VkDescriptorType = 6
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER         VkDescriptorType = 7
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC VkDescriptorType = 8
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC VkDescriptorType = 9
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT       VkDescriptorType = 10
)

var (
	reverseVkDescriptorType map[VkDescriptorType]string = map[VkDescriptorType]string{
		VK_DESCRIPTOR_TYPE_SAMPLER:                "VK_DESCRIPTOR_TYPE_SAMPLER",
		VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER",
		VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:          "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE",
		VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:          "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE",
		VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:   "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",
		VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:   "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER",
		VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:         "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER",
		VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:         "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER",
		VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC",
		VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC",
		VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:       "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT",
	}
)

func (x VkDescriptorType) String() string {
	if s, ok := reverseVkDescriptorType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDescriptorType=%d", x)
}

type VkFormat uint32

const (
	VK_FORMAT_UNDEFINED                                  VkFormat = 0
	VK_FORMAT_R4G4_UNORM_PACK8                           VkFormat = 1
	VK_FORMAT_R4G4B4A4_UNORM_PACK16                      VkFormat = 2
	VK_FORMAT_B4G4R4A4_UNORM_PACK16                      VkFormat = 3
	VK_FORMAT_R5G6B5_UNORM_PACK16                        VkFormat = 4
	VK_FORMAT_B5G6R5_UNORM_PACK16                        VkFormat = 5
	VK_FORMAT_R5G5B5A1_UNORM_PACK16                      VkFormat = 6
	VK_FORMAT_B5G5R5A1_UNORM_PACK16                      VkFormat = 7
	VK_FORMAT_A1R5G5B5_UNORM_PACK16                      VkFormat = 8
	VK_FORMAT_R8_UNORM                                   VkFormat = 9
	VK_FORMAT_R8_SNORM                                   VkFormat = 10
	VK_FORMAT_R8_USCALED                                 VkFormat = 11
	VK_FORMAT_R8_SSCALED                                 VkFormat = 12
	VK_FORMAT_R8_UINT                                    VkFormat = 13
	VK_FORMAT_R8_SINT                                    VkFormat = 14
	VK_FORMAT_R8_SRGB                                    VkFormat = 15
	VK_FORMAT_R8G8_UNORM                                 VkFormat = 16
	VK_FORMAT_R8G8_SNORM                                 VkFormat = 17
	VK_FORMAT_R8G8_USCALED                               VkFormat = 18
	VK_FORMAT_R8G8_SSCALED                               VkFormat = 19
	VK_FORMAT_R8G8_UINT                                  VkFormat = 20
	VK_FORMAT_R8G8_SINT                                  VkFormat = 21
	VK_FORMAT_R8G8_SRGB                                  VkFormat = 22
	VK_FORMAT_R8G8B8_UNORM                               VkFormat = 23
	VK_FORMAT_R8G8B8_SNORM                               VkFormat = 24
	VK_FORMAT_R8G8B8_USCALED                             VkFormat = 25
	VK_FORMAT_R8G8B8_SSCALED                             VkFormat = 26
	VK_FORMAT_R8G8B8_UINT                                VkFormat = 27
	VK_FORMAT_R8G8B8_SINT                                VkFormat = 28
	VK_FORMAT_R8G8B8_SRGB                                VkFormat = 29
	VK_FORMAT_B8G8R8_UNORM                               VkFormat = 30
	VK_FORMAT_B8G8R8_SNORM                               VkFormat = 31
	VK_FORMAT_B8G8R8_USCALED                             VkFormat = 32
	VK_FORMAT_B8G8R8_SSCALED                             VkFormat = 33
	VK_FORMAT_B8G8R8_UINT                                VkFormat = 34
	VK_FORMAT_B8G8R8_SINT                                VkFormat = 35
	VK_FORMAT_B8G8R8_SRGB                                VkFormat = 36
	VK_FORMAT_R8G8B8A8_UNORM                             VkFormat = 37
	VK_FORMAT_R8G8B8A8_SNORM                             VkFormat = 38
	VK_FORMAT_R8G8B8A8_USCALED                           VkFormat = 39
	VK_FORMAT_R8G8B8A8_SSCALED                           VkFormat = 40
	VK_FORMAT_R8G8B8A8_UINT                              VkFormat = 41
	VK_FORMAT_R8G8B8A8_SINT                              VkFormat = 42
	VK_FORMAT_R8G8B8A8_SRGB                              VkFormat = 43
	VK_FORMAT_B8G8R8A8_UNORM                             VkFormat = 44
	VK_FORMAT_B8G8R8A8_SNORM                             VkFormat = 45
	VK_FORMAT_B8G8R8A8_USCALED                           VkFormat = 46
	VK_FORMAT_B8G8R8A8_SSCALED                           VkFormat = 47
	VK_FORMAT_B8G8R8A8_UINT                              VkFormat = 48
	VK_FORMAT_B8G8R8A8_SINT                              VkFormat = 49
	VK_FORMAT_B8G8R8A8_SRGB                              VkFormat = 50
	VK_FORMAT_A8B8G8R8_UNORM_PACK32                      VkFormat = 51
	VK_FORMAT_A8B8G8R8_SNORM_PACK32                      VkFormat = 52
	VK_FORMAT_A8B8G8R8_USCALED_PACK32                    VkFormat = 53
	VK_FORMAT_A8B8G8R8_SSCALED_PACK32                    VkFormat = 54
	VK_FORMAT_A8B8G8R8_UINT_PACK32                       VkFormat = 55
	VK_FORMAT_A8B8G8R8_SINT_PACK32                       VkFormat = 56
	VK_FORMAT_A8B8G8R8_SRGB_PACK32                       VkFormat = 57
	VK_FORMAT_A2R10G10B10_UNORM_PACK32                   VkFormat = 58
	VK_FORMAT_A2R10G10B10_SNORM_PACK32                   VkFormat = 59
	VK_FORMAT_A2R10G10B10_USCALED_PACK32                 VkFormat = 60
	VK_FORMAT_A2R10G10B10_SSCALED_PACK32                 VkFormat = 61
	VK_FORMAT_A2R10G10B10_UINT_PACK32                    VkFormat = 62
	VK_FORMAT_A2R10G10B10_SINT_PACK32                    VkFormat = 63
	VK_FORMAT_A2B10G10R10_UNORM_PACK32                   VkFormat = 64
	VK_FORMAT_A2B10G10R10_SNORM_PACK32                   VkFormat = 65
	VK_FORMAT_A2B10G10R10_USCALED_PACK32                 VkFormat = 66
	VK_FORMAT_A2B10G10R10_SSCALED_PACK32                 VkFormat = 67
	VK_FORMAT_A2B10G10R10_UINT_PACK32                    VkFormat = 68
	VK_FORMAT_A2B10G10R10_SINT_PACK32                    VkFormat = 69
	VK_FORMAT_R16_UNORM                                  VkFormat = 70
	VK_FORMAT_R16_SNORM                                  VkFormat = 71
	VK_FORMAT_R16_USCALED                                VkFormat = 72
	VK_FORMAT_R16_SSCALED                                VkFormat = 73
	VK_FORMAT_R16_UINT                                   VkFormat = 74
	VK_FORMAT_R16_SINT                                   VkFormat = 75
	VK_FORMAT_R16_SFLOAT                                 VkFormat = 76
	VK_FORMAT_R16G16_UNORM                               VkFormat = 77
	VK_FORMAT_R16G16_SNORM                               VkFormat = 78
	VK_FORMAT_R16G16_USCALED                             VkFormat = 79
	VK_FORMAT_R16G16_SSCALED                             VkFormat = 80
	VK_FORMAT_R16G16_UINT                                VkFormat = 81
	VK_FORMAT_R16G16_SINT                                VkFormat = 82
	VK_FORMAT_R16G16_SFLOAT                              VkFormat = 83
	VK_FORMAT_R16G16B16_UNORM                            VkFormat = 84
	VK_FORMAT_R16G16B16_SNORM                            VkFormat = 85
	VK_FORMAT_R16G16B16_USCALED                          VkFormat = 86
	VK_FORMAT_R16G16B16_SSCALED                          VkFormat = 87
	VK_FORMAT_R16G16B16_UINT                             VkFormat = 88
	VK_FORMAT_R16G16B16_SINT                             VkFormat = 89
	VK_FORMAT_R16G16B16_SFLOAT                           VkFormat = 90
	VK_FORMAT_R16G16B16A16_UNORM                         VkFormat = 91
	VK_FORMAT_R16G16B16A16_SNORM                         VkFormat = 92
	VK_FORMAT_R16G16B16A16_USCALED                       VkFormat = 93
	VK_FORMAT_R16G16B16A16_SSCALED                       VkFormat = 94
	VK_FORMAT_R16G16B16A16_UINT                          VkFormat = 95
	VK_FORMAT_R16G16B16A16_SINT                          VkFormat = 96
	VK_FORMAT_R16G16B16A16_SFLOAT                        VkFormat = 97
	VK_FORMAT_R32_UINT                                   VkFormat = 98
	VK_FORMAT_R32_SINT                                   VkFormat = 99
	VK_FORMAT_R32_SFLOAT                                 VkFormat = 100
	VK_FORMAT_R32G32_UINT                                VkFormat = 101
	VK_FORMAT_R32G32_SINT                                VkFormat = 102
	VK_FORMAT_R32G32_SFLOAT                              VkFormat = 103
	VK_FORMAT_R32G32B32_UINT                             VkFormat = 104
	VK_FORMAT_R32G32B32_SINT                             VkFormat = 105
	VK_FORMAT_R32G32B32_SFLOAT                           VkFormat = 106
	VK_FORMAT_R32G32B32A32_UINT                          VkFormat = 107
	VK_FORMAT_R32G32B32A32_SINT                          VkFormat = 108
	VK_FORMAT_R32G32B32A32_SFLOAT                        VkFormat = 109
	VK_FORMAT_R64_UINT                                   VkFormat = 110
	VK_FORMAT_R64_SINT                                   VkFormat = 111
	VK_FORMAT_R64_SFLOAT                                 VkFormat = 112
	VK_FORMAT_R64G64_UINT                                VkFormat = 113
	VK_FORMAT_R64G64_SINT                                VkFormat = 114
	VK_FORMAT_R64G64_SFLOAT                              VkFormat = 115
	VK_FORMAT_R64G64B64_UINT                             VkFormat = 116
	VK_FORMAT_R64G64B64_SINT                             VkFormat = 117
	VK_FORMAT_R64G64B64_SFLOAT                           VkFormat = 118
	VK_FORMAT_R64G64B64A64_UINT                          VkFormat = 119
	VK_FORMAT_R64G64B64A64_SINT                          VkFormat = 120
	VK_FORMAT_R64G64B64A64_SFLOAT                        VkFormat = 121
	VK_FORMAT_B10G11R11_UFLOAT_PACK32                    VkFormat = 122
	VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                     VkFormat = 123
	VK_FORMAT_D16_UNORM                                  VkFormat = 124
	VK_FORMAT_X8_D24_UNORM_PACK32                        VkFormat = 125
	VK_FORMAT_D32_SFLOAT                                 VkFormat = 126
	VK_FORMAT_S8_UINT                                    VkFormat = 127
	VK_FORMAT_D16_UNORM_S8_UINT                          VkFormat = 128
	VK_FORMAT_D24_UNORM_S8_UINT                          VkFormat = 129
	VK_FORMAT_D32_SFLOAT_S8_UINT                         VkFormat = 130
	VK_FORMAT_BC1_RGB_UNORM_BLOCK                        VkFormat = 131
	VK_FORMAT_BC1_RGB_SRGB_BLOCK                         VkFormat = 132
	VK_FORMAT_BC1_RGBA_UNORM_BLOCK                       VkFormat = 133
	VK_FORMAT_BC1_RGBA_SRGB_BLOCK                        VkFormat = 134
	VK_FORMAT_BC2_UNORM_BLOCK                            VkFormat = 135
	VK_FORMAT_BC2_SRGB_BLOCK                             VkFormat = 136
	VK_FORMAT_BC3_UNORM_BLOCK                            VkFormat = 137
	VK_FORMAT_BC3_SRGB_BLOCK                             VkFormat = 138
	VK_FORMAT_BC4_UNORM_BLOCK                            VkFormat = 139
	VK_FORMAT_BC4_SNORM_BLOCK                            VkFormat = 140
	VK_FORMAT_BC5_UNORM_BLOCK                            VkFormat = 141
	VK_FORMAT_BC5_SNORM_BLOCK                            VkFormat = 142
	VK_FORMAT_BC6H_UFLOAT_BLOCK                          VkFormat = 143
	VK_FORMAT_BC6H_SFLOAT_BLOCK                          VkFormat = 144
	VK_FORMAT_BC7_UNORM_BLOCK                            VkFormat = 145
	VK_FORMAT_BC7_SRGB_BLOCK                             VkFormat = 146
	VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                    VkFormat = 147
	VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                     VkFormat = 148
	VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                  VkFormat = 149
	VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                   VkFormat = 150
	VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                  VkFormat = 151
	VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                   VkFormat = 152
	VK_FORMAT_EAC_R11_UNORM_BLOCK                        VkFormat = 153
	VK_FORMAT_EAC_R11_SNORM_BLOCK                        VkFormat = 154
	VK_FORMAT_EAC_R11G11_UNORM_BLOCK                     VkFormat = 155
	VK_FORMAT_EAC_R11G11_SNORM_BLOCK                     VkFormat = 156
	VK_FORMAT_ASTC_4x4_UNORM_BLOCK                       VkFormat = 157
	VK_FORMAT_ASTC_4x4_SRGB_BLOCK                        VkFormat = 158
	VK_FORMAT_ASTC_5x4_UNORM_BLOCK                       VkFormat = 159
	VK_FORMAT_ASTC_5x4_SRGB_BLOCK                        VkFormat = 160
	VK_FORMAT_ASTC_5x5_UNORM_BLOCK                       VkFormat = 161
	VK_FORMAT_ASTC_5x5_SRGB_BLOCK                        VkFormat = 162
	VK_FORMAT_ASTC_6x5_UNORM_BLOCK                       VkFormat = 163
	VK_FORMAT_ASTC_6x5_SRGB_BLOCK                        VkFormat = 164
	VK_FORMAT_ASTC_6x6_UNORM_BLOCK                       VkFormat = 165
	VK_FORMAT_ASTC_6x6_SRGB_BLOCK                        VkFormat = 166
	VK_FORMAT_ASTC_8x5_UNORM_BLOCK                       VkFormat = 167
	VK_FORMAT_ASTC_8x5_SRGB_BLOCK                        VkFormat = 168
	VK_FORMAT_ASTC_8x6_UNORM_BLOCK                       VkFormat = 169
	VK_FORMAT_ASTC_8x6_SRGB_BLOCK                        VkFormat = 170
	VK_FORMAT_ASTC_8x8_UNORM_BLOCK                       VkFormat = 171
	VK_FORMAT_ASTC_8x8_SRGB_BLOCK                        VkFormat = 172
	VK_FORMAT_ASTC_10x5_UNORM_BLOCK                      VkFormat = 173
	VK_FORMAT_ASTC_10x5_SRGB_BLOCK                       VkFormat = 174
	VK_FORMAT_ASTC_10x6_UNORM_BLOCK                      VkFormat = 175
	VK_FORMAT_ASTC_10x6_SRGB_BLOCK                       VkFormat = 176
	VK_FORMAT_ASTC_10x8_UNORM_BLOCK                      VkFormat = 177
	VK_FORMAT_ASTC_10x8_SRGB_BLOCK                       VkFormat = 178
	VK_FORMAT_ASTC_10x10_UNORM_BLOCK                     VkFormat = 179
	VK_FORMAT_ASTC_10x10_SRGB_BLOCK                      VkFormat = 180
	VK_FORMAT_ASTC_12x10_UNORM_BLOCK                     VkFormat = 181
	VK_FORMAT_ASTC_12x10_SRGB_BLOCK                      VkFormat = 182
	VK_FORMAT_ASTC_12x12_UNORM_BLOCK                     VkFormat = 183
	VK_FORMAT_ASTC_12x12_SRGB_BLOCK                      VkFormat = 184
	VK_FORMAT_G8B8G8R8_422_UNORM                         VkFormat = 1000156000
	VK_FORMAT_B8G8R8G8_422_UNORM                         VkFormat = 1000156001
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM                  VkFormat = 1000156002
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM                   VkFormat = 1000156003
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM                  VkFormat = 1000156004
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM                   VkFormat = 1000156005
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM                  VkFormat = 1000156006
	VK_FORMAT_R10X6_UNORM_PACK16                         VkFormat = 1000156007
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16                   VkFormat = 1000156008
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16         VkFormat = 1000156009
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16     VkFormat = 1000156010
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16     VkFormat = 1000156011
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 VkFormat = 1000156012
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16  VkFormat = 1000156013
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 VkFormat = 1000156014
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16  VkFormat = 1000156015
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 VkFormat = 1000156016
	VK_FORMAT_R12X4_UNORM_PACK16                         VkFormat = 1000156017
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16                   VkFormat = 1000156018
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16         VkFormat = 1000156019
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16     VkFormat = 1000156020
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16     VkFormat = 1000156021
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 VkFormat = 1000156022
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16  VkFormat = 1000156023
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 VkFormat = 1000156024
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16  VkFormat = 1000156025
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 VkFormat = 1000156026
	VK_FORMAT_G16B16G16R16_422_UNORM                     VkFormat = 1000156027
	VK_FORMAT_B16G16R16G16_422_UNORM                     VkFormat = 1000156028
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM               VkFormat = 1000156029
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM                VkFormat = 1000156030
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM               VkFormat = 1000156031
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM                VkFormat = 1000156032
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM               VkFormat = 1000156033
)

var (
	reverseVkFormat map[VkFormat]string = map[VkFormat]string{
		VK_FORMAT_UNDEFINED:                                  "VK_FORMAT_UNDEFINED",
		VK_FORMAT_R4G4_UNORM_PACK8:                           "VK_FORMAT_R4G4_UNORM_PACK8",
		VK_FORMAT_R4G4B4A4_UNORM_PACK16:                      "VK_FORMAT_R4G4B4A4_UNORM_PACK16",
		VK_FORMAT_B4G4R4A4_UNORM_PACK16:                      "VK_FORMAT_B4G4R4A4_UNORM_PACK16",
		VK_FORMAT_R5G6B5_UNORM_PACK16:                        "VK_FORMAT_R5G6B5_UNORM_PACK16",
		VK_FORMAT_B5G6R5_UNORM_PACK16:                        "VK_FORMAT_B5G6R5_UNORM_PACK16",
		VK_FORMAT_R5G5B5A1_UNORM_PACK16:                      "VK_FORMAT_R5G5B5A1_UNORM_PACK16",
		VK_FORMAT_B5G5R5A1_UNORM_PACK16:                      "VK_FORMAT_B5G5R5A1_UNORM_PACK16",
		VK_FORMAT_A1R5G5B5_UNORM_PACK16:                      "VK_FORMAT_A1R5G5B5_UNORM_PACK16",
		VK_FORMAT_R8_UNORM:                                   "VK_FORMAT_R8_UNORM",
		VK_FORMAT_R8_SNORM:                                   "VK_FORMAT_R8_SNORM",
		VK_FORMAT_R8_USCALED:                                 "VK_FORMAT_R8_USCALED",
		VK_FORMAT_R8_SSCALED:                                 "VK_FORMAT_R8_SSCALED",
		VK_FORMAT_R8_UINT:                                    "VK_FORMAT_R8_UINT",
		VK_FORMAT_R8_SINT:                                    "VK_FORMAT_R8_SINT",
		VK_FORMAT_R8_SRGB:                                    "VK_FORMAT_R8_SRGB",
		VK_FORMAT_R8G8_UNORM:                                 "VK_FORMAT_R8G8_UNORM",
		VK_FORMAT_R8G8_SNORM:                                 "VK_FORMAT_R8G8_SNORM",
		VK_FORMAT_R8G8_USCALED:                               "VK_FORMAT_R8G8_USCALED",
		VK_FORMAT_R8G8_SSCALED:                               "VK_FORMAT_R8G8_SSCALED",
		VK_FORMAT_R8G8_UINT:                                  "VK_FORMAT_R8G8_UINT",
		VK_FORMAT_R8G8_SINT:                                  "VK_FORMAT_R8G8_SINT",
		VK_FORMAT_R8G8_SRGB:                                  "VK_FORMAT_R8G8_SRGB",
		VK_FORMAT_R8G8B8_UNORM:                               "VK_FORMAT_R8G8B8_UNORM",
		VK_FORMAT_R8G8B8_SNORM:                               "VK_FORMAT_R8G8B8_SNORM",
		VK_FORMAT_R8G8B8_USCALED:                             "VK_FORMAT_R8G8B8_USCALED",
		VK_FORMAT_R8G8B8_SSCALED:                             "VK_FORMAT_R8G8B8_SSCALED",
		VK_FORMAT_R8G8B8_UINT:                                "VK_FORMAT_R8G8B8_UINT",
		VK_FORMAT_R8G8B8_SINT:                                "VK_FORMAT_R8G8B8_SINT",
		VK_FORMAT_R8G8B8_SRGB:                                "VK_FORMAT_R8G8B8_SRGB",
		VK_FORMAT_B8G8R8_UNORM:                               "VK_FORMAT_B8G8R8_UNORM",
		VK_FORMAT_B8G8R8_SNORM:                               "VK_FORMAT_B8G8R8_SNORM",
		VK_FORMAT_B8G8R8_USCALED:                             "VK_FORMAT_B8G8R8_USCALED",
		VK_FORMAT_B8G8R8_SSCALED:                             "VK_FORMAT_B8G8R8_SSCALED",
		VK_FORMAT_B8G8R8_UINT:                                "VK_FORMAT_B8G8R8_UINT",
		VK_FORMAT_B8G8R8_SINT:                                "VK_FORMAT_B8G8R8_SINT",
		VK_FORMAT_B8G8R8_SRGB:                                "VK_FORMAT_B8G8R8_SRGB",
		VK_FORMAT_R8G8B8A8_UNORM:                             "VK_FORMAT_R8G8B8A8_UNORM",
		VK_FORMAT_R8G8B8A8_SNORM:                             "VK_FORMAT_R8G8B8A8_SNORM",
		VK_FORMAT_R8G8B8A8_USCALED:                           "VK_FORMAT_R8G8B8A8_USCALED",
		VK_FORMAT_R8G8B8A8_SSCALED:                           "VK_FORMAT_R8G8B8A8_SSCALED",
		VK_FORMAT_R8G8B8A8_UINT:                              "VK_FORMAT_R8G8B8A8_UINT",
		VK_FORMAT_R8G8B8A8_SINT:                              "VK_FORMAT_R8G8B8A8_SINT",
		VK_FORMAT_R8G8B8A8_SRGB:                              "VK_FORMAT_R8G8B8A8_SRGB",
		VK_FORMAT_B8G8R8A8_UNORM:                             "VK_FORMAT_B8G8R8A8_UNORM",
		VK_FORMAT_B8G8R8A8_SNORM:                             "VK_FORMAT_B8G8R8A8_SNORM",
		VK_FORMAT_B8G8R8A8_USCALED:                           "VK_FORMAT_B8G8R8A8_USCALED",
		VK_FORMAT_B8G8R8A8_SSCALED:                           "VK_FORMAT_B8G8R8A8_SSCALED",
		VK_FORMAT_B8G8R8A8_UINT:                              "VK_FORMAT_B8G8R8A8_UINT",
		VK_FORMAT_B8G8R8A8_SINT:                              "VK_FORMAT_B8G8R8A8_SINT",
		VK_FORMAT_B8G8R8A8_SRGB:                              "VK_FORMAT_B8G8R8A8_SRGB",
		VK_FORMAT_A8B8G8R8_UNORM_PACK32:                      "VK_FORMAT_A8B8G8R8_UNORM_PACK32",
		VK_FORMAT_A8B8G8R8_SNORM_PACK32:                      "VK_FORMAT_A8B8G8R8_SNORM_PACK32",
		VK_FORMAT_A8B8G8R8_USCALED_PACK32:                    "VK_FORMAT_A8B8G8R8_USCALED_PACK32",
		VK_FORMAT_A8B8G8R8_SSCALED_PACK32:                    "VK_FORMAT_A8B8G8R8_SSCALED_PACK32",
		VK_FORMAT_A8B8G8R8_UINT_PACK32:                       "VK_FORMAT_A8B8G8R8_UINT_PACK32",
		VK_FORMAT_A8B8G8R8_SINT_PACK32:                       "VK_FORMAT_A8B8G8R8_SINT_PACK32",
		VK_FORMAT_A8B8G8R8_SRGB_PACK32:                       "VK_FORMAT_A8B8G8R8_SRGB_PACK32",
		VK_FORMAT_A2R10G10B10_UNORM_PACK32:                   "VK_FORMAT_A2R10G10B10_UNORM_PACK32",
		VK_FORMAT_A2R10G10B10_SNORM_PACK32:                   "VK_FORMAT_A2R10G10B10_SNORM_PACK32",
		VK_FORMAT_A2R10G10B10_USCALED_PACK32:                 "VK_FORMAT_A2R10G10B10_USCALED_PACK32",
		VK_FORMAT_A2R10G10B10_SSCALED_PACK32:                 "VK_FORMAT_A2R10G10B10_SSCALED_PACK32",
		VK_FORMAT_A2R10G10B10_UINT_PACK32:                    "VK_FORMAT_A2R10G10B10_UINT_PACK32",
		VK_FORMAT_A2R10G10B10_SINT_PACK32:                    "VK_FORMAT_A2R10G10B10_SINT_PACK32",
		VK_FORMAT_A2B10G10R10_UNORM_PACK32:                   "VK_FORMAT_A2B10G10R10_UNORM_PACK32",
		VK_FORMAT_A2B10G10R10_SNORM_PACK32:                   "VK_FORMAT_A2B10G10R10_SNORM_PACK32",
		VK_FORMAT_A2B10G10R10_USCALED_PACK32:                 "VK_FORMAT_A2B10G10R10_USCALED_PACK32",
		VK_FORMAT_A2B10G10R10_SSCALED_PACK32:                 "VK_FORMAT_A2B10G10R10_SSCALED_PACK32",
		VK_FORMAT_A2B10G10R10_UINT_PACK32:                    "VK_FORMAT_A2B10G10R10_UINT_PACK32",
		VK_FORMAT_A2B10G10R10_SINT_PACK32:                    "VK_FORMAT_A2B10G10R10_SINT_PACK32",
		VK_FORMAT_R16_UNORM:                                  "VK_FORMAT_R16_UNORM",
		VK_FORMAT_R16_SNORM:                                  "VK_FORMAT_R16_SNORM",
		VK_FORMAT_R16_USCALED:                                "VK_FORMAT_R16_USCALED",
		VK_FORMAT_R16_SSCALED:                                "VK_FORMAT_R16_SSCALED",
		VK_FORMAT_R16_UINT:                                   "VK_FORMAT_R16_UINT",
		VK_FORMAT_R16_SINT:                                   "VK_FORMAT_R16_SINT",
		VK_FORMAT_R16_SFLOAT:                                 "VK_FORMAT_R16_SFLOAT",
		VK_FORMAT_R16G16_UNORM:                               "VK_FORMAT_R16G16_UNORM",
		VK_FORMAT_R16G16_SNORM:                               "VK_FORMAT_R16G16_SNORM",
		VK_FORMAT_R16G16_USCALED:                             "VK_FORMAT_R16G16_USCALED",
		VK_FORMAT_R16G16_SSCALED:                             "VK_FORMAT_R16G16_SSCALED",
		VK_FORMAT_R16G16_UINT:                                "VK_FORMAT_R16G16_UINT",
		VK_FORMAT_R16G16_SINT:                                "VK_FORMAT_R16G16_SINT",
		VK_FORMAT_R16G16_SFLOAT:                              "VK_FORMAT_R16G16_SFLOAT",
		VK_FORMAT_R16G16B16_UNORM:                            "VK_FORMAT_R16G16B16_UNORM",
		VK_FORMAT_R16G16B16_SNORM:                            "VK_FORMAT_R16G16B16_SNORM",
		VK_FORMAT_R16G16B16_USCALED:                          "VK_FORMAT_R16G16B16_USCALED",
		VK_FORMAT_R16G16B16_SSCALED:                          "VK_FORMAT_R16G16B16_SSCALED",
		VK_FORMAT_R16G16B16_UINT:                             "VK_FORMAT_R16G16B16_UINT",
		VK_FORMAT_R16G16B16_SINT:                             "VK_FORMAT_R16G16B16_SINT",
		VK_FORMAT_R16G16B16_SFLOAT:                           "VK_FORMAT_R16G16B16_SFLOAT",
		VK_FORMAT_R16G16B16A16_UNORM:                         "VK_FORMAT_R16G16B16A16_UNORM",
		VK_FORMAT_R16G16B16A16_SNORM:                         "VK_FORMAT_R16G16B16A16_SNORM",
		VK_FORMAT_R16G16B16A16_USCALED:                       "VK_FORMAT_R16G16B16A16_USCALED",
		VK_FORMAT_R16G16B16A16_SSCALED:                       "VK_FORMAT_R16G16B16A16_SSCALED",
		VK_FORMAT_R16G16B16A16_UINT:                          "VK_FORMAT_R16G16B16A16_UINT",
		VK_FORMAT_R16G16B16A16_SINT:                          "VK_FORMAT_R16G16B16A16_SINT",
		VK_FORMAT_R16G16B16A16_SFLOAT:                        "VK_FORMAT_R16G16B16A16_SFLOAT",
		VK_FORMAT_R32_UINT:                                   "VK_FORMAT_R32_UINT",
		VK_FORMAT_R32_SINT:                                   "VK_FORMAT_R32_SINT",
		VK_FORMAT_R32_SFLOAT:                                 "VK_FORMAT_R32_SFLOAT",
		VK_FORMAT_R32G32_UINT:                                "VK_FORMAT_R32G32_UINT",
		VK_FORMAT_R32G32_SINT:                                "VK_FORMAT_R32G32_SINT",
		VK_FORMAT_R32G32_SFLOAT:                              "VK_FORMAT_R32G32_SFLOAT",
		VK_FORMAT_R32G32B32_UINT:                             "VK_FORMAT_R32G32B32_UINT",
		VK_FORMAT_R32G32B32_SINT:                             "VK_FORMAT_R32G32B32_SINT",
		VK_FORMAT_R32G32B32_SFLOAT:                           "VK_FORMAT_R32G32B32_SFLOAT",
		VK_FORMAT_R32G32B32A32_UINT:                          "VK_FORMAT_R32G32B32A32_UINT",
		VK_FORMAT_R32G32B32A32_SINT:                          "VK_FORMAT_R32G32B32A32_SINT",
		VK_FORMAT_R32G32B32A32_SFLOAT:                        "VK_FORMAT_R32G32B32A32_SFLOAT",
		VK_FORMAT_R64_UINT:                                   "VK_FORMAT_R64_UINT",
		VK_FORMAT_R64_SINT:                                   "VK_FORMAT_R64_SINT",
		VK_FORMAT_R64_SFLOAT:                                 "VK_FORMAT_R64_SFLOAT",
		VK_FORMAT_R64G64_UINT:                                "VK_FORMAT_R64G64_UINT",
		VK_FORMAT_R64G64_SINT:                                "VK_FORMAT_R64G64_SINT",
		VK_FORMAT_R64G64_SFLOAT:                              "VK_FORMAT_R64G64_SFLOAT",
		VK_FORMAT_R64G64B64_UINT:                             "VK_FORMAT_R64G64B64_UINT",
		VK_FORMAT_R64G64B64_SINT:                             "VK_FORMAT_R64G64B64_SINT",
		VK_FORMAT_R64G64B64_SFLOAT:                           "VK_FORMAT_R64G64B64_SFLOAT",
		VK_FORMAT_R64G64B64A64_UINT:                          "VK_FORMAT_R64G64B64A64_UINT",
		VK_FORMAT_R64G64B64A64_SINT:                          "VK_FORMAT_R64G64B64A64_SINT",
		VK_FORMAT_R64G64B64A64_SFLOAT:                        "VK_FORMAT_R64G64B64A64_SFLOAT",
		VK_FORMAT_B10G11R11_UFLOAT_PACK32:                    "VK_FORMAT_B10G11R11_UFLOAT_PACK32",
		VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:                     "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",
		VK_FORMAT_D16_UNORM:                                  "VK_FORMAT_D16_UNORM",
		VK_FORMAT_X8_D24_UNORM_PACK32:                        "VK_FORMAT_X8_D24_UNORM_PACK32",
		VK_FORMAT_D32_SFLOAT:                                 "VK_FORMAT_D32_SFLOAT",
		VK_FORMAT_S8_UINT:                                    "VK_FORMAT_S8_UINT",
		VK_FORMAT_D16_UNORM_S8_UINT:                          "VK_FORMAT_D16_UNORM_S8_UINT",
		VK_FORMAT_D24_UNORM_S8_UINT:                          "VK_FORMAT_D24_UNORM_S8_UINT",
		VK_FORMAT_D32_SFLOAT_S8_UINT:                         "VK_FORMAT_D32_SFLOAT_S8_UINT",
		VK_FORMAT_BC1_RGB_UNORM_BLOCK:                        "VK_FORMAT_BC1_RGB_UNORM_BLOCK",
		VK_FORMAT_BC1_RGB_SRGB_BLOCK:                         "VK_FORMAT_BC1_RGB_SRGB_BLOCK",
		VK_FORMAT_BC1_RGBA_UNORM_BLOCK:                       "VK_FORMAT_BC1_RGBA_UNORM_BLOCK",
		VK_FORMAT_BC1_RGBA_SRGB_BLOCK:                        "VK_FORMAT_BC1_RGBA_SRGB_BLOCK",
		VK_FORMAT_BC2_UNORM_BLOCK:                            "VK_FORMAT_BC2_UNORM_BLOCK",
		VK_FORMAT_BC2_SRGB_BLOCK:                             "VK_FORMAT_BC2_SRGB_BLOCK",
		VK_FORMAT_BC3_UNORM_BLOCK:                            "VK_FORMAT_BC3_UNORM_BLOCK",
		VK_FORMAT_BC3_SRGB_BLOCK:                             "VK_FORMAT_BC3_SRGB_BLOCK",
		VK_FORMAT_BC4_UNORM_BLOCK:                            "VK_FORMAT_BC4_UNORM_BLOCK",
		VK_FORMAT_BC4_SNORM_BLOCK:                            "VK_FORMAT_BC4_SNORM_BLOCK",
		VK_FORMAT_BC5_UNORM_BLOCK:                            "VK_FORMAT_BC5_UNORM_BLOCK",
		VK_FORMAT_BC5_SNORM_BLOCK:                            "VK_FORMAT_BC5_SNORM_BLOCK",
		VK_FORMAT_BC6H_UFLOAT_BLOCK:                          "VK_FORMAT_BC6H_UFLOAT_BLOCK",
		VK_FORMAT_BC6H_SFLOAT_BLOCK:                          "VK_FORMAT_BC6H_SFLOAT_BLOCK",
		VK_FORMAT_BC7_UNORM_BLOCK:                            "VK_FORMAT_BC7_UNORM_BLOCK",
		VK_FORMAT_BC7_SRGB_BLOCK:                             "VK_FORMAT_BC7_SRGB_BLOCK",
		VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:                    "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
		VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:                     "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:                  "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:                   "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:                  "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:                   "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
		VK_FORMAT_EAC_R11_UNORM_BLOCK:                        "VK_FORMAT_EAC_R11_UNORM_BLOCK",
		VK_FORMAT_EAC_R11_SNORM_BLOCK:                        "VK_FORMAT_EAC_R11_SNORM_BLOCK",
		VK_FORMAT_EAC_R11G11_UNORM_BLOCK:                     "VK_FORMAT_EAC_R11G11_UNORM_BLOCK",
		VK_FORMAT_EAC_R11G11_SNORM_BLOCK:                     "VK_FORMAT_EAC_R11G11_SNORM_BLOCK",
		VK_FORMAT_ASTC_4x4_UNORM_BLOCK:                       "VK_FORMAT_ASTC_4x4_UNORM_BLOCK",
		VK_FORMAT_ASTC_4x4_SRGB_BLOCK:                        "VK_FORMAT_ASTC_4x4_SRGB_BLOCK",
		VK_FORMAT_ASTC_5x4_UNORM_BLOCK:                       "VK_FORMAT_ASTC_5x4_UNORM_BLOCK",
		VK_FORMAT_ASTC_5x4_SRGB_BLOCK:                        "VK_FORMAT_ASTC_5x4_SRGB_BLOCK",
		VK_FORMAT_ASTC_5x5_UNORM_BLOCK:                       "VK_FORMAT_ASTC_5x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_5x5_SRGB_BLOCK:                        "VK_FORMAT_ASTC_5x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_6x5_UNORM_BLOCK:                       "VK_FORMAT_ASTC_6x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_6x5_SRGB_BLOCK:                        "VK_FORMAT_ASTC_6x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_6x6_UNORM_BLOCK:                       "VK_FORMAT_ASTC_6x6_UNORM_BLOCK",
		VK_FORMAT_ASTC_6x6_SRGB_BLOCK:                        "VK_FORMAT_ASTC_6x6_SRGB_BLOCK",
		VK_FORMAT_ASTC_8x5_UNORM_BLOCK:                       "VK_FORMAT_ASTC_8x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_8x5_SRGB_BLOCK:                        "VK_FORMAT_ASTC_8x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_8x6_UNORM_BLOCK:                       "VK_FORMAT_ASTC_8x6_UNORM_BLOCK",
		VK_FORMAT_ASTC_8x6_SRGB_BLOCK:                        "VK_FORMAT_ASTC_8x6_SRGB_BLOCK",
		VK_FORMAT_ASTC_8x8_UNORM_BLOCK:                       "VK_FORMAT_ASTC_8x8_UNORM_BLOCK",
		VK_FORMAT_ASTC_8x8_SRGB_BLOCK:                        "VK_FORMAT_ASTC_8x8_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x5_UNORM_BLOCK:                      "VK_FORMAT_ASTC_10x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x5_SRGB_BLOCK:                       "VK_FORMAT_ASTC_10x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x6_UNORM_BLOCK:                      "VK_FORMAT_ASTC_10x6_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x6_SRGB_BLOCK:                       "VK_FORMAT_ASTC_10x6_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x8_UNORM_BLOCK:                      "VK_FORMAT_ASTC_10x8_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x8_SRGB_BLOCK:                       "VK_FORMAT_ASTC_10x8_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x10_UNORM_BLOCK:                     "VK_FORMAT_ASTC_10x10_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x10_SRGB_BLOCK:                      "VK_FORMAT_ASTC_10x10_SRGB_BLOCK",
		VK_FORMAT_ASTC_12x10_UNORM_BLOCK:                     "VK_FORMAT_ASTC_12x10_UNORM_BLOCK",
		VK_FORMAT_ASTC_12x10_SRGB_BLOCK:                      "VK_FORMAT_ASTC_12x10_SRGB_BLOCK",
		VK_FORMAT_ASTC_12x12_UNORM_BLOCK:                     "VK_FORMAT_ASTC_12x12_UNORM_BLOCK",
		VK_FORMAT_ASTC_12x12_SRGB_BLOCK:                      "VK_FORMAT_ASTC_12x12_SRGB_BLOCK",
		VK_FORMAT_G8B8G8R8_422_UNORM:                         "VK_FORMAT_G8B8G8R8_422_UNORM",
		VK_FORMAT_B8G8R8G8_422_UNORM:                         "VK_FORMAT_B8G8R8G8_422_UNORM",
		VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM:                  "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM",
		VK_FORMAT_G8_B8R8_2PLANE_420_UNORM:                   "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM",
		VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM:                  "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM",
		VK_FORMAT_G8_B8R8_2PLANE_422_UNORM:                   "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM",
		VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM:                  "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM",
		VK_FORMAT_R10X6_UNORM_PACK16:                         "VK_FORMAT_R10X6_UNORM_PACK16",
		VK_FORMAT_R10X6G10X6_UNORM_2PACK16:                   "VK_FORMAT_R10X6G10X6_UNORM_2PACK16",
		VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:         "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",
		VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:     "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",
		VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:     "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16",
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:  "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16",
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16",
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:  "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16",
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16",
		VK_FORMAT_R12X4_UNORM_PACK16:                         "VK_FORMAT_R12X4_UNORM_PACK16",
		VK_FORMAT_R12X4G12X4_UNORM_2PACK16:                   "VK_FORMAT_R12X4G12X4_UNORM_2PACK16",
		VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:         "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",
		VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:     "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",
		VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:     "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16",
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:  "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16",
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16",
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:  "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16",
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16",
		VK_FORMAT_G16B16G16R16_422_UNORM:                     "VK_FORMAT_G16B16G16R16_422_UNORM",
		VK_FORMAT_B16G16R16G16_422_UNORM:                     "VK_FORMAT_B16G16R16G16_422_UNORM",
		VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM:               "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM",
		VK_FORMAT_G16_B16R16_2PLANE_420_UNORM:                "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM",
		VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM:               "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM",
		VK_FORMAT_G16_B16R16_2PLANE_422_UNORM:                "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM",
		VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM:               "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM",
	}
)

func (x VkFormat) String() string {
	if s, ok := reverseVkFormat[x]; ok {
		return s
	}
	return fmt.Sprintf("VkFormat=%d", x)
}

type VkComponentSwizzle uint32

const (
	VK_COMPONENT_SWIZZLE_IDENTITY VkComponentSwizzle = 0
	VK_COMPONENT_SWIZZLE_ZERO     VkComponentSwizzle = 1
	VK_COMPONENT_SWIZZLE_ONE      VkComponentSwizzle = 2
	VK_COMPONENT_SWIZZLE_R        VkComponentSwizzle = 3
	VK_COMPONENT_SWIZZLE_G        VkComponentSwizzle = 4
	VK_COMPONENT_SWIZZLE_B        VkComponentSwizzle = 5
	VK_COMPONENT_SWIZZLE_A        VkComponentSwizzle = 6
)

var (
	reverseVkComponentSwizzle map[VkComponentSwizzle]string = map[VkComponentSwizzle]string{
		VK_COMPONENT_SWIZZLE_IDENTITY: "VK_COMPONENT_SWIZZLE_IDENTITY",
		VK_COMPONENT_SWIZZLE_ZERO:     "VK_COMPONENT_SWIZZLE_ZERO",
		VK_COMPONENT_SWIZZLE_ONE:      "VK_COMPONENT_SWIZZLE_ONE",
		VK_COMPONENT_SWIZZLE_R:        "VK_COMPONENT_SWIZZLE_R",
		VK_COMPONENT_SWIZZLE_G:        "VK_COMPONENT_SWIZZLE_G",
		VK_COMPONENT_SWIZZLE_B:        "VK_COMPONENT_SWIZZLE_B",
		VK_COMPONENT_SWIZZLE_A:        "VK_COMPONENT_SWIZZLE_A",
	}
)

func (x VkComponentSwizzle) String() string {
	if s, ok := reverseVkComponentSwizzle[x]; ok {
		return s
	}
	return fmt.Sprintf("VkComponentSwizzle=%d", x)
}

type VkColorComponentFlagBits uint32

const (
	VK_COLOR_COMPONENT_R_BIT VkColorComponentFlagBits = (1 << 0)
	VK_COLOR_COMPONENT_G_BIT VkColorComponentFlagBits = (1 << 1)
	VK_COLOR_COMPONENT_B_BIT VkColorComponentFlagBits = (1 << 2)
	VK_COLOR_COMPONENT_A_BIT VkColorComponentFlagBits = (1 << 3)
)

var (
	reverseVkColorComponentFlagBits map[VkColorComponentFlagBits]string = map[VkColorComponentFlagBits]string{
		VK_COLOR_COMPONENT_R_BIT: "VK_COLOR_COMPONENT_R_BIT",
		VK_COLOR_COMPONENT_G_BIT: "VK_COLOR_COMPONENT_G_BIT",
		VK_COLOR_COMPONENT_B_BIT: "VK_COLOR_COMPONENT_B_BIT",
		VK_COLOR_COMPONENT_A_BIT: "VK_COLOR_COMPONENT_A_BIT",
	}
)

func (x VkColorComponentFlagBits) String() string {
	if s, ok := reverseVkColorComponentFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkColorComponentFlagBits=%d", x)
}

type VkBlendOp uint32

const (
	VK_BLEND_OP_ADD              VkBlendOp = 0
	VK_BLEND_OP_SUBTRACT         VkBlendOp = 1
	VK_BLEND_OP_REVERSE_SUBTRACT VkBlendOp = 2
	VK_BLEND_OP_MIN              VkBlendOp = 3
	VK_BLEND_OP_MAX              VkBlendOp = 4
)

var (
	reverseVkBlendOp map[VkBlendOp]string = map[VkBlendOp]string{
		VK_BLEND_OP_ADD:              "VK_BLEND_OP_ADD",
		VK_BLEND_OP_SUBTRACT:         "VK_BLEND_OP_SUBTRACT",
		VK_BLEND_OP_REVERSE_SUBTRACT: "VK_BLEND_OP_REVERSE_SUBTRACT",
		VK_BLEND_OP_MIN:              "VK_BLEND_OP_MIN",
		VK_BLEND_OP_MAX:              "VK_BLEND_OP_MAX",
	}
)

func (x VkBlendOp) String() string {
	if s, ok := reverseVkBlendOp[x]; ok {
		return s
	}
	return fmt.Sprintf("VkBlendOp=%d", x)
}

type VkBlendFactor uint32

const (
	VK_BLEND_FACTOR_ZERO                     VkBlendFactor = 0
	VK_BLEND_FACTOR_ONE                      VkBlendFactor = 1
	VK_BLEND_FACTOR_SRC_COLOR                VkBlendFactor = 2
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR      VkBlendFactor = 3
	VK_BLEND_FACTOR_DST_COLOR                VkBlendFactor = 4
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR      VkBlendFactor = 5
	VK_BLEND_FACTOR_SRC_ALPHA                VkBlendFactor = 6
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA      VkBlendFactor = 7
	VK_BLEND_FACTOR_DST_ALPHA                VkBlendFactor = 8
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA      VkBlendFactor = 9
	VK_BLEND_FACTOR_CONSTANT_COLOR           VkBlendFactor = 10
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR VkBlendFactor = 11
	VK_BLEND_FACTOR_CONSTANT_ALPHA           VkBlendFactor = 12
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA VkBlendFactor = 13
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE       VkBlendFactor = 14
	VK_BLEND_FACTOR_SRC1_COLOR               VkBlendFactor = 15
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR     VkBlendFactor = 16
	VK_BLEND_FACTOR_SRC1_ALPHA               VkBlendFactor = 17
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA     VkBlendFactor = 18
)

var (
	reverseVkBlendFactor map[VkBlendFactor]string = map[VkBlendFactor]string{
		VK_BLEND_FACTOR_ZERO:                     "VK_BLEND_FACTOR_ZERO",
		VK_BLEND_FACTOR_ONE:                      "VK_BLEND_FACTOR_ONE",
		VK_BLEND_FACTOR_SRC_COLOR:                "VK_BLEND_FACTOR_SRC_COLOR",
		VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR:      "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR",
		VK_BLEND_FACTOR_DST_COLOR:                "VK_BLEND_FACTOR_DST_COLOR",
		VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR:      "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR",
		VK_BLEND_FACTOR_SRC_ALPHA:                "VK_BLEND_FACTOR_SRC_ALPHA",
		VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA:      "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",
		VK_BLEND_FACTOR_DST_ALPHA:                "VK_BLEND_FACTOR_DST_ALPHA",
		VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA:      "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA",
		VK_BLEND_FACTOR_CONSTANT_COLOR:           "VK_BLEND_FACTOR_CONSTANT_COLOR",
		VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",
		VK_BLEND_FACTOR_CONSTANT_ALPHA:           "VK_BLEND_FACTOR_CONSTANT_ALPHA",
		VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",
		VK_BLEND_FACTOR_SRC_ALPHA_SATURATE:       "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE",
		VK_BLEND_FACTOR_SRC1_COLOR:               "VK_BLEND_FACTOR_SRC1_COLOR",
		VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR:     "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR",
		VK_BLEND_FACTOR_SRC1_ALPHA:               "VK_BLEND_FACTOR_SRC1_ALPHA",
		VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA:     "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA",
	}
)

func (x VkBlendFactor) String() string {
	if s, ok := reverseVkBlendFactor[x]; ok {
		return s
	}
	return fmt.Sprintf("VkBlendFactor=%d", x)
}

type VkPhysicalDeviceType uint32

const (
	VK_PHYSICAL_DEVICE_TYPE_OTHER          VkPhysicalDeviceType = 0
	VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU VkPhysicalDeviceType = 1
	VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   VkPhysicalDeviceType = 2
	VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    VkPhysicalDeviceType = 3
	VK_PHYSICAL_DEVICE_TYPE_CPU            VkPhysicalDeviceType = 4
)

var (
	reverseVkPhysicalDeviceType map[VkPhysicalDeviceType]string = map[VkPhysicalDeviceType]string{
		VK_PHYSICAL_DEVICE_TYPE_OTHER:          "VK_PHYSICAL_DEVICE_TYPE_OTHER",
		VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU",
		VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU:   "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU",
		VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU:    "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU",
		VK_PHYSICAL_DEVICE_TYPE_CPU:            "VK_PHYSICAL_DEVICE_TYPE_CPU",
	}
)

func (x VkPhysicalDeviceType) String() string {
	if s, ok := reverseVkPhysicalDeviceType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPhysicalDeviceType=%d", x)
}

type VkSamplerCreateFlagBits uint32

type VkQueueFlagBits uint32

const (
	VK_QUEUE_GRAPHICS_BIT       VkQueueFlagBits = (1 << 0)
	VK_QUEUE_COMPUTE_BIT        VkQueueFlagBits = (1 << 1)
	VK_QUEUE_TRANSFER_BIT       VkQueueFlagBits = (1 << 2)
	VK_QUEUE_SPARSE_BINDING_BIT VkQueueFlagBits = (1 << 3)
	VK_QUEUE_PROTECTED_BIT      VkQueueFlagBits = (1 << 4)
)

var (
	reverseVkQueueFlagBits map[VkQueueFlagBits]string = map[VkQueueFlagBits]string{
		VK_QUEUE_GRAPHICS_BIT:       "VK_QUEUE_GRAPHICS_BIT",
		VK_QUEUE_COMPUTE_BIT:        "VK_QUEUE_COMPUTE_BIT",
		VK_QUEUE_TRANSFER_BIT:       "VK_QUEUE_TRANSFER_BIT",
		VK_QUEUE_SPARSE_BINDING_BIT: "VK_QUEUE_SPARSE_BINDING_BIT",
		VK_QUEUE_PROTECTED_BIT:      "VK_QUEUE_PROTECTED_BIT",
	}
)

func (x VkQueueFlagBits) String() string {
	if s, ok := reverseVkQueueFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkQueueFlagBits=%d", x)
}

type VkSamplerAddressMode uint32

const (
	VK_SAMPLER_ADDRESS_MODE_REPEAT               VkSamplerAddressMode = 0
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT      VkSamplerAddressMode = 1
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE        VkSamplerAddressMode = 2
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER      VkSamplerAddressMode = 3
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE VkSamplerAddressMode = 4
)

var (
	reverseVkSamplerAddressMode map[VkSamplerAddressMode]string = map[VkSamplerAddressMode]string{
		VK_SAMPLER_ADDRESS_MODE_REPEAT:               "VK_SAMPLER_ADDRESS_MODE_REPEAT",
		VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:      "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT",
		VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:        "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE",
		VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:      "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER",
		VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
	}
)

func (x VkSamplerAddressMode) String() string {
	if s, ok := reverseVkSamplerAddressMode[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSamplerAddressMode=%d", x)
}

type VkSampleCountFlagBits uint32

const (
	VK_SAMPLE_COUNT_1_BIT  VkSampleCountFlagBits = (1 << 0)
	VK_SAMPLE_COUNT_2_BIT  VkSampleCountFlagBits = (1 << 1)
	VK_SAMPLE_COUNT_4_BIT  VkSampleCountFlagBits = (1 << 2)
	VK_SAMPLE_COUNT_8_BIT  VkSampleCountFlagBits = (1 << 3)
	VK_SAMPLE_COUNT_16_BIT VkSampleCountFlagBits = (1 << 4)
	VK_SAMPLE_COUNT_32_BIT VkSampleCountFlagBits = (1 << 5)
	VK_SAMPLE_COUNT_64_BIT VkSampleCountFlagBits = (1 << 6)
)

var (
	reverseVkSampleCountFlagBits map[VkSampleCountFlagBits]string = map[VkSampleCountFlagBits]string{
		VK_SAMPLE_COUNT_1_BIT:  "VK_SAMPLE_COUNT_1_BIT",
		VK_SAMPLE_COUNT_2_BIT:  "VK_SAMPLE_COUNT_2_BIT",
		VK_SAMPLE_COUNT_4_BIT:  "VK_SAMPLE_COUNT_4_BIT",
		VK_SAMPLE_COUNT_8_BIT:  "VK_SAMPLE_COUNT_8_BIT",
		VK_SAMPLE_COUNT_16_BIT: "VK_SAMPLE_COUNT_16_BIT",
		VK_SAMPLE_COUNT_32_BIT: "VK_SAMPLE_COUNT_32_BIT",
		VK_SAMPLE_COUNT_64_BIT: "VK_SAMPLE_COUNT_64_BIT",
	}
)

func (x VkSampleCountFlagBits) String() string {
	if s, ok := reverseVkSampleCountFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSampleCountFlagBits=%d", x)
}

type VkPolygonMode uint32

const (
	VK_POLYGON_MODE_FILL  VkPolygonMode = 0
	VK_POLYGON_MODE_LINE  VkPolygonMode = 1
	VK_POLYGON_MODE_POINT VkPolygonMode = 2
)

var (
	reverseVkPolygonMode map[VkPolygonMode]string = map[VkPolygonMode]string{
		VK_POLYGON_MODE_FILL:  "VK_POLYGON_MODE_FILL",
		VK_POLYGON_MODE_LINE:  "VK_POLYGON_MODE_LINE",
		VK_POLYGON_MODE_POINT: "VK_POLYGON_MODE_POINT",
	}
)

func (x VkPolygonMode) String() string {
	if s, ok := reverseVkPolygonMode[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPolygonMode=%d", x)
}

type VkSystemAllocationScope uint32

const (
	VK_SYSTEM_ALLOCATION_SCOPE_COMMAND  VkSystemAllocationScope = 0
	VK_SYSTEM_ALLOCATION_SCOPE_OBJECT   VkSystemAllocationScope = 1
	VK_SYSTEM_ALLOCATION_SCOPE_CACHE    VkSystemAllocationScope = 2
	VK_SYSTEM_ALLOCATION_SCOPE_DEVICE   VkSystemAllocationScope = 3
	VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE VkSystemAllocationScope = 4
)

var (
	reverseVkSystemAllocationScope map[VkSystemAllocationScope]string = map[VkSystemAllocationScope]string{
		VK_SYSTEM_ALLOCATION_SCOPE_COMMAND:  "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND",
		VK_SYSTEM_ALLOCATION_SCOPE_OBJECT:   "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT",
		VK_SYSTEM_ALLOCATION_SCOPE_CACHE:    "VK_SYSTEM_ALLOCATION_SCOPE_CACHE",
		VK_SYSTEM_ALLOCATION_SCOPE_DEVICE:   "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE",
		VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE",
	}
)

func (x VkSystemAllocationScope) String() string {
	if s, ok := reverseVkSystemAllocationScope[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSystemAllocationScope=%d", x)
}

type VkCommandBufferResetFlagBits uint32

const (
	VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT VkCommandBufferResetFlagBits = (1 << 0)
)

var (
	reverseVkCommandBufferResetFlagBits map[VkCommandBufferResetFlagBits]string = map[VkCommandBufferResetFlagBits]string{
		VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT",
	}
)

func (x VkCommandBufferResetFlagBits) String() string {
	if s, ok := reverseVkCommandBufferResetFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCommandBufferResetFlagBits=%d", x)
}

type VkCommandBufferLevel uint32

const (
	VK_COMMAND_BUFFER_LEVEL_PRIMARY   VkCommandBufferLevel = 0
	VK_COMMAND_BUFFER_LEVEL_SECONDARY VkCommandBufferLevel = 1
)

var (
	reverseVkCommandBufferLevel map[VkCommandBufferLevel]string = map[VkCommandBufferLevel]string{
		VK_COMMAND_BUFFER_LEVEL_PRIMARY:   "VK_COMMAND_BUFFER_LEVEL_PRIMARY",
		VK_COMMAND_BUFFER_LEVEL_SECONDARY: "VK_COMMAND_BUFFER_LEVEL_SECONDARY",
	}
)

func (x VkCommandBufferLevel) String() string {
	if s, ok := reverseVkCommandBufferLevel[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCommandBufferLevel=%d", x)
}

type VkPrimitiveTopology uint32

const (
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST                    VkPrimitiveTopology = 0
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST                     VkPrimitiveTopology = 1
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP                    VkPrimitiveTopology = 2
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST                 VkPrimitiveTopology = 3
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP                VkPrimitiveTopology = 4
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN                  VkPrimitiveTopology = 5
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY      VkPrimitiveTopology = 6
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY     VkPrimitiveTopology = 7
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY  VkPrimitiveTopology = 8
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY VkPrimitiveTopology = 9
	VK_PRIMITIVE_TOPOLOGY_PATCH_LIST                    VkPrimitiveTopology = 10
)

var (
	reverseVkPrimitiveTopology map[VkPrimitiveTopology]string = map[VkPrimitiveTopology]string{
		VK_PRIMITIVE_TOPOLOGY_POINT_LIST:                    "VK_PRIMITIVE_TOPOLOGY_POINT_LIST",
		VK_PRIMITIVE_TOPOLOGY_LINE_LIST:                     "VK_PRIMITIVE_TOPOLOGY_LINE_LIST",
		VK_PRIMITIVE_TOPOLOGY_LINE_STRIP:                    "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP",
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST:                 "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST",
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:                "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP",
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN:                  "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN",
		VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY:      "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY",
		VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY:     "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY",
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:  "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY",
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY",
		VK_PRIMITIVE_TOPOLOGY_PATCH_LIST:                    "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST",
	}
)

func (x VkPrimitiveTopology) String() string {
	if s, ok := reverseVkPrimitiveTopology[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPrimitiveTopology=%d", x)
}

type VkShaderStageFlagBits uint32

const (
	VK_SHADER_STAGE_VERTEX_BIT                  VkShaderStageFlagBits = (1 << 0)
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT    VkShaderStageFlagBits = (1 << 1)
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT VkShaderStageFlagBits = (1 << 2)
	VK_SHADER_STAGE_GEOMETRY_BIT                VkShaderStageFlagBits = (1 << 3)
	VK_SHADER_STAGE_FRAGMENT_BIT                VkShaderStageFlagBits = (1 << 4)
	VK_SHADER_STAGE_COMPUTE_BIT                 VkShaderStageFlagBits = (1 << 5)
	VK_SHADER_STAGE_ALL_GRAPHICS                VkShaderStageFlagBits = 0x0000001F
	VK_SHADER_STAGE_ALL                         VkShaderStageFlagBits = 0x7FFFFFFF
)

var (
	reverseVkShaderStageFlagBits map[VkShaderStageFlagBits]string = map[VkShaderStageFlagBits]string{
		VK_SHADER_STAGE_VERTEX_BIT:                  "VK_SHADER_STAGE_VERTEX_BIT",
		VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT:    "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT",
		VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT",
		VK_SHADER_STAGE_GEOMETRY_BIT:                "VK_SHADER_STAGE_GEOMETRY_BIT",
		VK_SHADER_STAGE_FRAGMENT_BIT:                "VK_SHADER_STAGE_FRAGMENT_BIT",
		VK_SHADER_STAGE_COMPUTE_BIT:                 "VK_SHADER_STAGE_COMPUTE_BIT",
		VK_SHADER_STAGE_ALL_GRAPHICS:                "VK_SHADER_STAGE_ALL_GRAPHICS",
		VK_SHADER_STAGE_ALL:                         "VK_SHADER_STAGE_ALL",
	}
)

func (x VkShaderStageFlagBits) String() string {
	if s, ok := reverseVkShaderStageFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkShaderStageFlagBits=%d", x)
}

type VkRenderPassCreateFlagBits uint32

type VkEventCreateFlagBits uint32

type VkImageViewCreateFlagBits uint32

type VkDescriptorPoolCreateFlagBits uint32

const (
	VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT VkDescriptorPoolCreateFlagBits = (1 << 0)
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT   VkDescriptorPoolCreateFlagBits = (1 << 1)
)

var (
	reverseVkDescriptorPoolCreateFlagBits map[VkDescriptorPoolCreateFlagBits]string = map[VkDescriptorPoolCreateFlagBits]string{
		VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT",
		VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT:   "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT",
	}
)

func (x VkDescriptorPoolCreateFlagBits) String() string {
	if s, ok := reverseVkDescriptorPoolCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDescriptorPoolCreateFlagBits=%d", x)
}

type VkQueryPipelineStatisticFlagBits uint32

const (
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT                    VkQueryPipelineStatisticFlagBits = (1 << 0)
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT                  VkQueryPipelineStatisticFlagBits = (1 << 1)
	VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT                  VkQueryPipelineStatisticFlagBits = (1 << 2)
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT                VkQueryPipelineStatisticFlagBits = (1 << 3)
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT                 VkQueryPipelineStatisticFlagBits = (1 << 4)
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT                       VkQueryPipelineStatisticFlagBits = (1 << 5)
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT                        VkQueryPipelineStatisticFlagBits = (1 << 6)
	VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT                VkQueryPipelineStatisticFlagBits = (1 << 7)
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT        VkQueryPipelineStatisticFlagBits = (1 << 8)
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT VkQueryPipelineStatisticFlagBits = (1 << 9)
	VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT                 VkQueryPipelineStatisticFlagBits = (1 << 10)
)

var (
	reverseVkQueryPipelineStatisticFlagBits map[VkQueryPipelineStatisticFlagBits]string = map[VkQueryPipelineStatisticFlagBits]string{
		VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT:                    "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT",
		VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT:                  "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT",
		VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT:                  "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT",
		VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT:                "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT",
		VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT:                 "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT",
		VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT:                       "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT",
		VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT:                        "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT",
		VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT:                "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT",
		VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT:        "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT",
		VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT",
		VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT:                 "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT",
	}
)

func (x VkQueryPipelineStatisticFlagBits) String() string {
	if s, ok := reverseVkQueryPipelineStatisticFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkQueryPipelineStatisticFlagBits=%d", x)
}

type VkPipelineCacheCreateFlagBits uint32

type VkCompareOp uint32

const (
	VK_COMPARE_OP_NEVER            VkCompareOp = 0
	VK_COMPARE_OP_LESS             VkCompareOp = 1
	VK_COMPARE_OP_EQUAL            VkCompareOp = 2
	VK_COMPARE_OP_LESS_OR_EQUAL    VkCompareOp = 3
	VK_COMPARE_OP_GREATER          VkCompareOp = 4
	VK_COMPARE_OP_NOT_EQUAL        VkCompareOp = 5
	VK_COMPARE_OP_GREATER_OR_EQUAL VkCompareOp = 6
	VK_COMPARE_OP_ALWAYS           VkCompareOp = 7
)

var (
	reverseVkCompareOp map[VkCompareOp]string = map[VkCompareOp]string{
		VK_COMPARE_OP_NEVER:            "VK_COMPARE_OP_NEVER",
		VK_COMPARE_OP_LESS:             "VK_COMPARE_OP_LESS",
		VK_COMPARE_OP_EQUAL:            "VK_COMPARE_OP_EQUAL",
		VK_COMPARE_OP_LESS_OR_EQUAL:    "VK_COMPARE_OP_LESS_OR_EQUAL",
		VK_COMPARE_OP_GREATER:          "VK_COMPARE_OP_GREATER",
		VK_COMPARE_OP_NOT_EQUAL:        "VK_COMPARE_OP_NOT_EQUAL",
		VK_COMPARE_OP_GREATER_OR_EQUAL: "VK_COMPARE_OP_GREATER_OR_EQUAL",
		VK_COMPARE_OP_ALWAYS:           "VK_COMPARE_OP_ALWAYS",
	}
)

func (x VkCompareOp) String() string {
	if s, ok := reverseVkCompareOp[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCompareOp=%d", x)
}

type VkResult int32

const (
	VK_SUCCESS                              VkResult = 0
	VK_NOT_READY                            VkResult = 1
	VK_TIMEOUT                              VkResult = 2
	VK_EVENT_SET                            VkResult = 3
	VK_EVENT_RESET                          VkResult = 4
	VK_INCOMPLETE                           VkResult = 5
	VK_ERROR_OUT_OF_HOST_MEMORY             VkResult = -1
	VK_ERROR_OUT_OF_DEVICE_MEMORY           VkResult = -2
	VK_ERROR_INITIALIZATION_FAILED          VkResult = -3
	VK_ERROR_DEVICE_LOST                    VkResult = -4
	VK_ERROR_MEMORY_MAP_FAILED              VkResult = -5
	VK_ERROR_LAYER_NOT_PRESENT              VkResult = -6
	VK_ERROR_EXTENSION_NOT_PRESENT          VkResult = -7
	VK_ERROR_FEATURE_NOT_PRESENT            VkResult = -8
	VK_ERROR_INCOMPATIBLE_DRIVER            VkResult = -9
	VK_ERROR_TOO_MANY_OBJECTS               VkResult = -10
	VK_ERROR_FORMAT_NOT_SUPPORTED           VkResult = -11
	VK_ERROR_FRAGMENTED_POOL                VkResult = -12
	VK_ERROR_UNKNOWN                        VkResult = -13
	VK_ERROR_OUT_OF_POOL_MEMORY             VkResult = 1000069000
	VK_ERROR_INVALID_EXTERNAL_HANDLE        VkResult = 1000072003
	VK_ERROR_FRAGMENTATION                  VkResult = 1000161000
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS VkResult = 1000257000
	VK_ERROR_SURFACE_LOST_KHR               VkResult = 1000000000
	VK_ERROR_NATIVE_WINDOW_IN_USE_KHR       VkResult = 1000000001
	VK_SUBOPTIMAL_KHR                       VkResult = 1000001003
	VK_ERROR_OUT_OF_DATE_KHR                VkResult = 1000001004
	VK_ERROR_INCOMPATIBLE_DISPLAY_KHR       VkResult = 1000003001
)

var (
	reverseVkResult map[VkResult]string = map[VkResult]string{
		VK_SUCCESS:                              "VK_SUCCESS",
		VK_NOT_READY:                            "VK_NOT_READY",
		VK_TIMEOUT:                              "VK_TIMEOUT",
		VK_EVENT_SET:                            "VK_EVENT_SET",
		VK_EVENT_RESET:                          "VK_EVENT_RESET",
		VK_INCOMPLETE:                           "VK_INCOMPLETE",
		VK_ERROR_OUT_OF_HOST_MEMORY:             "VK_ERROR_OUT_OF_HOST_MEMORY",
		VK_ERROR_OUT_OF_DEVICE_MEMORY:           "VK_ERROR_OUT_OF_DEVICE_MEMORY",
		VK_ERROR_INITIALIZATION_FAILED:          "VK_ERROR_INITIALIZATION_FAILED",
		VK_ERROR_DEVICE_LOST:                    "VK_ERROR_DEVICE_LOST",
		VK_ERROR_MEMORY_MAP_FAILED:              "VK_ERROR_MEMORY_MAP_FAILED",
		VK_ERROR_LAYER_NOT_PRESENT:              "VK_ERROR_LAYER_NOT_PRESENT",
		VK_ERROR_EXTENSION_NOT_PRESENT:          "VK_ERROR_EXTENSION_NOT_PRESENT",
		VK_ERROR_FEATURE_NOT_PRESENT:            "VK_ERROR_FEATURE_NOT_PRESENT",
		VK_ERROR_INCOMPATIBLE_DRIVER:            "VK_ERROR_INCOMPATIBLE_DRIVER",
		VK_ERROR_TOO_MANY_OBJECTS:               "VK_ERROR_TOO_MANY_OBJECTS",
		VK_ERROR_FORMAT_NOT_SUPPORTED:           "VK_ERROR_FORMAT_NOT_SUPPORTED",
		VK_ERROR_FRAGMENTED_POOL:                "VK_ERROR_FRAGMENTED_POOL",
		VK_ERROR_UNKNOWN:                        "VK_ERROR_UNKNOWN",
		VK_ERROR_OUT_OF_POOL_MEMORY:             "VK_ERROR_OUT_OF_POOL_MEMORY",
		VK_ERROR_INVALID_EXTERNAL_HANDLE:        "VK_ERROR_INVALID_EXTERNAL_HANDLE",
		VK_ERROR_FRAGMENTATION:                  "VK_ERROR_FRAGMENTATION",
		VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS",
		VK_ERROR_SURFACE_LOST_KHR:               "VK_ERROR_SURFACE_LOST_KHR",
		VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:       "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
		VK_SUBOPTIMAL_KHR:                       "VK_SUBOPTIMAL_KHR",
		VK_ERROR_OUT_OF_DATE_KHR:                "VK_ERROR_OUT_OF_DATE_KHR",
		VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:       "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR",
	}
)

func (x VkResult) String() string {
	if s, ok := reverseVkResult[x]; ok {
		return s
	}
	return fmt.Sprintf("VkResult=%d", x)
}

type VkStencilOp uint32

const (
	VK_STENCIL_OP_KEEP                VkStencilOp = 0
	VK_STENCIL_OP_ZERO                VkStencilOp = 1
	VK_STENCIL_OP_REPLACE             VkStencilOp = 2
	VK_STENCIL_OP_INCREMENT_AND_CLAMP VkStencilOp = 3
	VK_STENCIL_OP_DECREMENT_AND_CLAMP VkStencilOp = 4
	VK_STENCIL_OP_INVERT              VkStencilOp = 5
	VK_STENCIL_OP_INCREMENT_AND_WRAP  VkStencilOp = 6
	VK_STENCIL_OP_DECREMENT_AND_WRAP  VkStencilOp = 7
)

var (
	reverseVkStencilOp map[VkStencilOp]string = map[VkStencilOp]string{
		VK_STENCIL_OP_KEEP:                "VK_STENCIL_OP_KEEP",
		VK_STENCIL_OP_ZERO:                "VK_STENCIL_OP_ZERO",
		VK_STENCIL_OP_REPLACE:             "VK_STENCIL_OP_REPLACE",
		VK_STENCIL_OP_INCREMENT_AND_CLAMP: "VK_STENCIL_OP_INCREMENT_AND_CLAMP",
		VK_STENCIL_OP_DECREMENT_AND_CLAMP: "VK_STENCIL_OP_DECREMENT_AND_CLAMP",
		VK_STENCIL_OP_INVERT:              "VK_STENCIL_OP_INVERT",
		VK_STENCIL_OP_INCREMENT_AND_WRAP:  "VK_STENCIL_OP_INCREMENT_AND_WRAP",
		VK_STENCIL_OP_DECREMENT_AND_WRAP:  "VK_STENCIL_OP_DECREMENT_AND_WRAP",
	}
)

func (x VkStencilOp) String() string {
	if s, ok := reverseVkStencilOp[x]; ok {
		return s
	}
	return fmt.Sprintf("VkStencilOp=%d", x)
}

type VkSamplerMipmapMode uint32

const (
	VK_SAMPLER_MIPMAP_MODE_NEAREST VkSamplerMipmapMode = 0
	VK_SAMPLER_MIPMAP_MODE_LINEAR  VkSamplerMipmapMode = 1
)

var (
	reverseVkSamplerMipmapMode map[VkSamplerMipmapMode]string = map[VkSamplerMipmapMode]string{
		VK_SAMPLER_MIPMAP_MODE_NEAREST: "VK_SAMPLER_MIPMAP_MODE_NEAREST",
		VK_SAMPLER_MIPMAP_MODE_LINEAR:  "VK_SAMPLER_MIPMAP_MODE_LINEAR",
	}
)

func (x VkSamplerMipmapMode) String() string {
	if s, ok := reverseVkSamplerMipmapMode[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSamplerMipmapMode=%d", x)
}

type VkCommandPoolResetFlagBits uint32

const (
	VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT VkCommandPoolResetFlagBits = (1 << 0)
)

var (
	reverseVkCommandPoolResetFlagBits map[VkCommandPoolResetFlagBits]string = map[VkCommandPoolResetFlagBits]string{
		VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT",
	}
)

func (x VkCommandPoolResetFlagBits) String() string {
	if s, ok := reverseVkCommandPoolResetFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCommandPoolResetFlagBits=%d", x)
}

type VkVertexInputRate uint32

const (
	VK_VERTEX_INPUT_RATE_VERTEX   VkVertexInputRate = 0
	VK_VERTEX_INPUT_RATE_INSTANCE VkVertexInputRate = 1
)

var (
	reverseVkVertexInputRate map[VkVertexInputRate]string = map[VkVertexInputRate]string{
		VK_VERTEX_INPUT_RATE_VERTEX:   "VK_VERTEX_INPUT_RATE_VERTEX",
		VK_VERTEX_INPUT_RATE_INSTANCE: "VK_VERTEX_INPUT_RATE_INSTANCE",
	}
)

func (x VkVertexInputRate) String() string {
	if s, ok := reverseVkVertexInputRate[x]; ok {
		return s
	}
	return fmt.Sprintf("VkVertexInputRate=%d", x)
}

type VkSubpassDescriptionFlagBits uint32

type VkCommandPoolCreateFlagBits uint32

const (
	VK_COMMAND_POOL_CREATE_TRANSIENT_BIT            VkCommandPoolCreateFlagBits = (1 << 0)
	VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT VkCommandPoolCreateFlagBits = (1 << 1)
	VK_COMMAND_POOL_CREATE_PROTECTED_BIT            VkCommandPoolCreateFlagBits = (1 << 2)
)

var (
	reverseVkCommandPoolCreateFlagBits map[VkCommandPoolCreateFlagBits]string = map[VkCommandPoolCreateFlagBits]string{
		VK_COMMAND_POOL_CREATE_TRANSIENT_BIT:            "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT",
		VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT",
		VK_COMMAND_POOL_CREATE_PROTECTED_BIT:            "VK_COMMAND_POOL_CREATE_PROTECTED_BIT",
	}
)

func (x VkCommandPoolCreateFlagBits) String() string {
	if s, ok := reverseVkCommandPoolCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCommandPoolCreateFlagBits=%d", x)
}

type VkPipelineStageFlagBits uint32

const (
	VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT                    VkPipelineStageFlagBits = (1 << 0)
	VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT                  VkPipelineStageFlagBits = (1 << 1)
	VK_PIPELINE_STAGE_VERTEX_INPUT_BIT                   VkPipelineStageFlagBits = (1 << 2)
	VK_PIPELINE_STAGE_VERTEX_SHADER_BIT                  VkPipelineStageFlagBits = (1 << 3)
	VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT    VkPipelineStageFlagBits = (1 << 4)
	VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT VkPipelineStageFlagBits = (1 << 5)
	VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT                VkPipelineStageFlagBits = (1 << 6)
	VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT                VkPipelineStageFlagBits = (1 << 7)
	VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT           VkPipelineStageFlagBits = (1 << 8)
	VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT            VkPipelineStageFlagBits = (1 << 9)
	VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT        VkPipelineStageFlagBits = (1 << 10)
	VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT                 VkPipelineStageFlagBits = (1 << 11)
	VK_PIPELINE_STAGE_TRANSFER_BIT                       VkPipelineStageFlagBits = (1 << 12)
	VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT                 VkPipelineStageFlagBits = (1 << 13)
	VK_PIPELINE_STAGE_HOST_BIT                           VkPipelineStageFlagBits = (1 << 14)
	VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT                   VkPipelineStageFlagBits = (1 << 15)
	VK_PIPELINE_STAGE_ALL_COMMANDS_BIT                   VkPipelineStageFlagBits = (1 << 16)
)

var (
	reverseVkPipelineStageFlagBits map[VkPipelineStageFlagBits]string = map[VkPipelineStageFlagBits]string{
		VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT:                    "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT",
		VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT:                  "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT",
		VK_PIPELINE_STAGE_VERTEX_INPUT_BIT:                   "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT",
		VK_PIPELINE_STAGE_VERTEX_SHADER_BIT:                  "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT",
		VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT:    "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT",
		VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT",
		VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT:                "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT",
		VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT:                "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT",
		VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT:           "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT",
		VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT:            "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT",
		VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT:        "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT",
		VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT:                 "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT",
		VK_PIPELINE_STAGE_TRANSFER_BIT:                       "VK_PIPELINE_STAGE_TRANSFER_BIT",
		VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT:                 "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT",
		VK_PIPELINE_STAGE_HOST_BIT:                           "VK_PIPELINE_STAGE_HOST_BIT",
		VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT:                   "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",
		VK_PIPELINE_STAGE_ALL_COMMANDS_BIT:                   "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT",
	}
)

func (x VkPipelineStageFlagBits) String() string {
	if s, ok := reverseVkPipelineStageFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPipelineStageFlagBits=%d", x)
}

type VkFilter uint32

const (
	VK_FILTER_NEAREST VkFilter = 0
	VK_FILTER_LINEAR  VkFilter = 1
)

var (
	reverseVkFilter map[VkFilter]string = map[VkFilter]string{
		VK_FILTER_NEAREST: "VK_FILTER_NEAREST",
		VK_FILTER_LINEAR:  "VK_FILTER_LINEAR",
	}
)

func (x VkFilter) String() string {
	if s, ok := reverseVkFilter[x]; ok {
		return s
	}
	return fmt.Sprintf("VkFilter=%d", x)
}

type VkDeviceQueueCreateFlagBits uint32

const (
	VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT VkDeviceQueueCreateFlagBits = (1 << 0)
)

var (
	reverseVkDeviceQueueCreateFlagBits map[VkDeviceQueueCreateFlagBits]string = map[VkDeviceQueueCreateFlagBits]string{
		VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT",
	}
)

func (x VkDeviceQueueCreateFlagBits) String() string {
	if s, ok := reverseVkDeviceQueueCreateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDeviceQueueCreateFlagBits=%d", x)
}

type VkIndexType uint32

const (
	VK_INDEX_TYPE_UINT16 VkIndexType = 0
	VK_INDEX_TYPE_UINT32 VkIndexType = 1
)

var (
	reverseVkIndexType map[VkIndexType]string = map[VkIndexType]string{
		VK_INDEX_TYPE_UINT16: "VK_INDEX_TYPE_UINT16",
		VK_INDEX_TYPE_UINT32: "VK_INDEX_TYPE_UINT32",
	}
)

func (x VkIndexType) String() string {
	if s, ok := reverseVkIndexType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkIndexType=%d", x)
}

type VkPipelineBindPoint uint32

const (
	VK_PIPELINE_BIND_POINT_GRAPHICS VkPipelineBindPoint = 0
	VK_PIPELINE_BIND_POINT_COMPUTE  VkPipelineBindPoint = 1
)

var (
	reverseVkPipelineBindPoint map[VkPipelineBindPoint]string = map[VkPipelineBindPoint]string{
		VK_PIPELINE_BIND_POINT_GRAPHICS: "VK_PIPELINE_BIND_POINT_GRAPHICS",
		VK_PIPELINE_BIND_POINT_COMPUTE:  "VK_PIPELINE_BIND_POINT_COMPUTE",
	}
)

func (x VkPipelineBindPoint) String() string {
	if s, ok := reverseVkPipelineBindPoint[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPipelineBindPoint=%d", x)
}

type VkPipelineStageFlags VkFlags

type VkCommandPoolCreateFlags VkFlags

type VkShaderModuleCreateFlags VkFlags

type VkCommandPoolResetFlags VkFlags

type VkPipelineCacheCreateFlags VkFlags

type VkRenderPassCreateFlags VkFlags

type VkImageViewCreateFlags VkFlags

type VkDeviceQueueCreateFlags VkFlags

type VkMemoryMapFlags VkFlags

type VkSamplerCreateFlags VkFlags

type VkDeviceCreateFlags VkFlags

type VkDependencyFlags VkFlags

type VkSampleCountFlags VkFlags

type VkQueueFlags VkFlags

type VkColorComponentFlags VkFlags

type VkFramebufferCreateFlags VkFlags

type VkMemoryPropertyFlags VkFlags

type VkQueryResultFlags VkFlags

type VkDescriptorPoolCreateFlags VkFlags

type VkMemoryHeapFlags VkFlags

type VkImageAspectFlags VkFlags

type VkCullModeFlags VkFlags

type VkInstanceCreateFlags VkFlags

type VkImageUsageFlags VkFlags

type VkSparseImageFormatFlags VkFlags

type VkImageCreateFlags VkFlags

type VkDescriptorPoolResetFlags VkFlags

type VkFormatFeatureFlags VkFlags

type VkBufferViewCreateFlags VkFlags

type VkPipelineColorBlendStateCreateFlags VkFlags

type VkDescriptorSetLayoutCreateFlags VkFlags

type VkQueryPipelineStatisticFlags VkFlags

type VkSparseMemoryBindFlags VkFlags

type VkQueryPoolCreateFlags VkFlags

type VkCommandBufferResetFlags VkFlags

type VkCommandBufferUsageFlags VkFlags

type VkQueryControlFlags VkFlags

type VkPipelineCreateFlags VkFlags

type VkPipelineDepthStencilStateCreateFlags VkFlags

type VkPipelineDynamicStateCreateFlags VkFlags

type VkPipelineInputAssemblyStateCreateFlags VkFlags

type VkBufferUsageFlags VkFlags

type VkPipelineLayoutCreateFlags VkFlags

type VkAttachmentDescriptionFlags VkFlags

type VkPipelineMultisampleStateCreateFlags VkFlags

type VkSemaphoreCreateFlags VkFlags

type VkPipelineRasterizationStateCreateFlags VkFlags

type VkPipelineViewportStateCreateFlags VkFlags

type VkSubpassDescriptionFlags VkFlags

type VkAccessFlags VkFlags

type VkPipelineShaderStageCreateFlags VkFlags

type VkStencilFaceFlags VkFlags

type VkPipelineTessellationStateCreateFlags VkFlags

type VkEventCreateFlags VkFlags

type VkShaderStageFlags VkFlags

type VkBufferCreateFlags VkFlags

type VkPipelineVertexInputStateCreateFlags VkFlags

type VkFenceCreateFlags VkFlags

type PFN_vkReallocationFunction C.PFN_vkReallocationFunction

type PFN_vkInternalFreeNotification C.PFN_vkInternalFreeNotification

type PFN_vkInternalAllocationNotification C.PFN_vkInternalAllocationNotification

type PFN_vkFreeFunction C.PFN_vkFreeFunction

type PFN_vkAllocationFunction C.PFN_vkAllocationFunction

type PFN_vkVoidFunction C.PFN_vkVoidFunction

//VkCommandBufferBeginInfo provides a go interface for VkCommandBufferBeginInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferBeginInfo.html
type VkCommandBufferBeginInfo C.struct_VkCommandBufferBeginInfo

// NewVkCommandBufferBeginInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkCommandBufferBeginInfo() *VkCommandBufferBeginInfo {
	sz := unsafe.Sizeof(VkCommandBufferBeginInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkCommandBufferBeginInfo)(ptr)
}

// Free releases the memory allocated by the NewVkCommandBufferBeginInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkCommandBufferBeginInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkCommandBufferBeginInfo) AsPtr() *VkCommandBufferBeginInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkCommandBufferBeginInfo) AsCPtr() *VkCommandBufferBeginInfo {
	clone := newVkCommandBufferBeginInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkCommandBufferBeginInfo
func (x VkCommandBufferBeginInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkCommandBufferBeginInfo) WithDefaultSType() *VkCommandBufferBeginInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkCommandBufferBeginInfo
func (x *VkCommandBufferBeginInfo) WithSType(y VkStructureType) *VkCommandBufferBeginInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkCommandBufferBeginInfo
func (x VkCommandBufferBeginInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkCommandBufferBeginInfo
func (x *VkCommandBufferBeginInfo) WithPNext(y unsafe.Pointer) *VkCommandBufferBeginInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkCommandBufferBeginInfo
func (x VkCommandBufferBeginInfo) Flags() VkCommandBufferUsageFlags {
	ptr := /* Identifier */ (*VkCommandBufferUsageFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkCommandBufferBeginInfo
func (x *VkCommandBufferBeginInfo) WithFlags(y VkCommandBufferUsageFlags) *VkCommandBufferBeginInfo {
	ptr := /* Identifier */ (*C.VkCommandBufferUsageFlags)(&y)
	x.flags = *ptr
	return x
}

// PInheritanceInfo returns the value of pInheritanceInfo from VkCommandBufferBeginInfo
func (x VkCommandBufferBeginInfo) PInheritanceInfo() *VkCommandBufferInheritanceInfo {
	ptr := func(x **C.VkCommandBufferInheritanceInfo) **VkCommandBufferInheritanceInfo { /* Pointer */
		return (**VkCommandBufferInheritanceInfo)(unsafe.Pointer(x))
	}(&x.pInheritanceInfo)
	return *ptr
}

// WithPInheritanceInfo copies the provided value into C space and stores it
// at pInheritanceInfo on VkCommandBufferBeginInfo
func (x *VkCommandBufferBeginInfo) WithPInheritanceInfo(y *VkCommandBufferInheritanceInfo) *VkCommandBufferBeginInfo {
	ptr := func(x **VkCommandBufferInheritanceInfo) **C.VkCommandBufferInheritanceInfo { /* Pointer */
		return (**C.VkCommandBufferInheritanceInfo)(unsafe.Pointer(x))
	}(&y)
	x.pInheritanceInfo = *ptr
	return x
}

//VkQueryPoolCreateInfo provides a go interface for VkQueryPoolCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueryPoolCreateInfo.html
type VkQueryPoolCreateInfo C.struct_VkQueryPoolCreateInfo

// NewVkQueryPoolCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkQueryPoolCreateInfo() *VkQueryPoolCreateInfo {
	sz := unsafe.Sizeof(VkQueryPoolCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkQueryPoolCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkQueryPoolCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkQueryPoolCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkQueryPoolCreateInfo) AsPtr() *VkQueryPoolCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkQueryPoolCreateInfo) AsCPtr() *VkQueryPoolCreateInfo {
	clone := newVkQueryPoolCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkQueryPoolCreateInfo
func (x VkQueryPoolCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkQueryPoolCreateInfo) WithDefaultSType() *VkQueryPoolCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkQueryPoolCreateInfo
func (x *VkQueryPoolCreateInfo) WithSType(y VkStructureType) *VkQueryPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkQueryPoolCreateInfo
func (x VkQueryPoolCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkQueryPoolCreateInfo
func (x *VkQueryPoolCreateInfo) WithPNext(y unsafe.Pointer) *VkQueryPoolCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkQueryPoolCreateInfo
func (x VkQueryPoolCreateInfo) Flags() VkQueryPoolCreateFlags {
	ptr := /* Identifier */ (*VkQueryPoolCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkQueryPoolCreateInfo
func (x *VkQueryPoolCreateInfo) WithFlags(y VkQueryPoolCreateFlags) *VkQueryPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkQueryPoolCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// QueryType returns the value of queryType from VkQueryPoolCreateInfo
func (x VkQueryPoolCreateInfo) QueryType() VkQueryType {
	ptr := /* Identifier */ (*VkQueryType)(&x.queryType)
	return *ptr
}

// WithQueryType copies the provided value into C space and stores it
// at queryType on VkQueryPoolCreateInfo
func (x *VkQueryPoolCreateInfo) WithQueryType(y VkQueryType) *VkQueryPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkQueryType)(&y)
	x.queryType = *ptr
	return x
}

// QueryCount returns the value of queryCount from VkQueryPoolCreateInfo
func (x VkQueryPoolCreateInfo) QueryCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queryCount)
	return *ptr
}

// WithQueryCount copies the provided value into C space and stores it
// at queryCount on VkQueryPoolCreateInfo
func (x *VkQueryPoolCreateInfo) WithQueryCount(y uint32) *VkQueryPoolCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queryCount = *ptr
	return x
}

// PipelineStatistics returns the value of pipelineStatistics from VkQueryPoolCreateInfo
func (x VkQueryPoolCreateInfo) PipelineStatistics() VkQueryPipelineStatisticFlags {
	ptr := /* Identifier */ (*VkQueryPipelineStatisticFlags)(&x.pipelineStatistics)
	return *ptr
}

// WithPipelineStatistics copies the provided value into C space and stores it
// at pipelineStatistics on VkQueryPoolCreateInfo
func (x *VkQueryPoolCreateInfo) WithPipelineStatistics(y VkQueryPipelineStatisticFlags) *VkQueryPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkQueryPipelineStatisticFlags)(&y)
	x.pipelineStatistics = *ptr
	return x
}

//VkSparseBufferMemoryBindInfo provides a go interface for VkSparseBufferMemoryBindInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseBufferMemoryBindInfo.html
type VkSparseBufferMemoryBindInfo C.struct_VkSparseBufferMemoryBindInfo

// NewVkSparseBufferMemoryBindInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseBufferMemoryBindInfo() *VkSparseBufferMemoryBindInfo {
	sz := unsafe.Sizeof(VkSparseBufferMemoryBindInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseBufferMemoryBindInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSparseBufferMemoryBindInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseBufferMemoryBindInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseBufferMemoryBindInfo) AsPtr() *VkSparseBufferMemoryBindInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseBufferMemoryBindInfo) AsCPtr() *VkSparseBufferMemoryBindInfo {
	clone := newVkSparseBufferMemoryBindInfo()
	*clone = *x
	return clone
}

// Buffer returns the value of buffer from VkSparseBufferMemoryBindInfo
func (x VkSparseBufferMemoryBindInfo) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkSparseBufferMemoryBindInfo
func (x *VkSparseBufferMemoryBindInfo) WithBuffer(y VkBuffer) *VkSparseBufferMemoryBindInfo {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

// BindCount returns the value of bindCount from VkSparseBufferMemoryBindInfo
func (x VkSparseBufferMemoryBindInfo) BindCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bindCount)
	return *ptr
}

// WithBindCount copies the provided value into C space and stores it
// at bindCount on VkSparseBufferMemoryBindInfo
func (x *VkSparseBufferMemoryBindInfo) WithBindCount(y uint32) *VkSparseBufferMemoryBindInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bindCount = *ptr
	return x
}

// PBinds returns the value of pBinds from VkSparseBufferMemoryBindInfo
func (x VkSparseBufferMemoryBindInfo) PBinds() []VkSparseMemoryBind {
	ptr := func(x **C.VkSparseMemoryBind) *[]VkSparseMemoryBind { /* Slice */
		slc := unsafe.Slice((*VkSparseMemoryBind)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pBinds)
	return *ptr
}

// WithPBinds copies the provided value into C space and stores it
// at pBinds on VkSparseBufferMemoryBindInfo
func (x *VkSparseBufferMemoryBindInfo) WithPBinds(y []VkSparseMemoryBind) *VkSparseBufferMemoryBindInfo {
	ptr := func(x *[]VkSparseMemoryBind) **C.VkSparseMemoryBind { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseMemoryBind)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseMemoryBind)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pBinds = *ptr
	return x
}

//VkDescriptorSetLayoutCreateInfo provides a go interface for VkDescriptorSetLayoutCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutCreateInfo.html
type VkDescriptorSetLayoutCreateInfo C.struct_VkDescriptorSetLayoutCreateInfo

// NewVkDescriptorSetLayoutCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorSetLayoutCreateInfo() *VkDescriptorSetLayoutCreateInfo {
	sz := unsafe.Sizeof(VkDescriptorSetLayoutCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorSetLayoutCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorSetLayoutCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorSetLayoutCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorSetLayoutCreateInfo) AsPtr() *VkDescriptorSetLayoutCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorSetLayoutCreateInfo) AsCPtr() *VkDescriptorSetLayoutCreateInfo {
	clone := newVkDescriptorSetLayoutCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorSetLayoutCreateInfo
func (x VkDescriptorSetLayoutCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorSetLayoutCreateInfo) WithDefaultSType() *VkDescriptorSetLayoutCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorSetLayoutCreateInfo
func (x *VkDescriptorSetLayoutCreateInfo) WithSType(y VkStructureType) *VkDescriptorSetLayoutCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorSetLayoutCreateInfo
func (x VkDescriptorSetLayoutCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorSetLayoutCreateInfo
func (x *VkDescriptorSetLayoutCreateInfo) WithPNext(y unsafe.Pointer) *VkDescriptorSetLayoutCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDescriptorSetLayoutCreateInfo
func (x VkDescriptorSetLayoutCreateInfo) Flags() VkDescriptorSetLayoutCreateFlags {
	ptr := /* Identifier */ (*VkDescriptorSetLayoutCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDescriptorSetLayoutCreateInfo
func (x *VkDescriptorSetLayoutCreateInfo) WithFlags(y VkDescriptorSetLayoutCreateFlags) *VkDescriptorSetLayoutCreateInfo {
	ptr := /* Identifier */ (*C.VkDescriptorSetLayoutCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// BindingCount returns the value of bindingCount from VkDescriptorSetLayoutCreateInfo
func (x VkDescriptorSetLayoutCreateInfo) BindingCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bindingCount)
	return *ptr
}

// WithBindingCount copies the provided value into C space and stores it
// at bindingCount on VkDescriptorSetLayoutCreateInfo
func (x *VkDescriptorSetLayoutCreateInfo) WithBindingCount(y uint32) *VkDescriptorSetLayoutCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bindingCount = *ptr
	return x
}

// PBindings returns the value of pBindings from VkDescriptorSetLayoutCreateInfo
func (x VkDescriptorSetLayoutCreateInfo) PBindings() []VkDescriptorSetLayoutBinding {
	ptr := func(x **C.VkDescriptorSetLayoutBinding) *[]VkDescriptorSetLayoutBinding { /* Slice */
		slc := unsafe.Slice((*VkDescriptorSetLayoutBinding)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pBindings)
	return *ptr
}

// WithPBindings copies the provided value into C space and stores it
// at pBindings on VkDescriptorSetLayoutCreateInfo
func (x *VkDescriptorSetLayoutCreateInfo) WithPBindings(y []VkDescriptorSetLayoutBinding) *VkDescriptorSetLayoutCreateInfo {
	ptr := func(x *[]VkDescriptorSetLayoutBinding) **C.VkDescriptorSetLayoutBinding { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorSetLayoutBinding)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorSetLayoutBinding)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pBindings = *ptr
	return x
}

//VkDescriptorSetLayoutBinding provides a go interface for VkDescriptorSetLayoutBinding.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutBinding.html
type VkDescriptorSetLayoutBinding C.struct_VkDescriptorSetLayoutBinding

// NewVkDescriptorSetLayoutBinding allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorSetLayoutBinding() *VkDescriptorSetLayoutBinding {
	sz := unsafe.Sizeof(VkDescriptorSetLayoutBinding{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorSetLayoutBinding)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorSetLayoutBinding method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorSetLayoutBinding) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorSetLayoutBinding) AsPtr() *VkDescriptorSetLayoutBinding { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorSetLayoutBinding) AsCPtr() *VkDescriptorSetLayoutBinding {
	clone := newVkDescriptorSetLayoutBinding()
	*clone = *x
	return clone
}

// Binding returns the value of binding from VkDescriptorSetLayoutBinding
func (x VkDescriptorSetLayoutBinding) Binding() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.binding)
	return *ptr
}

// WithBinding copies the provided value into C space and stores it
// at binding on VkDescriptorSetLayoutBinding
func (x *VkDescriptorSetLayoutBinding) WithBinding(y uint32) *VkDescriptorSetLayoutBinding {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.binding = *ptr
	return x
}

// DescriptorType returns the value of descriptorType from VkDescriptorSetLayoutBinding
func (x VkDescriptorSetLayoutBinding) DescriptorType() VkDescriptorType {
	ptr := /* Identifier */ (*VkDescriptorType)(&x.descriptorType)
	return *ptr
}

// WithDescriptorType copies the provided value into C space and stores it
// at descriptorType on VkDescriptorSetLayoutBinding
func (x *VkDescriptorSetLayoutBinding) WithDescriptorType(y VkDescriptorType) *VkDescriptorSetLayoutBinding {
	ptr := /* Identifier */ (*C.VkDescriptorType)(&y)
	x.descriptorType = *ptr
	return x
}

// DescriptorCount returns the value of descriptorCount from VkDescriptorSetLayoutBinding
func (x VkDescriptorSetLayoutBinding) DescriptorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorCount)
	return *ptr
}

// WithDescriptorCount copies the provided value into C space and stores it
// at descriptorCount on VkDescriptorSetLayoutBinding
func (x *VkDescriptorSetLayoutBinding) WithDescriptorCount(y uint32) *VkDescriptorSetLayoutBinding {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorCount = *ptr
	return x
}

// StageFlags returns the value of stageFlags from VkDescriptorSetLayoutBinding
func (x VkDescriptorSetLayoutBinding) StageFlags() VkShaderStageFlags {
	ptr := /* Identifier */ (*VkShaderStageFlags)(&x.stageFlags)
	return *ptr
}

// WithStageFlags copies the provided value into C space and stores it
// at stageFlags on VkDescriptorSetLayoutBinding
func (x *VkDescriptorSetLayoutBinding) WithStageFlags(y VkShaderStageFlags) *VkDescriptorSetLayoutBinding {
	ptr := /* Identifier */ (*C.VkShaderStageFlags)(&y)
	x.stageFlags = *ptr
	return x
}

// PImmutableSamplers returns the value of pImmutableSamplers from VkDescriptorSetLayoutBinding
func (x VkDescriptorSetLayoutBinding) PImmutableSamplers() []VkSampler {
	ptr := func(x **C.VkSampler) *[]VkSampler { /* Slice */
		slc := unsafe.Slice((*VkSampler)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pImmutableSamplers)
	return *ptr
}

// WithPImmutableSamplers copies the provided value into C space and stores it
// at pImmutableSamplers on VkDescriptorSetLayoutBinding
func (x *VkDescriptorSetLayoutBinding) WithPImmutableSamplers(y []VkSampler) *VkDescriptorSetLayoutBinding {
	ptr := func(x *[]VkSampler) **C.VkSampler { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSampler)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSampler)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pImmutableSamplers = *ptr
	return x
}

//VkEventCreateInfo provides a go interface for VkEventCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkEventCreateInfo.html
type VkEventCreateInfo C.struct_VkEventCreateInfo

// NewVkEventCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkEventCreateInfo() *VkEventCreateInfo {
	sz := unsafe.Sizeof(VkEventCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkEventCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkEventCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkEventCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkEventCreateInfo) AsPtr() *VkEventCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkEventCreateInfo) AsCPtr() *VkEventCreateInfo {
	clone := newVkEventCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkEventCreateInfo
func (x VkEventCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkEventCreateInfo) WithDefaultSType() *VkEventCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_EVENT_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkEventCreateInfo
func (x *VkEventCreateInfo) WithSType(y VkStructureType) *VkEventCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkEventCreateInfo
func (x VkEventCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkEventCreateInfo
func (x *VkEventCreateInfo) WithPNext(y unsafe.Pointer) *VkEventCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkEventCreateInfo
func (x VkEventCreateInfo) Flags() VkEventCreateFlags {
	ptr := /* Identifier */ (*VkEventCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkEventCreateInfo
func (x *VkEventCreateInfo) WithFlags(y VkEventCreateFlags) *VkEventCreateInfo {
	ptr := /* Identifier */ (*C.VkEventCreateFlags)(&y)
	x.flags = *ptr
	return x
}

//VkWriteDescriptorSet provides a go interface for VkWriteDescriptorSet.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSet.html
type VkWriteDescriptorSet C.struct_VkWriteDescriptorSet

// NewVkWriteDescriptorSet allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkWriteDescriptorSet() *VkWriteDescriptorSet {
	sz := unsafe.Sizeof(VkWriteDescriptorSet{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkWriteDescriptorSet)(ptr)
}

// Free releases the memory allocated by the NewVkWriteDescriptorSet method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkWriteDescriptorSet) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkWriteDescriptorSet) AsPtr() *VkWriteDescriptorSet { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkWriteDescriptorSet) AsCPtr() *VkWriteDescriptorSet {
	clone := newVkWriteDescriptorSet()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkWriteDescriptorSet) WithDefaultSType() *VkWriteDescriptorSet {
	return x.WithSType(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithSType(y VkStructureType) *VkWriteDescriptorSet {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithPNext(y unsafe.Pointer) *VkWriteDescriptorSet {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DstSet returns the value of dstSet from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) DstSet() VkDescriptorSet {
	ptr := func(x *C.VkDescriptorSet) *VkDescriptorSet { /* Handle */ return (*VkDescriptorSet)(unsafe.Pointer(x)) }(&x.dstSet)
	return *ptr
}

// WithDstSet copies the provided value into C space and stores it
// at dstSet on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithDstSet(y VkDescriptorSet) *VkWriteDescriptorSet {
	ptr := func(x *VkDescriptorSet) *C.VkDescriptorSet { /* Handle */
		return (*C.VkDescriptorSet)(unsafe.Pointer(x))
	}(&y)
	x.dstSet = *ptr
	return x
}

// DstBinding returns the value of dstBinding from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) DstBinding() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstBinding)
	return *ptr
}

// WithDstBinding copies the provided value into C space and stores it
// at dstBinding on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithDstBinding(y uint32) *VkWriteDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstBinding = *ptr
	return x
}

// DstArrayElement returns the value of dstArrayElement from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) DstArrayElement() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstArrayElement)
	return *ptr
}

// WithDstArrayElement copies the provided value into C space and stores it
// at dstArrayElement on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithDstArrayElement(y uint32) *VkWriteDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstArrayElement = *ptr
	return x
}

// DescriptorCount returns the value of descriptorCount from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) DescriptorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorCount)
	return *ptr
}

// WithDescriptorCount copies the provided value into C space and stores it
// at descriptorCount on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithDescriptorCount(y uint32) *VkWriteDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorCount = *ptr
	return x
}

// DescriptorType returns the value of descriptorType from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) DescriptorType() VkDescriptorType {
	ptr := /* Identifier */ (*VkDescriptorType)(&x.descriptorType)
	return *ptr
}

// WithDescriptorType copies the provided value into C space and stores it
// at descriptorType on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithDescriptorType(y VkDescriptorType) *VkWriteDescriptorSet {
	ptr := /* Identifier */ (*C.VkDescriptorType)(&y)
	x.descriptorType = *ptr
	return x
}

// PImageInfo returns the value of pImageInfo from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) PImageInfo() []VkDescriptorImageInfo {
	ptr := func(x **C.VkDescriptorImageInfo) *[]VkDescriptorImageInfo { /* Slice */
		slc := unsafe.Slice((*VkDescriptorImageInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pImageInfo)
	return *ptr
}

// WithPImageInfo copies the provided value into C space and stores it
// at pImageInfo on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithPImageInfo(y []VkDescriptorImageInfo) *VkWriteDescriptorSet {
	ptr := func(x *[]VkDescriptorImageInfo) **C.VkDescriptorImageInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorImageInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorImageInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pImageInfo = *ptr
	return x
}

// PBufferInfo returns the value of pBufferInfo from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) PBufferInfo() []VkDescriptorBufferInfo {
	ptr := func(x **C.VkDescriptorBufferInfo) *[]VkDescriptorBufferInfo { /* Slice */
		slc := unsafe.Slice((*VkDescriptorBufferInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pBufferInfo)
	return *ptr
}

// WithPBufferInfo copies the provided value into C space and stores it
// at pBufferInfo on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithPBufferInfo(y []VkDescriptorBufferInfo) *VkWriteDescriptorSet {
	ptr := func(x *[]VkDescriptorBufferInfo) **C.VkDescriptorBufferInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorBufferInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorBufferInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pBufferInfo = *ptr
	return x
}

// PTexelBufferView returns the value of pTexelBufferView from VkWriteDescriptorSet
func (x VkWriteDescriptorSet) PTexelBufferView() []VkBufferView {
	ptr := func(x **C.VkBufferView) *[]VkBufferView { /* Slice */
		slc := unsafe.Slice((*VkBufferView)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pTexelBufferView)
	return *ptr
}

// WithPTexelBufferView copies the provided value into C space and stores it
// at pTexelBufferView on VkWriteDescriptorSet
func (x *VkWriteDescriptorSet) WithPTexelBufferView(y []VkBufferView) *VkWriteDescriptorSet {
	ptr := func(x *[]VkBufferView) **C.VkBufferView { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBufferView)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBufferView)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pTexelBufferView = *ptr
	return x
}

//VkAttachmentDescription provides a go interface for VkAttachmentDescription.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescription.html
type VkAttachmentDescription C.struct_VkAttachmentDescription

// NewVkAttachmentDescription allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAttachmentDescription() *VkAttachmentDescription {
	sz := unsafe.Sizeof(VkAttachmentDescription{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAttachmentDescription)(ptr)
}

// Free releases the memory allocated by the NewVkAttachmentDescription method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAttachmentDescription) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAttachmentDescription) AsPtr() *VkAttachmentDescription { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAttachmentDescription) AsCPtr() *VkAttachmentDescription {
	clone := newVkAttachmentDescription()
	*clone = *x
	return clone
}

// Flags returns the value of flags from VkAttachmentDescription
func (x VkAttachmentDescription) Flags() VkAttachmentDescriptionFlags {
	ptr := /* Identifier */ (*VkAttachmentDescriptionFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkAttachmentDescription
func (x *VkAttachmentDescription) WithFlags(y VkAttachmentDescriptionFlags) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkAttachmentDescriptionFlags)(&y)
	x.flags = *ptr
	return x
}

// Format returns the value of format from VkAttachmentDescription
func (x VkAttachmentDescription) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkAttachmentDescription
func (x *VkAttachmentDescription) WithFormat(y VkFormat) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Samples returns the value of samples from VkAttachmentDescription
func (x VkAttachmentDescription) Samples() VkSampleCountFlagBits {
	ptr := /* Identifier */ (*VkSampleCountFlagBits)(&x.samples)
	return *ptr
}

// WithSamples copies the provided value into C space and stores it
// at samples on VkAttachmentDescription
func (x *VkAttachmentDescription) WithSamples(y VkSampleCountFlagBits) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkSampleCountFlagBits)(&y)
	x.samples = *ptr
	return x
}

// LoadOp returns the value of loadOp from VkAttachmentDescription
func (x VkAttachmentDescription) LoadOp() VkAttachmentLoadOp {
	ptr := /* Identifier */ (*VkAttachmentLoadOp)(&x.loadOp)
	return *ptr
}

// WithLoadOp copies the provided value into C space and stores it
// at loadOp on VkAttachmentDescription
func (x *VkAttachmentDescription) WithLoadOp(y VkAttachmentLoadOp) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkAttachmentLoadOp)(&y)
	x.loadOp = *ptr
	return x
}

// StoreOp returns the value of storeOp from VkAttachmentDescription
func (x VkAttachmentDescription) StoreOp() VkAttachmentStoreOp {
	ptr := /* Identifier */ (*VkAttachmentStoreOp)(&x.storeOp)
	return *ptr
}

// WithStoreOp copies the provided value into C space and stores it
// at storeOp on VkAttachmentDescription
func (x *VkAttachmentDescription) WithStoreOp(y VkAttachmentStoreOp) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkAttachmentStoreOp)(&y)
	x.storeOp = *ptr
	return x
}

// StencilLoadOp returns the value of stencilLoadOp from VkAttachmentDescription
func (x VkAttachmentDescription) StencilLoadOp() VkAttachmentLoadOp {
	ptr := /* Identifier */ (*VkAttachmentLoadOp)(&x.stencilLoadOp)
	return *ptr
}

// WithStencilLoadOp copies the provided value into C space and stores it
// at stencilLoadOp on VkAttachmentDescription
func (x *VkAttachmentDescription) WithStencilLoadOp(y VkAttachmentLoadOp) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkAttachmentLoadOp)(&y)
	x.stencilLoadOp = *ptr
	return x
}

// StencilStoreOp returns the value of stencilStoreOp from VkAttachmentDescription
func (x VkAttachmentDescription) StencilStoreOp() VkAttachmentStoreOp {
	ptr := /* Identifier */ (*VkAttachmentStoreOp)(&x.stencilStoreOp)
	return *ptr
}

// WithStencilStoreOp copies the provided value into C space and stores it
// at stencilStoreOp on VkAttachmentDescription
func (x *VkAttachmentDescription) WithStencilStoreOp(y VkAttachmentStoreOp) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkAttachmentStoreOp)(&y)
	x.stencilStoreOp = *ptr
	return x
}

// InitialLayout returns the value of initialLayout from VkAttachmentDescription
func (x VkAttachmentDescription) InitialLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.initialLayout)
	return *ptr
}

// WithInitialLayout copies the provided value into C space and stores it
// at initialLayout on VkAttachmentDescription
func (x *VkAttachmentDescription) WithInitialLayout(y VkImageLayout) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.initialLayout = *ptr
	return x
}

// FinalLayout returns the value of finalLayout from VkAttachmentDescription
func (x VkAttachmentDescription) FinalLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.finalLayout)
	return *ptr
}

// WithFinalLayout copies the provided value into C space and stores it
// at finalLayout on VkAttachmentDescription
func (x *VkAttachmentDescription) WithFinalLayout(y VkImageLayout) *VkAttachmentDescription {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.finalLayout = *ptr
	return x
}

//VkBufferCreateInfo provides a go interface for VkBufferCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCreateInfo.html
type VkBufferCreateInfo C.struct_VkBufferCreateInfo

// NewVkBufferCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferCreateInfo() *VkBufferCreateInfo {
	sz := unsafe.Sizeof(VkBufferCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBufferCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferCreateInfo) AsPtr() *VkBufferCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferCreateInfo) AsCPtr() *VkBufferCreateInfo {
	clone := newVkBufferCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBufferCreateInfo
func (x VkBufferCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBufferCreateInfo) WithDefaultSType() *VkBufferCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithSType(y VkStructureType) *VkBufferCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBufferCreateInfo
func (x VkBufferCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithPNext(y unsafe.Pointer) *VkBufferCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkBufferCreateInfo
func (x VkBufferCreateInfo) Flags() VkBufferCreateFlags {
	ptr := /* Identifier */ (*VkBufferCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithFlags(y VkBufferCreateFlags) *VkBufferCreateInfo {
	ptr := /* Identifier */ (*C.VkBufferCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Size returns the value of size from VkBufferCreateInfo
func (x VkBufferCreateInfo) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// WithSize copies the provided value into C space and stores it
// at size on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithSize(y VkDeviceSize) *VkBufferCreateInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.size = *ptr
	return x
}

// Usage returns the value of usage from VkBufferCreateInfo
func (x VkBufferCreateInfo) Usage() VkBufferUsageFlags {
	ptr := /* Identifier */ (*VkBufferUsageFlags)(&x.usage)
	return *ptr
}

// WithUsage copies the provided value into C space and stores it
// at usage on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithUsage(y VkBufferUsageFlags) *VkBufferCreateInfo {
	ptr := /* Identifier */ (*C.VkBufferUsageFlags)(&y)
	x.usage = *ptr
	return x
}

// SharingMode returns the value of sharingMode from VkBufferCreateInfo
func (x VkBufferCreateInfo) SharingMode() VkSharingMode {
	ptr := /* Identifier */ (*VkSharingMode)(&x.sharingMode)
	return *ptr
}

// WithSharingMode copies the provided value into C space and stores it
// at sharingMode on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithSharingMode(y VkSharingMode) *VkBufferCreateInfo {
	ptr := /* Identifier */ (*C.VkSharingMode)(&y)
	x.sharingMode = *ptr
	return x
}

// QueueFamilyIndexCount returns the value of queueFamilyIndexCount from VkBufferCreateInfo
func (x VkBufferCreateInfo) QueueFamilyIndexCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueFamilyIndexCount)
	return *ptr
}

// WithQueueFamilyIndexCount copies the provided value into C space and stores it
// at queueFamilyIndexCount on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithQueueFamilyIndexCount(y uint32) *VkBufferCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueFamilyIndexCount = *ptr
	return x
}

// PQueueFamilyIndices returns the value of pQueueFamilyIndices from VkBufferCreateInfo
func (x VkBufferCreateInfo) PQueueFamilyIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pQueueFamilyIndices)
	return *ptr
}

// WithPQueueFamilyIndices copies the provided value into C space and stores it
// at pQueueFamilyIndices on VkBufferCreateInfo
func (x *VkBufferCreateInfo) WithPQueueFamilyIndices(y []uint32) *VkBufferCreateInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pQueueFamilyIndices = *ptr
	return x
}

//VkSemaphoreCreateInfo provides a go interface for VkSemaphoreCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreCreateInfo.html
type VkSemaphoreCreateInfo C.struct_VkSemaphoreCreateInfo

// NewVkSemaphoreCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSemaphoreCreateInfo() *VkSemaphoreCreateInfo {
	sz := unsafe.Sizeof(VkSemaphoreCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSemaphoreCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSemaphoreCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSemaphoreCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSemaphoreCreateInfo) AsPtr() *VkSemaphoreCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSemaphoreCreateInfo) AsCPtr() *VkSemaphoreCreateInfo {
	clone := newVkSemaphoreCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSemaphoreCreateInfo
func (x VkSemaphoreCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSemaphoreCreateInfo) WithDefaultSType() *VkSemaphoreCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSemaphoreCreateInfo
func (x *VkSemaphoreCreateInfo) WithSType(y VkStructureType) *VkSemaphoreCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSemaphoreCreateInfo
func (x VkSemaphoreCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSemaphoreCreateInfo
func (x *VkSemaphoreCreateInfo) WithPNext(y unsafe.Pointer) *VkSemaphoreCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkSemaphoreCreateInfo
func (x VkSemaphoreCreateInfo) Flags() VkSemaphoreCreateFlags {
	ptr := /* Identifier */ (*VkSemaphoreCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSemaphoreCreateInfo
func (x *VkSemaphoreCreateInfo) WithFlags(y VkSemaphoreCreateFlags) *VkSemaphoreCreateInfo {
	ptr := /* Identifier */ (*C.VkSemaphoreCreateFlags)(&y)
	x.flags = *ptr
	return x
}

//VkFenceCreateInfo provides a go interface for VkFenceCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFenceCreateInfo.html
type VkFenceCreateInfo C.struct_VkFenceCreateInfo

// NewVkFenceCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkFenceCreateInfo() *VkFenceCreateInfo {
	sz := unsafe.Sizeof(VkFenceCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkFenceCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkFenceCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkFenceCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkFenceCreateInfo) AsPtr() *VkFenceCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkFenceCreateInfo) AsCPtr() *VkFenceCreateInfo {
	clone := newVkFenceCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkFenceCreateInfo
func (x VkFenceCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkFenceCreateInfo) WithDefaultSType() *VkFenceCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_FENCE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkFenceCreateInfo
func (x *VkFenceCreateInfo) WithSType(y VkStructureType) *VkFenceCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkFenceCreateInfo
func (x VkFenceCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkFenceCreateInfo
func (x *VkFenceCreateInfo) WithPNext(y unsafe.Pointer) *VkFenceCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkFenceCreateInfo
func (x VkFenceCreateInfo) Flags() VkFenceCreateFlags {
	ptr := /* Identifier */ (*VkFenceCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkFenceCreateInfo
func (x *VkFenceCreateInfo) WithFlags(y VkFenceCreateFlags) *VkFenceCreateInfo {
	ptr := /* Identifier */ (*C.VkFenceCreateFlags)(&y)
	x.flags = *ptr
	return x
}

//VkAttachmentReference provides a go interface for VkAttachmentReference.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReference.html
type VkAttachmentReference C.struct_VkAttachmentReference

// NewVkAttachmentReference allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAttachmentReference() *VkAttachmentReference {
	sz := unsafe.Sizeof(VkAttachmentReference{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAttachmentReference)(ptr)
}

// Free releases the memory allocated by the NewVkAttachmentReference method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAttachmentReference) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAttachmentReference) AsPtr() *VkAttachmentReference { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAttachmentReference) AsCPtr() *VkAttachmentReference {
	clone := newVkAttachmentReference()
	*clone = *x
	return clone
}

// Attachment returns the value of attachment from VkAttachmentReference
func (x VkAttachmentReference) Attachment() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachment)
	return *ptr
}

// WithAttachment copies the provided value into C space and stores it
// at attachment on VkAttachmentReference
func (x *VkAttachmentReference) WithAttachment(y uint32) *VkAttachmentReference {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachment = *ptr
	return x
}

// Layout returns the value of layout from VkAttachmentReference
func (x VkAttachmentReference) Layout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.layout)
	return *ptr
}

// WithLayout copies the provided value into C space and stores it
// at layout on VkAttachmentReference
func (x *VkAttachmentReference) WithLayout(y VkImageLayout) *VkAttachmentReference {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.layout = *ptr
	return x
}

//VkSparseMemoryBind provides a go interface for VkSparseMemoryBind.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseMemoryBind.html
type VkSparseMemoryBind C.struct_VkSparseMemoryBind

// NewVkSparseMemoryBind allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseMemoryBind() *VkSparseMemoryBind {
	sz := unsafe.Sizeof(VkSparseMemoryBind{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseMemoryBind)(ptr)
}

// Free releases the memory allocated by the NewVkSparseMemoryBind method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseMemoryBind) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseMemoryBind) AsPtr() *VkSparseMemoryBind { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseMemoryBind) AsCPtr() *VkSparseMemoryBind {
	clone := newVkSparseMemoryBind()
	*clone = *x
	return clone
}

// ResourceOffset returns the value of resourceOffset from VkSparseMemoryBind
func (x VkSparseMemoryBind) ResourceOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.resourceOffset)
	return *ptr
}

// WithResourceOffset copies the provided value into C space and stores it
// at resourceOffset on VkSparseMemoryBind
func (x *VkSparseMemoryBind) WithResourceOffset(y VkDeviceSize) *VkSparseMemoryBind {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.resourceOffset = *ptr
	return x
}

// Size returns the value of size from VkSparseMemoryBind
func (x VkSparseMemoryBind) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// WithSize copies the provided value into C space and stores it
// at size on VkSparseMemoryBind
func (x *VkSparseMemoryBind) WithSize(y VkDeviceSize) *VkSparseMemoryBind {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.size = *ptr
	return x
}

// Memory returns the value of memory from VkSparseMemoryBind
func (x VkSparseMemoryBind) Memory() VkDeviceMemory {
	ptr := func(x *C.VkDeviceMemory) *VkDeviceMemory { /* Handle */ return (*VkDeviceMemory)(unsafe.Pointer(x)) }(&x.memory)
	return *ptr
}

// WithMemory copies the provided value into C space and stores it
// at memory on VkSparseMemoryBind
func (x *VkSparseMemoryBind) WithMemory(y VkDeviceMemory) *VkSparseMemoryBind {
	ptr := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&y)
	x.memory = *ptr
	return x
}

// MemoryOffset returns the value of memoryOffset from VkSparseMemoryBind
func (x VkSparseMemoryBind) MemoryOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.memoryOffset)
	return *ptr
}

// WithMemoryOffset copies the provided value into C space and stores it
// at memoryOffset on VkSparseMemoryBind
func (x *VkSparseMemoryBind) WithMemoryOffset(y VkDeviceSize) *VkSparseMemoryBind {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.memoryOffset = *ptr
	return x
}

// Flags returns the value of flags from VkSparseMemoryBind
func (x VkSparseMemoryBind) Flags() VkSparseMemoryBindFlags {
	ptr := /* Identifier */ (*VkSparseMemoryBindFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSparseMemoryBind
func (x *VkSparseMemoryBind) WithFlags(y VkSparseMemoryBindFlags) *VkSparseMemoryBind {
	ptr := /* Identifier */ (*C.VkSparseMemoryBindFlags)(&y)
	x.flags = *ptr
	return x
}

//VkDescriptorSetAllocateInfo provides a go interface for VkDescriptorSetAllocateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetAllocateInfo.html
type VkDescriptorSetAllocateInfo C.struct_VkDescriptorSetAllocateInfo

// NewVkDescriptorSetAllocateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorSetAllocateInfo() *VkDescriptorSetAllocateInfo {
	sz := unsafe.Sizeof(VkDescriptorSetAllocateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorSetAllocateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorSetAllocateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorSetAllocateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorSetAllocateInfo) AsPtr() *VkDescriptorSetAllocateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorSetAllocateInfo) AsCPtr() *VkDescriptorSetAllocateInfo {
	clone := newVkDescriptorSetAllocateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorSetAllocateInfo
func (x VkDescriptorSetAllocateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorSetAllocateInfo) WithDefaultSType() *VkDescriptorSetAllocateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorSetAllocateInfo
func (x *VkDescriptorSetAllocateInfo) WithSType(y VkStructureType) *VkDescriptorSetAllocateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorSetAllocateInfo
func (x VkDescriptorSetAllocateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorSetAllocateInfo
func (x *VkDescriptorSetAllocateInfo) WithPNext(y unsafe.Pointer) *VkDescriptorSetAllocateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DescriptorPool returns the value of descriptorPool from VkDescriptorSetAllocateInfo
func (x VkDescriptorSetAllocateInfo) DescriptorPool() VkDescriptorPool {
	ptr := func(x *C.VkDescriptorPool) *VkDescriptorPool { /* Handle */
		return (*VkDescriptorPool)(unsafe.Pointer(x))
	}(&x.descriptorPool)
	return *ptr
}

// WithDescriptorPool copies the provided value into C space and stores it
// at descriptorPool on VkDescriptorSetAllocateInfo
func (x *VkDescriptorSetAllocateInfo) WithDescriptorPool(y VkDescriptorPool) *VkDescriptorSetAllocateInfo {
	ptr := func(x *VkDescriptorPool) *C.VkDescriptorPool { /* Handle */
		return (*C.VkDescriptorPool)(unsafe.Pointer(x))
	}(&y)
	x.descriptorPool = *ptr
	return x
}

// DescriptorSetCount returns the value of descriptorSetCount from VkDescriptorSetAllocateInfo
func (x VkDescriptorSetAllocateInfo) DescriptorSetCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorSetCount)
	return *ptr
}

// WithDescriptorSetCount copies the provided value into C space and stores it
// at descriptorSetCount on VkDescriptorSetAllocateInfo
func (x *VkDescriptorSetAllocateInfo) WithDescriptorSetCount(y uint32) *VkDescriptorSetAllocateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorSetCount = *ptr
	return x
}

// PSetLayouts returns the value of pSetLayouts from VkDescriptorSetAllocateInfo
func (x VkDescriptorSetAllocateInfo) PSetLayouts() []VkDescriptorSetLayout {
	ptr := func(x **C.VkDescriptorSetLayout) *[]VkDescriptorSetLayout { /* Slice */
		slc := unsafe.Slice((*VkDescriptorSetLayout)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSetLayouts)
	return *ptr
}

// WithPSetLayouts copies the provided value into C space and stores it
// at pSetLayouts on VkDescriptorSetAllocateInfo
func (x *VkDescriptorSetAllocateInfo) WithPSetLayouts(y []VkDescriptorSetLayout) *VkDescriptorSetAllocateInfo {
	ptr := func(x *[]VkDescriptorSetLayout) **C.VkDescriptorSetLayout { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorSetLayout)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorSetLayout)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSetLayouts = *ptr
	return x
}

//VkSparseImageOpaqueMemoryBindInfo provides a go interface for VkSparseImageOpaqueMemoryBindInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageOpaqueMemoryBindInfo.html
type VkSparseImageOpaqueMemoryBindInfo C.struct_VkSparseImageOpaqueMemoryBindInfo

// NewVkSparseImageOpaqueMemoryBindInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseImageOpaqueMemoryBindInfo() *VkSparseImageOpaqueMemoryBindInfo {
	sz := unsafe.Sizeof(VkSparseImageOpaqueMemoryBindInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseImageOpaqueMemoryBindInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSparseImageOpaqueMemoryBindInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseImageOpaqueMemoryBindInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseImageOpaqueMemoryBindInfo) AsPtr() *VkSparseImageOpaqueMemoryBindInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseImageOpaqueMemoryBindInfo) AsCPtr() *VkSparseImageOpaqueMemoryBindInfo {
	clone := newVkSparseImageOpaqueMemoryBindInfo()
	*clone = *x
	return clone
}

// Image returns the value of image from VkSparseImageOpaqueMemoryBindInfo
func (x VkSparseImageOpaqueMemoryBindInfo) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkSparseImageOpaqueMemoryBindInfo
func (x *VkSparseImageOpaqueMemoryBindInfo) WithImage(y VkImage) *VkSparseImageOpaqueMemoryBindInfo {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

// BindCount returns the value of bindCount from VkSparseImageOpaqueMemoryBindInfo
func (x VkSparseImageOpaqueMemoryBindInfo) BindCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bindCount)
	return *ptr
}

// WithBindCount copies the provided value into C space and stores it
// at bindCount on VkSparseImageOpaqueMemoryBindInfo
func (x *VkSparseImageOpaqueMemoryBindInfo) WithBindCount(y uint32) *VkSparseImageOpaqueMemoryBindInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bindCount = *ptr
	return x
}

// PBinds returns the value of pBinds from VkSparseImageOpaqueMemoryBindInfo
func (x VkSparseImageOpaqueMemoryBindInfo) PBinds() []VkSparseMemoryBind {
	ptr := func(x **C.VkSparseMemoryBind) *[]VkSparseMemoryBind { /* Slice */
		slc := unsafe.Slice((*VkSparseMemoryBind)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pBinds)
	return *ptr
}

// WithPBinds copies the provided value into C space and stores it
// at pBinds on VkSparseImageOpaqueMemoryBindInfo
func (x *VkSparseImageOpaqueMemoryBindInfo) WithPBinds(y []VkSparseMemoryBind) *VkSparseImageOpaqueMemoryBindInfo {
	ptr := func(x *[]VkSparseMemoryBind) **C.VkSparseMemoryBind { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseMemoryBind)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseMemoryBind)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pBinds = *ptr
	return x
}

//VkSparseImageMemoryRequirements provides a go interface for VkSparseImageMemoryRequirements.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryRequirements.html
type VkSparseImageMemoryRequirements C.struct_VkSparseImageMemoryRequirements

// NewVkSparseImageMemoryRequirements allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseImageMemoryRequirements() *VkSparseImageMemoryRequirements {
	sz := unsafe.Sizeof(VkSparseImageMemoryRequirements{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseImageMemoryRequirements)(ptr)
}

// Free releases the memory allocated by the NewVkSparseImageMemoryRequirements method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseImageMemoryRequirements) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseImageMemoryRequirements) AsPtr() *VkSparseImageMemoryRequirements { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseImageMemoryRequirements) AsCPtr() *VkSparseImageMemoryRequirements {
	clone := newVkSparseImageMemoryRequirements()
	*clone = *x
	return clone
}

// FormatProperties returns the value of formatProperties from VkSparseImageMemoryRequirements
func (x VkSparseImageMemoryRequirements) FormatProperties() VkSparseImageFormatProperties {
	ptr := /* Identifier */ (*VkSparseImageFormatProperties)(&x.formatProperties)
	return *ptr
}

// ImageMipTailFirstLod returns the value of imageMipTailFirstLod from VkSparseImageMemoryRequirements
func (x VkSparseImageMemoryRequirements) ImageMipTailFirstLod() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.imageMipTailFirstLod)
	return *ptr
}

// ImageMipTailSize returns the value of imageMipTailSize from VkSparseImageMemoryRequirements
func (x VkSparseImageMemoryRequirements) ImageMipTailSize() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.imageMipTailSize)
	return *ptr
}

// ImageMipTailOffset returns the value of imageMipTailOffset from VkSparseImageMemoryRequirements
func (x VkSparseImageMemoryRequirements) ImageMipTailOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.imageMipTailOffset)
	return *ptr
}

// ImageMipTailStride returns the value of imageMipTailStride from VkSparseImageMemoryRequirements
func (x VkSparseImageMemoryRequirements) ImageMipTailStride() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.imageMipTailStride)
	return *ptr
}

//VkBufferViewCreateInfo provides a go interface for VkBufferViewCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferViewCreateInfo.html
type VkBufferViewCreateInfo C.struct_VkBufferViewCreateInfo

// NewVkBufferViewCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferViewCreateInfo() *VkBufferViewCreateInfo {
	sz := unsafe.Sizeof(VkBufferViewCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferViewCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBufferViewCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferViewCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferViewCreateInfo) AsPtr() *VkBufferViewCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferViewCreateInfo) AsCPtr() *VkBufferViewCreateInfo {
	clone := newVkBufferViewCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBufferViewCreateInfo
func (x VkBufferViewCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBufferViewCreateInfo) WithDefaultSType() *VkBufferViewCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBufferViewCreateInfo
func (x *VkBufferViewCreateInfo) WithSType(y VkStructureType) *VkBufferViewCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBufferViewCreateInfo
func (x VkBufferViewCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBufferViewCreateInfo
func (x *VkBufferViewCreateInfo) WithPNext(y unsafe.Pointer) *VkBufferViewCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkBufferViewCreateInfo
func (x VkBufferViewCreateInfo) Flags() VkBufferViewCreateFlags {
	ptr := /* Identifier */ (*VkBufferViewCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkBufferViewCreateInfo
func (x *VkBufferViewCreateInfo) WithFlags(y VkBufferViewCreateFlags) *VkBufferViewCreateInfo {
	ptr := /* Identifier */ (*C.VkBufferViewCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Buffer returns the value of buffer from VkBufferViewCreateInfo
func (x VkBufferViewCreateInfo) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkBufferViewCreateInfo
func (x *VkBufferViewCreateInfo) WithBuffer(y VkBuffer) *VkBufferViewCreateInfo {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

// Format returns the value of format from VkBufferViewCreateInfo
func (x VkBufferViewCreateInfo) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkBufferViewCreateInfo
func (x *VkBufferViewCreateInfo) WithFormat(y VkFormat) *VkBufferViewCreateInfo {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Offset returns the value of offset from VkBufferViewCreateInfo
func (x VkBufferViewCreateInfo) Offset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkBufferViewCreateInfo
func (x *VkBufferViewCreateInfo) WithOffset(y VkDeviceSize) *VkBufferViewCreateInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.offset = *ptr
	return x
}

// Range returns the value of range from VkBufferViewCreateInfo
func (x VkBufferViewCreateInfo) Range() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x._range)
	return *ptr
}

// WithRange copies the provided value into C space and stores it
// at range on VkBufferViewCreateInfo
func (x *VkBufferViewCreateInfo) WithRange(y VkDeviceSize) *VkBufferViewCreateInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x._range = *ptr
	return x
}

//VkSparseImageMemoryBindInfo provides a go interface for VkSparseImageMemoryBindInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryBindInfo.html
type VkSparseImageMemoryBindInfo C.struct_VkSparseImageMemoryBindInfo

// NewVkSparseImageMemoryBindInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseImageMemoryBindInfo() *VkSparseImageMemoryBindInfo {
	sz := unsafe.Sizeof(VkSparseImageMemoryBindInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseImageMemoryBindInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSparseImageMemoryBindInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseImageMemoryBindInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseImageMemoryBindInfo) AsPtr() *VkSparseImageMemoryBindInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseImageMemoryBindInfo) AsCPtr() *VkSparseImageMemoryBindInfo {
	clone := newVkSparseImageMemoryBindInfo()
	*clone = *x
	return clone
}

// Image returns the value of image from VkSparseImageMemoryBindInfo
func (x VkSparseImageMemoryBindInfo) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkSparseImageMemoryBindInfo
func (x *VkSparseImageMemoryBindInfo) WithImage(y VkImage) *VkSparseImageMemoryBindInfo {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

// BindCount returns the value of bindCount from VkSparseImageMemoryBindInfo
func (x VkSparseImageMemoryBindInfo) BindCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bindCount)
	return *ptr
}

// WithBindCount copies the provided value into C space and stores it
// at bindCount on VkSparseImageMemoryBindInfo
func (x *VkSparseImageMemoryBindInfo) WithBindCount(y uint32) *VkSparseImageMemoryBindInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bindCount = *ptr
	return x
}

// PBinds returns the value of pBinds from VkSparseImageMemoryBindInfo
func (x VkSparseImageMemoryBindInfo) PBinds() []VkSparseImageMemoryBind {
	ptr := func(x **C.VkSparseImageMemoryBind) *[]VkSparseImageMemoryBind { /* Slice */
		slc := unsafe.Slice((*VkSparseImageMemoryBind)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pBinds)
	return *ptr
}

// WithPBinds copies the provided value into C space and stores it
// at pBinds on VkSparseImageMemoryBindInfo
func (x *VkSparseImageMemoryBindInfo) WithPBinds(y []VkSparseImageMemoryBind) *VkSparseImageMemoryBindInfo {
	ptr := func(x *[]VkSparseImageMemoryBind) **C.VkSparseImageMemoryBind { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseImageMemoryBind)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseImageMemoryBind)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pBinds = *ptr
	return x
}

//VkDescriptorPoolSize provides a go interface for VkDescriptorPoolSize.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolSize.html
type VkDescriptorPoolSize C.struct_VkDescriptorPoolSize

// NewVkDescriptorPoolSize allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorPoolSize() *VkDescriptorPoolSize {
	sz := unsafe.Sizeof(VkDescriptorPoolSize{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorPoolSize)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorPoolSize method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorPoolSize) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorPoolSize) AsPtr() *VkDescriptorPoolSize { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorPoolSize) AsCPtr() *VkDescriptorPoolSize {
	clone := newVkDescriptorPoolSize()
	*clone = *x
	return clone
}

// Type returns the value of type from VkDescriptorPoolSize
func (x VkDescriptorPoolSize) Type() VkDescriptorType {
	ptr := /* Identifier */ (*VkDescriptorType)(&x._type)
	return *ptr
}

// WithType copies the provided value into C space and stores it
// at type on VkDescriptorPoolSize
func (x *VkDescriptorPoolSize) WithType(y VkDescriptorType) *VkDescriptorPoolSize {
	ptr := /* Identifier */ (*C.VkDescriptorType)(&y)
	x._type = *ptr
	return x
}

// DescriptorCount returns the value of descriptorCount from VkDescriptorPoolSize
func (x VkDescriptorPoolSize) DescriptorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorCount)
	return *ptr
}

// WithDescriptorCount copies the provided value into C space and stores it
// at descriptorCount on VkDescriptorPoolSize
func (x *VkDescriptorPoolSize) WithDescriptorCount(y uint32) *VkDescriptorPoolSize {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorCount = *ptr
	return x
}

//VkSparseImageMemoryBind provides a go interface for VkSparseImageMemoryBind.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryBind.html
type VkSparseImageMemoryBind C.struct_VkSparseImageMemoryBind

// NewVkSparseImageMemoryBind allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseImageMemoryBind() *VkSparseImageMemoryBind {
	sz := unsafe.Sizeof(VkSparseImageMemoryBind{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseImageMemoryBind)(ptr)
}

// Free releases the memory allocated by the NewVkSparseImageMemoryBind method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseImageMemoryBind) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseImageMemoryBind) AsPtr() *VkSparseImageMemoryBind { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseImageMemoryBind) AsCPtr() *VkSparseImageMemoryBind {
	clone := newVkSparseImageMemoryBind()
	*clone = *x
	return clone
}

// Subresource returns the value of subresource from VkSparseImageMemoryBind
func (x VkSparseImageMemoryBind) Subresource() VkImageSubresource {
	ptr := /* Identifier */ (*VkImageSubresource)(&x.subresource)
	return *ptr
}

// WithSubresource copies the provided value into C space and stores it
// at subresource on VkSparseImageMemoryBind
func (x *VkSparseImageMemoryBind) WithSubresource(y VkImageSubresource) *VkSparseImageMemoryBind {
	ptr := /* Identifier */ (*C.VkImageSubresource)(&y)
	x.subresource = *ptr
	return x
}

// Offset returns the value of offset from VkSparseImageMemoryBind
func (x VkSparseImageMemoryBind) Offset() VkOffset3D {
	ptr := /* Identifier */ (*VkOffset3D)(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkSparseImageMemoryBind
func (x *VkSparseImageMemoryBind) WithOffset(y VkOffset3D) *VkSparseImageMemoryBind {
	ptr := /* Identifier */ (*C.VkOffset3D)(&y)
	x.offset = *ptr
	return x
}

// Extent returns the value of extent from VkSparseImageMemoryBind
func (x VkSparseImageMemoryBind) Extent() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.extent)
	return *ptr
}

// WithExtent copies the provided value into C space and stores it
// at extent on VkSparseImageMemoryBind
func (x *VkSparseImageMemoryBind) WithExtent(y VkExtent3D) *VkSparseImageMemoryBind {
	ptr := /* Identifier */ (*C.VkExtent3D)(&y)
	x.extent = *ptr
	return x
}

// Memory returns the value of memory from VkSparseImageMemoryBind
func (x VkSparseImageMemoryBind) Memory() VkDeviceMemory {
	ptr := func(x *C.VkDeviceMemory) *VkDeviceMemory { /* Handle */ return (*VkDeviceMemory)(unsafe.Pointer(x)) }(&x.memory)
	return *ptr
}

// WithMemory copies the provided value into C space and stores it
// at memory on VkSparseImageMemoryBind
func (x *VkSparseImageMemoryBind) WithMemory(y VkDeviceMemory) *VkSparseImageMemoryBind {
	ptr := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&y)
	x.memory = *ptr
	return x
}

// MemoryOffset returns the value of memoryOffset from VkSparseImageMemoryBind
func (x VkSparseImageMemoryBind) MemoryOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.memoryOffset)
	return *ptr
}

// WithMemoryOffset copies the provided value into C space and stores it
// at memoryOffset on VkSparseImageMemoryBind
func (x *VkSparseImageMemoryBind) WithMemoryOffset(y VkDeviceSize) *VkSparseImageMemoryBind {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.memoryOffset = *ptr
	return x
}

// Flags returns the value of flags from VkSparseImageMemoryBind
func (x VkSparseImageMemoryBind) Flags() VkSparseMemoryBindFlags {
	ptr := /* Identifier */ (*VkSparseMemoryBindFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSparseImageMemoryBind
func (x *VkSparseImageMemoryBind) WithFlags(y VkSparseMemoryBindFlags) *VkSparseImageMemoryBind {
	ptr := /* Identifier */ (*C.VkSparseMemoryBindFlags)(&y)
	x.flags = *ptr
	return x
}

//VkSparseImageFormatProperties provides a go interface for VkSparseImageFormatProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageFormatProperties.html
type VkSparseImageFormatProperties C.struct_VkSparseImageFormatProperties

// NewVkSparseImageFormatProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseImageFormatProperties() *VkSparseImageFormatProperties {
	sz := unsafe.Sizeof(VkSparseImageFormatProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseImageFormatProperties)(ptr)
}

// Free releases the memory allocated by the NewVkSparseImageFormatProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseImageFormatProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseImageFormatProperties) AsPtr() *VkSparseImageFormatProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseImageFormatProperties) AsCPtr() *VkSparseImageFormatProperties {
	clone := newVkSparseImageFormatProperties()
	*clone = *x
	return clone
}

// AspectMask returns the value of aspectMask from VkSparseImageFormatProperties
func (x VkSparseImageFormatProperties) AspectMask() VkImageAspectFlags {
	ptr := /* Identifier */ (*VkImageAspectFlags)(&x.aspectMask)
	return *ptr
}

// ImageGranularity returns the value of imageGranularity from VkSparseImageFormatProperties
func (x VkSparseImageFormatProperties) ImageGranularity() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.imageGranularity)
	return *ptr
}

// Flags returns the value of flags from VkSparseImageFormatProperties
func (x VkSparseImageFormatProperties) Flags() VkSparseImageFormatFlags {
	ptr := /* Identifier */ (*VkSparseImageFormatFlags)(&x.flags)
	return *ptr
}

//VkImageCreateInfo provides a go interface for VkImageCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCreateInfo.html
type VkImageCreateInfo C.struct_VkImageCreateInfo

// NewVkImageCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageCreateInfo() *VkImageCreateInfo {
	sz := unsafe.Sizeof(VkImageCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkImageCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageCreateInfo) AsPtr() *VkImageCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageCreateInfo) AsCPtr() *VkImageCreateInfo {
	clone := newVkImageCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageCreateInfo
func (x VkImageCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageCreateInfo) WithDefaultSType() *VkImageCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageCreateInfo
func (x *VkImageCreateInfo) WithSType(y VkStructureType) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageCreateInfo
func (x VkImageCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageCreateInfo
func (x *VkImageCreateInfo) WithPNext(y unsafe.Pointer) *VkImageCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkImageCreateInfo
func (x VkImageCreateInfo) Flags() VkImageCreateFlags {
	ptr := /* Identifier */ (*VkImageCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkImageCreateInfo
func (x *VkImageCreateInfo) WithFlags(y VkImageCreateFlags) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkImageCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// ImageType returns the value of imageType from VkImageCreateInfo
func (x VkImageCreateInfo) ImageType() VkImageType {
	ptr := /* Identifier */ (*VkImageType)(&x.imageType)
	return *ptr
}

// WithImageType copies the provided value into C space and stores it
// at imageType on VkImageCreateInfo
func (x *VkImageCreateInfo) WithImageType(y VkImageType) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkImageType)(&y)
	x.imageType = *ptr
	return x
}

// Format returns the value of format from VkImageCreateInfo
func (x VkImageCreateInfo) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkImageCreateInfo
func (x *VkImageCreateInfo) WithFormat(y VkFormat) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Extent returns the value of extent from VkImageCreateInfo
func (x VkImageCreateInfo) Extent() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.extent)
	return *ptr
}

// WithExtent copies the provided value into C space and stores it
// at extent on VkImageCreateInfo
func (x *VkImageCreateInfo) WithExtent(y VkExtent3D) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkExtent3D)(&y)
	x.extent = *ptr
	return x
}

// MipLevels returns the value of mipLevels from VkImageCreateInfo
func (x VkImageCreateInfo) MipLevels() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.mipLevels)
	return *ptr
}

// WithMipLevels copies the provided value into C space and stores it
// at mipLevels on VkImageCreateInfo
func (x *VkImageCreateInfo) WithMipLevels(y uint32) *VkImageCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.mipLevels = *ptr
	return x
}

// ArrayLayers returns the value of arrayLayers from VkImageCreateInfo
func (x VkImageCreateInfo) ArrayLayers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.arrayLayers)
	return *ptr
}

// WithArrayLayers copies the provided value into C space and stores it
// at arrayLayers on VkImageCreateInfo
func (x *VkImageCreateInfo) WithArrayLayers(y uint32) *VkImageCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.arrayLayers = *ptr
	return x
}

// Samples returns the value of samples from VkImageCreateInfo
func (x VkImageCreateInfo) Samples() VkSampleCountFlagBits {
	ptr := /* Identifier */ (*VkSampleCountFlagBits)(&x.samples)
	return *ptr
}

// WithSamples copies the provided value into C space and stores it
// at samples on VkImageCreateInfo
func (x *VkImageCreateInfo) WithSamples(y VkSampleCountFlagBits) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkSampleCountFlagBits)(&y)
	x.samples = *ptr
	return x
}

// Tiling returns the value of tiling from VkImageCreateInfo
func (x VkImageCreateInfo) Tiling() VkImageTiling {
	ptr := /* Identifier */ (*VkImageTiling)(&x.tiling)
	return *ptr
}

// WithTiling copies the provided value into C space and stores it
// at tiling on VkImageCreateInfo
func (x *VkImageCreateInfo) WithTiling(y VkImageTiling) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkImageTiling)(&y)
	x.tiling = *ptr
	return x
}

// Usage returns the value of usage from VkImageCreateInfo
func (x VkImageCreateInfo) Usage() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.usage)
	return *ptr
}

// WithUsage copies the provided value into C space and stores it
// at usage on VkImageCreateInfo
func (x *VkImageCreateInfo) WithUsage(y VkImageUsageFlags) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkImageUsageFlags)(&y)
	x.usage = *ptr
	return x
}

// SharingMode returns the value of sharingMode from VkImageCreateInfo
func (x VkImageCreateInfo) SharingMode() VkSharingMode {
	ptr := /* Identifier */ (*VkSharingMode)(&x.sharingMode)
	return *ptr
}

// WithSharingMode copies the provided value into C space and stores it
// at sharingMode on VkImageCreateInfo
func (x *VkImageCreateInfo) WithSharingMode(y VkSharingMode) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkSharingMode)(&y)
	x.sharingMode = *ptr
	return x
}

// QueueFamilyIndexCount returns the value of queueFamilyIndexCount from VkImageCreateInfo
func (x VkImageCreateInfo) QueueFamilyIndexCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueFamilyIndexCount)
	return *ptr
}

// WithQueueFamilyIndexCount copies the provided value into C space and stores it
// at queueFamilyIndexCount on VkImageCreateInfo
func (x *VkImageCreateInfo) WithQueueFamilyIndexCount(y uint32) *VkImageCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueFamilyIndexCount = *ptr
	return x
}

// PQueueFamilyIndices returns the value of pQueueFamilyIndices from VkImageCreateInfo
func (x VkImageCreateInfo) PQueueFamilyIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pQueueFamilyIndices)
	return *ptr
}

// WithPQueueFamilyIndices copies the provided value into C space and stores it
// at pQueueFamilyIndices on VkImageCreateInfo
func (x *VkImageCreateInfo) WithPQueueFamilyIndices(y []uint32) *VkImageCreateInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pQueueFamilyIndices = *ptr
	return x
}

// InitialLayout returns the value of initialLayout from VkImageCreateInfo
func (x VkImageCreateInfo) InitialLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.initialLayout)
	return *ptr
}

// WithInitialLayout copies the provided value into C space and stores it
// at initialLayout on VkImageCreateInfo
func (x *VkImageCreateInfo) WithInitialLayout(y VkImageLayout) *VkImageCreateInfo {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.initialLayout = *ptr
	return x
}

//VkImageSubresource provides a go interface for VkImageSubresource.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresource.html
type VkImageSubresource C.struct_VkImageSubresource

// NewVkImageSubresource allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageSubresource() *VkImageSubresource {
	sz := unsafe.Sizeof(VkImageSubresource{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageSubresource)(ptr)
}

// Free releases the memory allocated by the NewVkImageSubresource method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageSubresource) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageSubresource) AsPtr() *VkImageSubresource { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageSubresource) AsCPtr() *VkImageSubresource {
	clone := newVkImageSubresource()
	*clone = *x
	return clone
}

// AspectMask returns the value of aspectMask from VkImageSubresource
func (x VkImageSubresource) AspectMask() VkImageAspectFlags {
	ptr := /* Identifier */ (*VkImageAspectFlags)(&x.aspectMask)
	return *ptr
}

// WithAspectMask copies the provided value into C space and stores it
// at aspectMask on VkImageSubresource
func (x *VkImageSubresource) WithAspectMask(y VkImageAspectFlags) *VkImageSubresource {
	ptr := /* Identifier */ (*C.VkImageAspectFlags)(&y)
	x.aspectMask = *ptr
	return x
}

// MipLevel returns the value of mipLevel from VkImageSubresource
func (x VkImageSubresource) MipLevel() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.mipLevel)
	return *ptr
}

// WithMipLevel copies the provided value into C space and stores it
// at mipLevel on VkImageSubresource
func (x *VkImageSubresource) WithMipLevel(y uint32) *VkImageSubresource {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.mipLevel = *ptr
	return x
}

// ArrayLayer returns the value of arrayLayer from VkImageSubresource
func (x VkImageSubresource) ArrayLayer() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.arrayLayer)
	return *ptr
}

// WithArrayLayer copies the provided value into C space and stores it
// at arrayLayer on VkImageSubresource
func (x *VkImageSubresource) WithArrayLayer(y uint32) *VkImageSubresource {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.arrayLayer = *ptr
	return x
}

//VkSubresourceLayout provides a go interface for VkSubresourceLayout.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubresourceLayout.html
type VkSubresourceLayout C.struct_VkSubresourceLayout

// NewVkSubresourceLayout allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubresourceLayout() *VkSubresourceLayout {
	sz := unsafe.Sizeof(VkSubresourceLayout{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubresourceLayout)(ptr)
}

// Free releases the memory allocated by the NewVkSubresourceLayout method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubresourceLayout) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubresourceLayout) AsPtr() *VkSubresourceLayout { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubresourceLayout) AsCPtr() *VkSubresourceLayout {
	clone := newVkSubresourceLayout()
	*clone = *x
	return clone
}

// Offset returns the value of offset from VkSubresourceLayout
func (x VkSubresourceLayout) Offset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.offset)
	return *ptr
}

// Size returns the value of size from VkSubresourceLayout
func (x VkSubresourceLayout) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// RowPitch returns the value of rowPitch from VkSubresourceLayout
func (x VkSubresourceLayout) RowPitch() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.rowPitch)
	return *ptr
}

// ArrayPitch returns the value of arrayPitch from VkSubresourceLayout
func (x VkSubresourceLayout) ArrayPitch() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.arrayPitch)
	return *ptr
}

// DepthPitch returns the value of depthPitch from VkSubresourceLayout
func (x VkSubresourceLayout) DepthPitch() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.depthPitch)
	return *ptr
}

//VkDescriptorPoolCreateInfo provides a go interface for VkDescriptorPoolCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolCreateInfo.html
type VkDescriptorPoolCreateInfo C.struct_VkDescriptorPoolCreateInfo

// NewVkDescriptorPoolCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorPoolCreateInfo() *VkDescriptorPoolCreateInfo {
	sz := unsafe.Sizeof(VkDescriptorPoolCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorPoolCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorPoolCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorPoolCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorPoolCreateInfo) AsPtr() *VkDescriptorPoolCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorPoolCreateInfo) AsCPtr() *VkDescriptorPoolCreateInfo {
	clone := newVkDescriptorPoolCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorPoolCreateInfo
func (x VkDescriptorPoolCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorPoolCreateInfo) WithDefaultSType() *VkDescriptorPoolCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorPoolCreateInfo
func (x *VkDescriptorPoolCreateInfo) WithSType(y VkStructureType) *VkDescriptorPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorPoolCreateInfo
func (x VkDescriptorPoolCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorPoolCreateInfo
func (x *VkDescriptorPoolCreateInfo) WithPNext(y unsafe.Pointer) *VkDescriptorPoolCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDescriptorPoolCreateInfo
func (x VkDescriptorPoolCreateInfo) Flags() VkDescriptorPoolCreateFlags {
	ptr := /* Identifier */ (*VkDescriptorPoolCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDescriptorPoolCreateInfo
func (x *VkDescriptorPoolCreateInfo) WithFlags(y VkDescriptorPoolCreateFlags) *VkDescriptorPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkDescriptorPoolCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// MaxSets returns the value of maxSets from VkDescriptorPoolCreateInfo
func (x VkDescriptorPoolCreateInfo) MaxSets() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxSets)
	return *ptr
}

// WithMaxSets copies the provided value into C space and stores it
// at maxSets on VkDescriptorPoolCreateInfo
func (x *VkDescriptorPoolCreateInfo) WithMaxSets(y uint32) *VkDescriptorPoolCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.maxSets = *ptr
	return x
}

// PoolSizeCount returns the value of poolSizeCount from VkDescriptorPoolCreateInfo
func (x VkDescriptorPoolCreateInfo) PoolSizeCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.poolSizeCount)
	return *ptr
}

// WithPoolSizeCount copies the provided value into C space and stores it
// at poolSizeCount on VkDescriptorPoolCreateInfo
func (x *VkDescriptorPoolCreateInfo) WithPoolSizeCount(y uint32) *VkDescriptorPoolCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.poolSizeCount = *ptr
	return x
}

// PPoolSizes returns the value of pPoolSizes from VkDescriptorPoolCreateInfo
func (x VkDescriptorPoolCreateInfo) PPoolSizes() []VkDescriptorPoolSize {
	ptr := func(x **C.VkDescriptorPoolSize) *[]VkDescriptorPoolSize { /* Slice */
		slc := unsafe.Slice((*VkDescriptorPoolSize)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pPoolSizes)
	return *ptr
}

// WithPPoolSizes copies the provided value into C space and stores it
// at pPoolSizes on VkDescriptorPoolCreateInfo
func (x *VkDescriptorPoolCreateInfo) WithPPoolSizes(y []VkDescriptorPoolSize) *VkDescriptorPoolCreateInfo {
	ptr := func(x *[]VkDescriptorPoolSize) **C.VkDescriptorPoolSize { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorPoolSize)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorPoolSize)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pPoolSizes = *ptr
	return x
}

//VkBindSparseInfo provides a go interface for VkBindSparseInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindSparseInfo.html
type VkBindSparseInfo C.struct_VkBindSparseInfo

// NewVkBindSparseInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBindSparseInfo() *VkBindSparseInfo {
	sz := unsafe.Sizeof(VkBindSparseInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBindSparseInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBindSparseInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBindSparseInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBindSparseInfo) AsPtr() *VkBindSparseInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBindSparseInfo) AsCPtr() *VkBindSparseInfo {
	clone := newVkBindSparseInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBindSparseInfo
func (x VkBindSparseInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBindSparseInfo) WithDefaultSType() *VkBindSparseInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BIND_SPARSE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBindSparseInfo
func (x *VkBindSparseInfo) WithSType(y VkStructureType) *VkBindSparseInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBindSparseInfo
func (x VkBindSparseInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBindSparseInfo
func (x *VkBindSparseInfo) WithPNext(y unsafe.Pointer) *VkBindSparseInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// WaitSemaphoreCount returns the value of waitSemaphoreCount from VkBindSparseInfo
func (x VkBindSparseInfo) WaitSemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.waitSemaphoreCount)
	return *ptr
}

// WithWaitSemaphoreCount copies the provided value into C space and stores it
// at waitSemaphoreCount on VkBindSparseInfo
func (x *VkBindSparseInfo) WithWaitSemaphoreCount(y uint32) *VkBindSparseInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.waitSemaphoreCount = *ptr
	return x
}

// PWaitSemaphores returns the value of pWaitSemaphores from VkBindSparseInfo
func (x VkBindSparseInfo) PWaitSemaphores() []VkSemaphore {
	ptr := func(x **C.VkSemaphore) *[]VkSemaphore { /* Slice */
		slc := unsafe.Slice((*VkSemaphore)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pWaitSemaphores)
	return *ptr
}

// WithPWaitSemaphores copies the provided value into C space and stores it
// at pWaitSemaphores on VkBindSparseInfo
func (x *VkBindSparseInfo) WithPWaitSemaphores(y []VkSemaphore) *VkBindSparseInfo {
	ptr := func(x *[]VkSemaphore) **C.VkSemaphore { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSemaphore)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSemaphore)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pWaitSemaphores = *ptr
	return x
}

// BufferBindCount returns the value of bufferBindCount from VkBindSparseInfo
func (x VkBindSparseInfo) BufferBindCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bufferBindCount)
	return *ptr
}

// WithBufferBindCount copies the provided value into C space and stores it
// at bufferBindCount on VkBindSparseInfo
func (x *VkBindSparseInfo) WithBufferBindCount(y uint32) *VkBindSparseInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bufferBindCount = *ptr
	return x
}

// PBufferBinds returns the value of pBufferBinds from VkBindSparseInfo
func (x VkBindSparseInfo) PBufferBinds() []VkSparseBufferMemoryBindInfo {
	ptr := func(x **C.VkSparseBufferMemoryBindInfo) *[]VkSparseBufferMemoryBindInfo { /* Slice */
		slc := unsafe.Slice((*VkSparseBufferMemoryBindInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pBufferBinds)
	return *ptr
}

// WithPBufferBinds copies the provided value into C space and stores it
// at pBufferBinds on VkBindSparseInfo
func (x *VkBindSparseInfo) WithPBufferBinds(y []VkSparseBufferMemoryBindInfo) *VkBindSparseInfo {
	ptr := func(x *[]VkSparseBufferMemoryBindInfo) **C.VkSparseBufferMemoryBindInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseBufferMemoryBindInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseBufferMemoryBindInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pBufferBinds = *ptr
	return x
}

// ImageOpaqueBindCount returns the value of imageOpaqueBindCount from VkBindSparseInfo
func (x VkBindSparseInfo) ImageOpaqueBindCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.imageOpaqueBindCount)
	return *ptr
}

// WithImageOpaqueBindCount copies the provided value into C space and stores it
// at imageOpaqueBindCount on VkBindSparseInfo
func (x *VkBindSparseInfo) WithImageOpaqueBindCount(y uint32) *VkBindSparseInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.imageOpaqueBindCount = *ptr
	return x
}

// PImageOpaqueBinds returns the value of pImageOpaqueBinds from VkBindSparseInfo
func (x VkBindSparseInfo) PImageOpaqueBinds() []VkSparseImageOpaqueMemoryBindInfo {
	ptr := func(x **C.VkSparseImageOpaqueMemoryBindInfo) *[]VkSparseImageOpaqueMemoryBindInfo { /* Slice */
		slc := unsafe.Slice((*VkSparseImageOpaqueMemoryBindInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pImageOpaqueBinds)
	return *ptr
}

// WithPImageOpaqueBinds copies the provided value into C space and stores it
// at pImageOpaqueBinds on VkBindSparseInfo
func (x *VkBindSparseInfo) WithPImageOpaqueBinds(y []VkSparseImageOpaqueMemoryBindInfo) *VkBindSparseInfo {
	ptr := func(x *[]VkSparseImageOpaqueMemoryBindInfo) **C.VkSparseImageOpaqueMemoryBindInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseImageOpaqueMemoryBindInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseImageOpaqueMemoryBindInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pImageOpaqueBinds = *ptr
	return x
}

// ImageBindCount returns the value of imageBindCount from VkBindSparseInfo
func (x VkBindSparseInfo) ImageBindCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.imageBindCount)
	return *ptr
}

// WithImageBindCount copies the provided value into C space and stores it
// at imageBindCount on VkBindSparseInfo
func (x *VkBindSparseInfo) WithImageBindCount(y uint32) *VkBindSparseInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.imageBindCount = *ptr
	return x
}

// PImageBinds returns the value of pImageBinds from VkBindSparseInfo
func (x VkBindSparseInfo) PImageBinds() []VkSparseImageMemoryBindInfo {
	ptr := func(x **C.VkSparseImageMemoryBindInfo) *[]VkSparseImageMemoryBindInfo { /* Slice */
		slc := unsafe.Slice((*VkSparseImageMemoryBindInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pImageBinds)
	return *ptr
}

// WithPImageBinds copies the provided value into C space and stores it
// at pImageBinds on VkBindSparseInfo
func (x *VkBindSparseInfo) WithPImageBinds(y []VkSparseImageMemoryBindInfo) *VkBindSparseInfo {
	ptr := func(x *[]VkSparseImageMemoryBindInfo) **C.VkSparseImageMemoryBindInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseImageMemoryBindInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseImageMemoryBindInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pImageBinds = *ptr
	return x
}

// SignalSemaphoreCount returns the value of signalSemaphoreCount from VkBindSparseInfo
func (x VkBindSparseInfo) SignalSemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.signalSemaphoreCount)
	return *ptr
}

// WithSignalSemaphoreCount copies the provided value into C space and stores it
// at signalSemaphoreCount on VkBindSparseInfo
func (x *VkBindSparseInfo) WithSignalSemaphoreCount(y uint32) *VkBindSparseInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.signalSemaphoreCount = *ptr
	return x
}

// PSignalSemaphores returns the value of pSignalSemaphores from VkBindSparseInfo
func (x VkBindSparseInfo) PSignalSemaphores() []VkSemaphore {
	ptr := func(x **C.VkSemaphore) *[]VkSemaphore { /* Slice */
		slc := unsafe.Slice((*VkSemaphore)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSignalSemaphores)
	return *ptr
}

// WithPSignalSemaphores copies the provided value into C space and stores it
// at pSignalSemaphores on VkBindSparseInfo
func (x *VkBindSparseInfo) WithPSignalSemaphores(y []VkSemaphore) *VkBindSparseInfo {
	ptr := func(x *[]VkSemaphore) **C.VkSemaphore { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSemaphore)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSemaphore)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSignalSemaphores = *ptr
	return x
}

//VkComponentMapping provides a go interface for VkComponentMapping.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkComponentMapping.html
type VkComponentMapping C.struct_VkComponentMapping

// NewVkComponentMapping allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkComponentMapping() *VkComponentMapping {
	sz := unsafe.Sizeof(VkComponentMapping{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkComponentMapping)(ptr)
}

// Free releases the memory allocated by the NewVkComponentMapping method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkComponentMapping) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkComponentMapping) AsPtr() *VkComponentMapping { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkComponentMapping) AsCPtr() *VkComponentMapping {
	clone := newVkComponentMapping()
	*clone = *x
	return clone
}

// R returns the value of r from VkComponentMapping
func (x VkComponentMapping) R() VkComponentSwizzle {
	ptr := /* Identifier */ (*VkComponentSwizzle)(&x.r)
	return *ptr
}

// WithR copies the provided value into C space and stores it
// at r on VkComponentMapping
func (x *VkComponentMapping) WithR(y VkComponentSwizzle) *VkComponentMapping {
	ptr := /* Identifier */ (*C.VkComponentSwizzle)(&y)
	x.r = *ptr
	return x
}

// G returns the value of g from VkComponentMapping
func (x VkComponentMapping) G() VkComponentSwizzle {
	ptr := /* Identifier */ (*VkComponentSwizzle)(&x.g)
	return *ptr
}

// WithG copies the provided value into C space and stores it
// at g on VkComponentMapping
func (x *VkComponentMapping) WithG(y VkComponentSwizzle) *VkComponentMapping {
	ptr := /* Identifier */ (*C.VkComponentSwizzle)(&y)
	x.g = *ptr
	return x
}

// B returns the value of b from VkComponentMapping
func (x VkComponentMapping) B() VkComponentSwizzle {
	ptr := /* Identifier */ (*VkComponentSwizzle)(&x.b)
	return *ptr
}

// WithB copies the provided value into C space and stores it
// at b on VkComponentMapping
func (x *VkComponentMapping) WithB(y VkComponentSwizzle) *VkComponentMapping {
	ptr := /* Identifier */ (*C.VkComponentSwizzle)(&y)
	x.b = *ptr
	return x
}

// A returns the value of a from VkComponentMapping
func (x VkComponentMapping) A() VkComponentSwizzle {
	ptr := /* Identifier */ (*VkComponentSwizzle)(&x.a)
	return *ptr
}

// WithA copies the provided value into C space and stores it
// at a on VkComponentMapping
func (x *VkComponentMapping) WithA(y VkComponentSwizzle) *VkComponentMapping {
	ptr := /* Identifier */ (*C.VkComponentSwizzle)(&y)
	x.a = *ptr
	return x
}

//VkMemoryRequirements provides a go interface for VkMemoryRequirements.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryRequirements.html
type VkMemoryRequirements C.struct_VkMemoryRequirements

// NewVkMemoryRequirements allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryRequirements() *VkMemoryRequirements {
	sz := unsafe.Sizeof(VkMemoryRequirements{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryRequirements)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryRequirements method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryRequirements) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryRequirements) AsPtr() *VkMemoryRequirements { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryRequirements) AsCPtr() *VkMemoryRequirements {
	clone := newVkMemoryRequirements()
	*clone = *x
	return clone
}

// Size returns the value of size from VkMemoryRequirements
func (x VkMemoryRequirements) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// Alignment returns the value of alignment from VkMemoryRequirements
func (x VkMemoryRequirements) Alignment() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.alignment)
	return *ptr
}

// MemoryTypeBits returns the value of memoryTypeBits from VkMemoryRequirements
func (x VkMemoryRequirements) MemoryTypeBits() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.memoryTypeBits)
	return *ptr
}

//VkImageSubresourceRange provides a go interface for VkImageSubresourceRange.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresourceRange.html
type VkImageSubresourceRange C.struct_VkImageSubresourceRange

// NewVkImageSubresourceRange allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageSubresourceRange() *VkImageSubresourceRange {
	sz := unsafe.Sizeof(VkImageSubresourceRange{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageSubresourceRange)(ptr)
}

// Free releases the memory allocated by the NewVkImageSubresourceRange method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageSubresourceRange) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageSubresourceRange) AsPtr() *VkImageSubresourceRange { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageSubresourceRange) AsCPtr() *VkImageSubresourceRange {
	clone := newVkImageSubresourceRange()
	*clone = *x
	return clone
}

// AspectMask returns the value of aspectMask from VkImageSubresourceRange
func (x VkImageSubresourceRange) AspectMask() VkImageAspectFlags {
	ptr := /* Identifier */ (*VkImageAspectFlags)(&x.aspectMask)
	return *ptr
}

// WithAspectMask copies the provided value into C space and stores it
// at aspectMask on VkImageSubresourceRange
func (x *VkImageSubresourceRange) WithAspectMask(y VkImageAspectFlags) *VkImageSubresourceRange {
	ptr := /* Identifier */ (*C.VkImageAspectFlags)(&y)
	x.aspectMask = *ptr
	return x
}

// BaseMipLevel returns the value of baseMipLevel from VkImageSubresourceRange
func (x VkImageSubresourceRange) BaseMipLevel() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.baseMipLevel)
	return *ptr
}

// WithBaseMipLevel copies the provided value into C space and stores it
// at baseMipLevel on VkImageSubresourceRange
func (x *VkImageSubresourceRange) WithBaseMipLevel(y uint32) *VkImageSubresourceRange {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.baseMipLevel = *ptr
	return x
}

// LevelCount returns the value of levelCount from VkImageSubresourceRange
func (x VkImageSubresourceRange) LevelCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.levelCount)
	return *ptr
}

// WithLevelCount copies the provided value into C space and stores it
// at levelCount on VkImageSubresourceRange
func (x *VkImageSubresourceRange) WithLevelCount(y uint32) *VkImageSubresourceRange {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.levelCount = *ptr
	return x
}

// BaseArrayLayer returns the value of baseArrayLayer from VkImageSubresourceRange
func (x VkImageSubresourceRange) BaseArrayLayer() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.baseArrayLayer)
	return *ptr
}

// WithBaseArrayLayer copies the provided value into C space and stores it
// at baseArrayLayer on VkImageSubresourceRange
func (x *VkImageSubresourceRange) WithBaseArrayLayer(y uint32) *VkImageSubresourceRange {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.baseArrayLayer = *ptr
	return x
}

// LayerCount returns the value of layerCount from VkImageSubresourceRange
func (x VkImageSubresourceRange) LayerCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.layerCount)
	return *ptr
}

// WithLayerCount copies the provided value into C space and stores it
// at layerCount on VkImageSubresourceRange
func (x *VkImageSubresourceRange) WithLayerCount(y uint32) *VkImageSubresourceRange {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.layerCount = *ptr
	return x
}

//VkFramebufferCreateInfo provides a go interface for VkFramebufferCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferCreateInfo.html
type VkFramebufferCreateInfo C.struct_VkFramebufferCreateInfo

// NewVkFramebufferCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkFramebufferCreateInfo() *VkFramebufferCreateInfo {
	sz := unsafe.Sizeof(VkFramebufferCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkFramebufferCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkFramebufferCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkFramebufferCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkFramebufferCreateInfo) AsPtr() *VkFramebufferCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkFramebufferCreateInfo) AsCPtr() *VkFramebufferCreateInfo {
	clone := newVkFramebufferCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkFramebufferCreateInfo) WithDefaultSType() *VkFramebufferCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithSType(y VkStructureType) *VkFramebufferCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithPNext(y unsafe.Pointer) *VkFramebufferCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) Flags() VkFramebufferCreateFlags {
	ptr := /* Identifier */ (*VkFramebufferCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithFlags(y VkFramebufferCreateFlags) *VkFramebufferCreateInfo {
	ptr := /* Identifier */ (*C.VkFramebufferCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// RenderPass returns the value of renderPass from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) RenderPass() VkRenderPass {
	ptr := func(x *C.VkRenderPass) *VkRenderPass { /* Handle */ return (*VkRenderPass)(unsafe.Pointer(x)) }(&x.renderPass)
	return *ptr
}

// WithRenderPass copies the provided value into C space and stores it
// at renderPass on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithRenderPass(y VkRenderPass) *VkFramebufferCreateInfo {
	ptr := func(x *VkRenderPass) *C.VkRenderPass { /* Handle */ return (*C.VkRenderPass)(unsafe.Pointer(x)) }(&y)
	x.renderPass = *ptr
	return x
}

// AttachmentCount returns the value of attachmentCount from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) AttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachmentCount)
	return *ptr
}

// WithAttachmentCount copies the provided value into C space and stores it
// at attachmentCount on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithAttachmentCount(y uint32) *VkFramebufferCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachmentCount = *ptr
	return x
}

// PAttachments returns the value of pAttachments from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) PAttachments() []VkImageView {
	ptr := func(x **C.VkImageView) *[]VkImageView { /* Slice */
		slc := unsafe.Slice((*VkImageView)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pAttachments)
	return *ptr
}

// WithPAttachments copies the provided value into C space and stores it
// at pAttachments on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithPAttachments(y []VkImageView) *VkFramebufferCreateInfo {
	ptr := func(x *[]VkImageView) **C.VkImageView { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageView)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageView)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pAttachments = *ptr
	return x
}

// Width returns the value of width from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) Width() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.width)
	return *ptr
}

// WithWidth copies the provided value into C space and stores it
// at width on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithWidth(y uint32) *VkFramebufferCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.width = *ptr
	return x
}

// Height returns the value of height from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) Height() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.height)
	return *ptr
}

// WithHeight copies the provided value into C space and stores it
// at height on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithHeight(y uint32) *VkFramebufferCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.height = *ptr
	return x
}

// Layers returns the value of layers from VkFramebufferCreateInfo
func (x VkFramebufferCreateInfo) Layers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.layers)
	return *ptr
}

// WithLayers copies the provided value into C space and stores it
// at layers on VkFramebufferCreateInfo
func (x *VkFramebufferCreateInfo) WithLayers(y uint32) *VkFramebufferCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.layers = *ptr
	return x
}

//VkMemoryAllocateInfo provides a go interface for VkMemoryAllocateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryAllocateInfo.html
type VkMemoryAllocateInfo C.struct_VkMemoryAllocateInfo

// NewVkMemoryAllocateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryAllocateInfo() *VkMemoryAllocateInfo {
	sz := unsafe.Sizeof(VkMemoryAllocateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryAllocateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryAllocateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryAllocateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryAllocateInfo) AsPtr() *VkMemoryAllocateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryAllocateInfo) AsCPtr() *VkMemoryAllocateInfo {
	clone := newVkMemoryAllocateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMemoryAllocateInfo
func (x VkMemoryAllocateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMemoryAllocateInfo) WithDefaultSType() *VkMemoryAllocateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMemoryAllocateInfo
func (x *VkMemoryAllocateInfo) WithSType(y VkStructureType) *VkMemoryAllocateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMemoryAllocateInfo
func (x VkMemoryAllocateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMemoryAllocateInfo
func (x *VkMemoryAllocateInfo) WithPNext(y unsafe.Pointer) *VkMemoryAllocateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// AllocationSize returns the value of allocationSize from VkMemoryAllocateInfo
func (x VkMemoryAllocateInfo) AllocationSize() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.allocationSize)
	return *ptr
}

// WithAllocationSize copies the provided value into C space and stores it
// at allocationSize on VkMemoryAllocateInfo
func (x *VkMemoryAllocateInfo) WithAllocationSize(y VkDeviceSize) *VkMemoryAllocateInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.allocationSize = *ptr
	return x
}

// MemoryTypeIndex returns the value of memoryTypeIndex from VkMemoryAllocateInfo
func (x VkMemoryAllocateInfo) MemoryTypeIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.memoryTypeIndex)
	return *ptr
}

// WithMemoryTypeIndex copies the provided value into C space and stores it
// at memoryTypeIndex on VkMemoryAllocateInfo
func (x *VkMemoryAllocateInfo) WithMemoryTypeIndex(y uint32) *VkMemoryAllocateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.memoryTypeIndex = *ptr
	return x
}

//VkMappedMemoryRange provides a go interface for VkMappedMemoryRange.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMappedMemoryRange.html
type VkMappedMemoryRange C.struct_VkMappedMemoryRange

// NewVkMappedMemoryRange allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMappedMemoryRange() *VkMappedMemoryRange {
	sz := unsafe.Sizeof(VkMappedMemoryRange{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMappedMemoryRange)(ptr)
}

// Free releases the memory allocated by the NewVkMappedMemoryRange method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMappedMemoryRange) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMappedMemoryRange) AsPtr() *VkMappedMemoryRange { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMappedMemoryRange) AsCPtr() *VkMappedMemoryRange {
	clone := newVkMappedMemoryRange()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMappedMemoryRange
func (x VkMappedMemoryRange) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMappedMemoryRange) WithDefaultSType() *VkMappedMemoryRange {
	return x.WithSType(VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMappedMemoryRange
func (x *VkMappedMemoryRange) WithSType(y VkStructureType) *VkMappedMemoryRange {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMappedMemoryRange
func (x VkMappedMemoryRange) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMappedMemoryRange
func (x *VkMappedMemoryRange) WithPNext(y unsafe.Pointer) *VkMappedMemoryRange {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Memory returns the value of memory from VkMappedMemoryRange
func (x VkMappedMemoryRange) Memory() VkDeviceMemory {
	ptr := func(x *C.VkDeviceMemory) *VkDeviceMemory { /* Handle */ return (*VkDeviceMemory)(unsafe.Pointer(x)) }(&x.memory)
	return *ptr
}

// WithMemory copies the provided value into C space and stores it
// at memory on VkMappedMemoryRange
func (x *VkMappedMemoryRange) WithMemory(y VkDeviceMemory) *VkMappedMemoryRange {
	ptr := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&y)
	x.memory = *ptr
	return x
}

// Offset returns the value of offset from VkMappedMemoryRange
func (x VkMappedMemoryRange) Offset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkMappedMemoryRange
func (x *VkMappedMemoryRange) WithOffset(y VkDeviceSize) *VkMappedMemoryRange {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.offset = *ptr
	return x
}

// Size returns the value of size from VkMappedMemoryRange
func (x VkMappedMemoryRange) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// WithSize copies the provided value into C space and stores it
// at size on VkMappedMemoryRange
func (x *VkMappedMemoryRange) WithSize(y VkDeviceSize) *VkMappedMemoryRange {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.size = *ptr
	return x
}

//VkImageViewCreateInfo provides a go interface for VkImageViewCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewCreateInfo.html
type VkImageViewCreateInfo C.struct_VkImageViewCreateInfo

// NewVkImageViewCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageViewCreateInfo() *VkImageViewCreateInfo {
	sz := unsafe.Sizeof(VkImageViewCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageViewCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkImageViewCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageViewCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageViewCreateInfo) AsPtr() *VkImageViewCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageViewCreateInfo) AsCPtr() *VkImageViewCreateInfo {
	clone := newVkImageViewCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageViewCreateInfo) WithDefaultSType() *VkImageViewCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithSType(y VkStructureType) *VkImageViewCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithPNext(y unsafe.Pointer) *VkImageViewCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) Flags() VkImageViewCreateFlags {
	ptr := /* Identifier */ (*VkImageViewCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithFlags(y VkImageViewCreateFlags) *VkImageViewCreateInfo {
	ptr := /* Identifier */ (*C.VkImageViewCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Image returns the value of image from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithImage(y VkImage) *VkImageViewCreateInfo {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

// ViewType returns the value of viewType from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) ViewType() VkImageViewType {
	ptr := /* Identifier */ (*VkImageViewType)(&x.viewType)
	return *ptr
}

// WithViewType copies the provided value into C space and stores it
// at viewType on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithViewType(y VkImageViewType) *VkImageViewCreateInfo {
	ptr := /* Identifier */ (*C.VkImageViewType)(&y)
	x.viewType = *ptr
	return x
}

// Format returns the value of format from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithFormat(y VkFormat) *VkImageViewCreateInfo {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Components returns the value of components from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) Components() VkComponentMapping {
	ptr := /* Identifier */ (*VkComponentMapping)(&x.components)
	return *ptr
}

// WithComponents copies the provided value into C space and stores it
// at components on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithComponents(y VkComponentMapping) *VkImageViewCreateInfo {
	ptr := /* Identifier */ (*C.VkComponentMapping)(&y)
	x.components = *ptr
	return x
}

// SubresourceRange returns the value of subresourceRange from VkImageViewCreateInfo
func (x VkImageViewCreateInfo) SubresourceRange() VkImageSubresourceRange {
	ptr := /* Identifier */ (*VkImageSubresourceRange)(&x.subresourceRange)
	return *ptr
}

// WithSubresourceRange copies the provided value into C space and stores it
// at subresourceRange on VkImageViewCreateInfo
func (x *VkImageViewCreateInfo) WithSubresourceRange(y VkImageSubresourceRange) *VkImageViewCreateInfo {
	ptr := /* Identifier */ (*C.VkImageSubresourceRange)(&y)
	x.subresourceRange = *ptr
	return x
}

//VkPipelineViewportStateCreateInfo provides a go interface for VkPipelineViewportStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportStateCreateInfo.html
type VkPipelineViewportStateCreateInfo C.struct_VkPipelineViewportStateCreateInfo

// NewVkPipelineViewportStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineViewportStateCreateInfo() *VkPipelineViewportStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineViewportStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineViewportStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineViewportStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineViewportStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineViewportStateCreateInfo) AsPtr() *VkPipelineViewportStateCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineViewportStateCreateInfo) AsCPtr() *VkPipelineViewportStateCreateInfo {
	clone := newVkPipelineViewportStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineViewportStateCreateInfo
func (x VkPipelineViewportStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineViewportStateCreateInfo) WithDefaultSType() *VkPipelineViewportStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineViewportStateCreateInfo
func (x *VkPipelineViewportStateCreateInfo) WithSType(y VkStructureType) *VkPipelineViewportStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineViewportStateCreateInfo
func (x VkPipelineViewportStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineViewportStateCreateInfo
func (x *VkPipelineViewportStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineViewportStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineViewportStateCreateInfo
func (x VkPipelineViewportStateCreateInfo) Flags() VkPipelineViewportStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineViewportStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineViewportStateCreateInfo
func (x *VkPipelineViewportStateCreateInfo) WithFlags(y VkPipelineViewportStateCreateFlags) *VkPipelineViewportStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineViewportStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// ViewportCount returns the value of viewportCount from VkPipelineViewportStateCreateInfo
func (x VkPipelineViewportStateCreateInfo) ViewportCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.viewportCount)
	return *ptr
}

// WithViewportCount copies the provided value into C space and stores it
// at viewportCount on VkPipelineViewportStateCreateInfo
func (x *VkPipelineViewportStateCreateInfo) WithViewportCount(y uint32) *VkPipelineViewportStateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.viewportCount = *ptr
	return x
}

// PViewports returns the value of pViewports from VkPipelineViewportStateCreateInfo
func (x VkPipelineViewportStateCreateInfo) PViewports() []VkViewport {
	ptr := func(x **C.VkViewport) *[]VkViewport { /* Slice */
		slc := unsafe.Slice((*VkViewport)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pViewports)
	return *ptr
}

// WithPViewports copies the provided value into C space and stores it
// at pViewports on VkPipelineViewportStateCreateInfo
func (x *VkPipelineViewportStateCreateInfo) WithPViewports(y []VkViewport) *VkPipelineViewportStateCreateInfo {
	ptr := func(x *[]VkViewport) **C.VkViewport { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkViewport)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkViewport)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pViewports = *ptr
	return x
}

// ScissorCount returns the value of scissorCount from VkPipelineViewportStateCreateInfo
func (x VkPipelineViewportStateCreateInfo) ScissorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.scissorCount)
	return *ptr
}

// WithScissorCount copies the provided value into C space and stores it
// at scissorCount on VkPipelineViewportStateCreateInfo
func (x *VkPipelineViewportStateCreateInfo) WithScissorCount(y uint32) *VkPipelineViewportStateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.scissorCount = *ptr
	return x
}

// PScissors returns the value of pScissors from VkPipelineViewportStateCreateInfo
func (x VkPipelineViewportStateCreateInfo) PScissors() []VkRect2D {
	ptr := func(x **C.VkRect2D) *[]VkRect2D { /* Slice */
		slc := unsafe.Slice((*VkRect2D)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pScissors)
	return *ptr
}

// WithPScissors copies the provided value into C space and stores it
// at pScissors on VkPipelineViewportStateCreateInfo
func (x *VkPipelineViewportStateCreateInfo) WithPScissors(y []VkRect2D) *VkPipelineViewportStateCreateInfo {
	ptr := func(x *[]VkRect2D) **C.VkRect2D { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkRect2D)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkRect2D)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pScissors = *ptr
	return x
}

//VkRenderPassCreateInfo provides a go interface for VkRenderPassCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassCreateInfo.html
type VkRenderPassCreateInfo C.struct_VkRenderPassCreateInfo

// NewVkRenderPassCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkRenderPassCreateInfo() *VkRenderPassCreateInfo {
	sz := unsafe.Sizeof(VkRenderPassCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkRenderPassCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkRenderPassCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkRenderPassCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkRenderPassCreateInfo) AsPtr() *VkRenderPassCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkRenderPassCreateInfo) AsCPtr() *VkRenderPassCreateInfo {
	clone := newVkRenderPassCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkRenderPassCreateInfo) WithDefaultSType() *VkRenderPassCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithSType(y VkStructureType) *VkRenderPassCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithPNext(y unsafe.Pointer) *VkRenderPassCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) Flags() VkRenderPassCreateFlags {
	ptr := /* Identifier */ (*VkRenderPassCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithFlags(y VkRenderPassCreateFlags) *VkRenderPassCreateInfo {
	ptr := /* Identifier */ (*C.VkRenderPassCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// AttachmentCount returns the value of attachmentCount from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) AttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachmentCount)
	return *ptr
}

// WithAttachmentCount copies the provided value into C space and stores it
// at attachmentCount on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithAttachmentCount(y uint32) *VkRenderPassCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachmentCount = *ptr
	return x
}

// PAttachments returns the value of pAttachments from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) PAttachments() []VkAttachmentDescription {
	ptr := func(x **C.VkAttachmentDescription) *[]VkAttachmentDescription { /* Slice */
		slc := unsafe.Slice((*VkAttachmentDescription)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pAttachments)
	return *ptr
}

// WithPAttachments copies the provided value into C space and stores it
// at pAttachments on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithPAttachments(y []VkAttachmentDescription) *VkRenderPassCreateInfo {
	ptr := func(x *[]VkAttachmentDescription) **C.VkAttachmentDescription { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentDescription)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentDescription)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pAttachments = *ptr
	return x
}

// SubpassCount returns the value of subpassCount from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) SubpassCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subpassCount)
	return *ptr
}

// WithSubpassCount copies the provided value into C space and stores it
// at subpassCount on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithSubpassCount(y uint32) *VkRenderPassCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.subpassCount = *ptr
	return x
}

// PSubpasses returns the value of pSubpasses from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) PSubpasses() []VkSubpassDescription {
	ptr := func(x **C.VkSubpassDescription) *[]VkSubpassDescription { /* Slice */
		slc := unsafe.Slice((*VkSubpassDescription)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSubpasses)
	return *ptr
}

// WithPSubpasses copies the provided value into C space and stores it
// at pSubpasses on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithPSubpasses(y []VkSubpassDescription) *VkRenderPassCreateInfo {
	ptr := func(x *[]VkSubpassDescription) **C.VkSubpassDescription { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSubpassDescription)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSubpassDescription)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSubpasses = *ptr
	return x
}

// DependencyCount returns the value of dependencyCount from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) DependencyCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dependencyCount)
	return *ptr
}

// WithDependencyCount copies the provided value into C space and stores it
// at dependencyCount on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithDependencyCount(y uint32) *VkRenderPassCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dependencyCount = *ptr
	return x
}

// PDependencies returns the value of pDependencies from VkRenderPassCreateInfo
func (x VkRenderPassCreateInfo) PDependencies() []VkSubpassDependency {
	ptr := func(x **C.VkSubpassDependency) *[]VkSubpassDependency { /* Slice */
		slc := unsafe.Slice((*VkSubpassDependency)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDependencies)
	return *ptr
}

// WithPDependencies copies the provided value into C space and stores it
// at pDependencies on VkRenderPassCreateInfo
func (x *VkRenderPassCreateInfo) WithPDependencies(y []VkSubpassDependency) *VkRenderPassCreateInfo {
	ptr := func(x *[]VkSubpassDependency) **C.VkSubpassDependency { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSubpassDependency)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSubpassDependency)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDependencies = *ptr
	return x
}

//VkSubpassDependency provides a go interface for VkSubpassDependency.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDependency.html
type VkSubpassDependency C.struct_VkSubpassDependency

// NewVkSubpassDependency allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubpassDependency() *VkSubpassDependency {
	sz := unsafe.Sizeof(VkSubpassDependency{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubpassDependency)(ptr)
}

// Free releases the memory allocated by the NewVkSubpassDependency method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubpassDependency) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubpassDependency) AsPtr() *VkSubpassDependency { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubpassDependency) AsCPtr() *VkSubpassDependency {
	clone := newVkSubpassDependency()
	*clone = *x
	return clone
}

// SrcSubpass returns the value of srcSubpass from VkSubpassDependency
func (x VkSubpassDependency) SrcSubpass() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.srcSubpass)
	return *ptr
}

// WithSrcSubpass copies the provided value into C space and stores it
// at srcSubpass on VkSubpassDependency
func (x *VkSubpassDependency) WithSrcSubpass(y uint32) *VkSubpassDependency {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.srcSubpass = *ptr
	return x
}

// DstSubpass returns the value of dstSubpass from VkSubpassDependency
func (x VkSubpassDependency) DstSubpass() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstSubpass)
	return *ptr
}

// WithDstSubpass copies the provided value into C space and stores it
// at dstSubpass on VkSubpassDependency
func (x *VkSubpassDependency) WithDstSubpass(y uint32) *VkSubpassDependency {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstSubpass = *ptr
	return x
}

// SrcStageMask returns the value of srcStageMask from VkSubpassDependency
func (x VkSubpassDependency) SrcStageMask() VkPipelineStageFlags {
	ptr := /* Identifier */ (*VkPipelineStageFlags)(&x.srcStageMask)
	return *ptr
}

// WithSrcStageMask copies the provided value into C space and stores it
// at srcStageMask on VkSubpassDependency
func (x *VkSubpassDependency) WithSrcStageMask(y VkPipelineStageFlags) *VkSubpassDependency {
	ptr := /* Identifier */ (*C.VkPipelineStageFlags)(&y)
	x.srcStageMask = *ptr
	return x
}

// DstStageMask returns the value of dstStageMask from VkSubpassDependency
func (x VkSubpassDependency) DstStageMask() VkPipelineStageFlags {
	ptr := /* Identifier */ (*VkPipelineStageFlags)(&x.dstStageMask)
	return *ptr
}

// WithDstStageMask copies the provided value into C space and stores it
// at dstStageMask on VkSubpassDependency
func (x *VkSubpassDependency) WithDstStageMask(y VkPipelineStageFlags) *VkSubpassDependency {
	ptr := /* Identifier */ (*C.VkPipelineStageFlags)(&y)
	x.dstStageMask = *ptr
	return x
}

// SrcAccessMask returns the value of srcAccessMask from VkSubpassDependency
func (x VkSubpassDependency) SrcAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.srcAccessMask)
	return *ptr
}

// WithSrcAccessMask copies the provided value into C space and stores it
// at srcAccessMask on VkSubpassDependency
func (x *VkSubpassDependency) WithSrcAccessMask(y VkAccessFlags) *VkSubpassDependency {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.srcAccessMask = *ptr
	return x
}

// DstAccessMask returns the value of dstAccessMask from VkSubpassDependency
func (x VkSubpassDependency) DstAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.dstAccessMask)
	return *ptr
}

// WithDstAccessMask copies the provided value into C space and stores it
// at dstAccessMask on VkSubpassDependency
func (x *VkSubpassDependency) WithDstAccessMask(y VkAccessFlags) *VkSubpassDependency {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.dstAccessMask = *ptr
	return x
}

// DependencyFlags returns the value of dependencyFlags from VkSubpassDependency
func (x VkSubpassDependency) DependencyFlags() VkDependencyFlags {
	ptr := /* Identifier */ (*VkDependencyFlags)(&x.dependencyFlags)
	return *ptr
}

// WithDependencyFlags copies the provided value into C space and stores it
// at dependencyFlags on VkSubpassDependency
func (x *VkSubpassDependency) WithDependencyFlags(y VkDependencyFlags) *VkSubpassDependency {
	ptr := /* Identifier */ (*C.VkDependencyFlags)(&y)
	x.dependencyFlags = *ptr
	return x
}

//VkSubpassDescription provides a go interface for VkSubpassDescription.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescription.html
type VkSubpassDescription C.struct_VkSubpassDescription

// NewVkSubpassDescription allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubpassDescription() *VkSubpassDescription {
	sz := unsafe.Sizeof(VkSubpassDescription{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubpassDescription)(ptr)
}

// Free releases the memory allocated by the NewVkSubpassDescription method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubpassDescription) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubpassDescription) AsPtr() *VkSubpassDescription { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubpassDescription) AsCPtr() *VkSubpassDescription {
	clone := newVkSubpassDescription()
	*clone = *x
	return clone
}

// Flags returns the value of flags from VkSubpassDescription
func (x VkSubpassDescription) Flags() VkSubpassDescriptionFlags {
	ptr := /* Identifier */ (*VkSubpassDescriptionFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSubpassDescription
func (x *VkSubpassDescription) WithFlags(y VkSubpassDescriptionFlags) *VkSubpassDescription {
	ptr := /* Identifier */ (*C.VkSubpassDescriptionFlags)(&y)
	x.flags = *ptr
	return x
}

// PipelineBindPoint returns the value of pipelineBindPoint from VkSubpassDescription
func (x VkSubpassDescription) PipelineBindPoint() VkPipelineBindPoint {
	ptr := /* Identifier */ (*VkPipelineBindPoint)(&x.pipelineBindPoint)
	return *ptr
}

// WithPipelineBindPoint copies the provided value into C space and stores it
// at pipelineBindPoint on VkSubpassDescription
func (x *VkSubpassDescription) WithPipelineBindPoint(y VkPipelineBindPoint) *VkSubpassDescription {
	ptr := /* Identifier */ (*C.VkPipelineBindPoint)(&y)
	x.pipelineBindPoint = *ptr
	return x
}

// InputAttachmentCount returns the value of inputAttachmentCount from VkSubpassDescription
func (x VkSubpassDescription) InputAttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.inputAttachmentCount)
	return *ptr
}

// WithInputAttachmentCount copies the provided value into C space and stores it
// at inputAttachmentCount on VkSubpassDescription
func (x *VkSubpassDescription) WithInputAttachmentCount(y uint32) *VkSubpassDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.inputAttachmentCount = *ptr
	return x
}

// PInputAttachments returns the value of pInputAttachments from VkSubpassDescription
func (x VkSubpassDescription) PInputAttachments() []VkAttachmentReference {
	ptr := func(x **C.VkAttachmentReference) *[]VkAttachmentReference { /* Slice */
		slc := unsafe.Slice((*VkAttachmentReference)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pInputAttachments)
	return *ptr
}

// WithPInputAttachments copies the provided value into C space and stores it
// at pInputAttachments on VkSubpassDescription
func (x *VkSubpassDescription) WithPInputAttachments(y []VkAttachmentReference) *VkSubpassDescription {
	ptr := func(x *[]VkAttachmentReference) **C.VkAttachmentReference { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentReference)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentReference)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pInputAttachments = *ptr
	return x
}

// ColorAttachmentCount returns the value of colorAttachmentCount from VkSubpassDescription
func (x VkSubpassDescription) ColorAttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.colorAttachmentCount)
	return *ptr
}

// WithColorAttachmentCount copies the provided value into C space and stores it
// at colorAttachmentCount on VkSubpassDescription
func (x *VkSubpassDescription) WithColorAttachmentCount(y uint32) *VkSubpassDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.colorAttachmentCount = *ptr
	return x
}

// PColorAttachments returns the value of pColorAttachments from VkSubpassDescription
func (x VkSubpassDescription) PColorAttachments() []VkAttachmentReference {
	ptr := func(x **C.VkAttachmentReference) *[]VkAttachmentReference { /* Slice */
		slc := unsafe.Slice((*VkAttachmentReference)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pColorAttachments)
	return *ptr
}

// WithPColorAttachments copies the provided value into C space and stores it
// at pColorAttachments on VkSubpassDescription
func (x *VkSubpassDescription) WithPColorAttachments(y []VkAttachmentReference) *VkSubpassDescription {
	ptr := func(x *[]VkAttachmentReference) **C.VkAttachmentReference { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentReference)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentReference)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pColorAttachments = *ptr
	return x
}

// PResolveAttachments returns the value of pResolveAttachments from VkSubpassDescription
func (x VkSubpassDescription) PResolveAttachments() []VkAttachmentReference {
	ptr := func(x **C.VkAttachmentReference) *[]VkAttachmentReference { /* Slice */
		slc := unsafe.Slice((*VkAttachmentReference)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pResolveAttachments)
	return *ptr
}

// WithPResolveAttachments copies the provided value into C space and stores it
// at pResolveAttachments on VkSubpassDescription
func (x *VkSubpassDescription) WithPResolveAttachments(y []VkAttachmentReference) *VkSubpassDescription {
	ptr := func(x *[]VkAttachmentReference) **C.VkAttachmentReference { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentReference)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentReference)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pResolveAttachments = *ptr
	return x
}

// PDepthStencilAttachment returns the value of pDepthStencilAttachment from VkSubpassDescription
func (x VkSubpassDescription) PDepthStencilAttachment() *VkAttachmentReference {
	ptr := func(x **C.VkAttachmentReference) **VkAttachmentReference { /* Pointer */
		return (**VkAttachmentReference)(unsafe.Pointer(x))
	}(&x.pDepthStencilAttachment)
	return *ptr
}

// WithPDepthStencilAttachment copies the provided value into C space and stores it
// at pDepthStencilAttachment on VkSubpassDescription
func (x *VkSubpassDescription) WithPDepthStencilAttachment(y *VkAttachmentReference) *VkSubpassDescription {
	ptr := func(x **VkAttachmentReference) **C.VkAttachmentReference { /* Pointer */
		return (**C.VkAttachmentReference)(unsafe.Pointer(x))
	}(&y)
	x.pDepthStencilAttachment = *ptr
	return x
}

// PreserveAttachmentCount returns the value of preserveAttachmentCount from VkSubpassDescription
func (x VkSubpassDescription) PreserveAttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.preserveAttachmentCount)
	return *ptr
}

// WithPreserveAttachmentCount copies the provided value into C space and stores it
// at preserveAttachmentCount on VkSubpassDescription
func (x *VkSubpassDescription) WithPreserveAttachmentCount(y uint32) *VkSubpassDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.preserveAttachmentCount = *ptr
	return x
}

// PPreserveAttachments returns the value of pPreserveAttachments from VkSubpassDescription
func (x VkSubpassDescription) PPreserveAttachments() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pPreserveAttachments)
	return *ptr
}

// WithPPreserveAttachments copies the provided value into C space and stores it
// at pPreserveAttachments on VkSubpassDescription
func (x *VkSubpassDescription) WithPPreserveAttachments(y []uint32) *VkSubpassDescription {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pPreserveAttachments = *ptr
	return x
}

//VkSubmitInfo provides a go interface for VkSubmitInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubmitInfo.html
type VkSubmitInfo C.struct_VkSubmitInfo

// NewVkSubmitInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubmitInfo() *VkSubmitInfo {
	sz := unsafe.Sizeof(VkSubmitInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubmitInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSubmitInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubmitInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubmitInfo) AsPtr() *VkSubmitInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubmitInfo) AsCPtr() *VkSubmitInfo {
	clone := newVkSubmitInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSubmitInfo
func (x VkSubmitInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSubmitInfo) WithDefaultSType() *VkSubmitInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SUBMIT_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSubmitInfo
func (x *VkSubmitInfo) WithSType(y VkStructureType) *VkSubmitInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSubmitInfo
func (x VkSubmitInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSubmitInfo
func (x *VkSubmitInfo) WithPNext(y unsafe.Pointer) *VkSubmitInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// WaitSemaphoreCount returns the value of waitSemaphoreCount from VkSubmitInfo
func (x VkSubmitInfo) WaitSemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.waitSemaphoreCount)
	return *ptr
}

// WithWaitSemaphoreCount copies the provided value into C space and stores it
// at waitSemaphoreCount on VkSubmitInfo
func (x *VkSubmitInfo) WithWaitSemaphoreCount(y uint32) *VkSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.waitSemaphoreCount = *ptr
	return x
}

// PWaitSemaphores returns the value of pWaitSemaphores from VkSubmitInfo
func (x VkSubmitInfo) PWaitSemaphores() []VkSemaphore {
	ptr := func(x **C.VkSemaphore) *[]VkSemaphore { /* Slice */
		slc := unsafe.Slice((*VkSemaphore)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pWaitSemaphores)
	return *ptr
}

// WithPWaitSemaphores copies the provided value into C space and stores it
// at pWaitSemaphores on VkSubmitInfo
func (x *VkSubmitInfo) WithPWaitSemaphores(y []VkSemaphore) *VkSubmitInfo {
	ptr := func(x *[]VkSemaphore) **C.VkSemaphore { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSemaphore)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSemaphore)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pWaitSemaphores = *ptr
	return x
}

// PWaitDstStageMask returns the value of pWaitDstStageMask from VkSubmitInfo
func (x VkSubmitInfo) PWaitDstStageMask() []VkPipelineStageFlags {
	ptr := func(x **C.VkPipelineStageFlags) *[]VkPipelineStageFlags { /* Slice */
		slc := unsafe.Slice((*VkPipelineStageFlags)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pWaitDstStageMask)
	return *ptr
}

// WithPWaitDstStageMask copies the provided value into C space and stores it
// at pWaitDstStageMask on VkSubmitInfo
func (x *VkSubmitInfo) WithPWaitDstStageMask(y []VkPipelineStageFlags) *VkSubmitInfo {
	ptr := func(x *[]VkPipelineStageFlags) **C.VkPipelineStageFlags { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPipelineStageFlags)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPipelineStageFlags)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pWaitDstStageMask = *ptr
	return x
}

// CommandBufferCount returns the value of commandBufferCount from VkSubmitInfo
func (x VkSubmitInfo) CommandBufferCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.commandBufferCount)
	return *ptr
}

// WithCommandBufferCount copies the provided value into C space and stores it
// at commandBufferCount on VkSubmitInfo
func (x *VkSubmitInfo) WithCommandBufferCount(y uint32) *VkSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.commandBufferCount = *ptr
	return x
}

// PCommandBuffers returns the value of pCommandBuffers from VkSubmitInfo
func (x VkSubmitInfo) PCommandBuffers() []VkCommandBuffer {
	ptr := func(x **C.VkCommandBuffer) *[]VkCommandBuffer { /* Slice */
		slc := unsafe.Slice((*VkCommandBuffer)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pCommandBuffers)
	return *ptr
}

// WithPCommandBuffers copies the provided value into C space and stores it
// at pCommandBuffers on VkSubmitInfo
func (x *VkSubmitInfo) WithPCommandBuffers(y []VkCommandBuffer) *VkSubmitInfo {
	ptr := func(x *[]VkCommandBuffer) **C.VkCommandBuffer { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkCommandBuffer)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkCommandBuffer)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pCommandBuffers = *ptr
	return x
}

// SignalSemaphoreCount returns the value of signalSemaphoreCount from VkSubmitInfo
func (x VkSubmitInfo) SignalSemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.signalSemaphoreCount)
	return *ptr
}

// WithSignalSemaphoreCount copies the provided value into C space and stores it
// at signalSemaphoreCount on VkSubmitInfo
func (x *VkSubmitInfo) WithSignalSemaphoreCount(y uint32) *VkSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.signalSemaphoreCount = *ptr
	return x
}

// PSignalSemaphores returns the value of pSignalSemaphores from VkSubmitInfo
func (x VkSubmitInfo) PSignalSemaphores() []VkSemaphore {
	ptr := func(x **C.VkSemaphore) *[]VkSemaphore { /* Slice */
		slc := unsafe.Slice((*VkSemaphore)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSignalSemaphores)
	return *ptr
}

// WithPSignalSemaphores copies the provided value into C space and stores it
// at pSignalSemaphores on VkSubmitInfo
func (x *VkSubmitInfo) WithPSignalSemaphores(y []VkSemaphore) *VkSubmitInfo {
	ptr := func(x *[]VkSemaphore) **C.VkSemaphore { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSemaphore)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSemaphore)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSignalSemaphores = *ptr
	return x
}

//VkCommandPoolCreateInfo provides a go interface for VkCommandPoolCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandPoolCreateInfo.html
type VkCommandPoolCreateInfo C.struct_VkCommandPoolCreateInfo

// NewVkCommandPoolCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkCommandPoolCreateInfo() *VkCommandPoolCreateInfo {
	sz := unsafe.Sizeof(VkCommandPoolCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkCommandPoolCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkCommandPoolCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkCommandPoolCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkCommandPoolCreateInfo) AsPtr() *VkCommandPoolCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkCommandPoolCreateInfo) AsCPtr() *VkCommandPoolCreateInfo {
	clone := newVkCommandPoolCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkCommandPoolCreateInfo
func (x VkCommandPoolCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkCommandPoolCreateInfo) WithDefaultSType() *VkCommandPoolCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkCommandPoolCreateInfo
func (x *VkCommandPoolCreateInfo) WithSType(y VkStructureType) *VkCommandPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkCommandPoolCreateInfo
func (x VkCommandPoolCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkCommandPoolCreateInfo
func (x *VkCommandPoolCreateInfo) WithPNext(y unsafe.Pointer) *VkCommandPoolCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkCommandPoolCreateInfo
func (x VkCommandPoolCreateInfo) Flags() VkCommandPoolCreateFlags {
	ptr := /* Identifier */ (*VkCommandPoolCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkCommandPoolCreateInfo
func (x *VkCommandPoolCreateInfo) WithFlags(y VkCommandPoolCreateFlags) *VkCommandPoolCreateInfo {
	ptr := /* Identifier */ (*C.VkCommandPoolCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// QueueFamilyIndex returns the value of queueFamilyIndex from VkCommandPoolCreateInfo
func (x VkCommandPoolCreateInfo) QueueFamilyIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueFamilyIndex)
	return *ptr
}

// WithQueueFamilyIndex copies the provided value into C space and stores it
// at queueFamilyIndex on VkCommandPoolCreateInfo
func (x *VkCommandPoolCreateInfo) WithQueueFamilyIndex(y uint32) *VkCommandPoolCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueFamilyIndex = *ptr
	return x
}

//VkShaderModuleCreateInfo provides a go interface for VkShaderModuleCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShaderModuleCreateInfo.html
type VkShaderModuleCreateInfo C.struct_VkShaderModuleCreateInfo

// NewVkShaderModuleCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkShaderModuleCreateInfo() *VkShaderModuleCreateInfo {
	sz := unsafe.Sizeof(VkShaderModuleCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkShaderModuleCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkShaderModuleCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkShaderModuleCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkShaderModuleCreateInfo) AsPtr() *VkShaderModuleCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkShaderModuleCreateInfo) AsCPtr() *VkShaderModuleCreateInfo {
	clone := newVkShaderModuleCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkShaderModuleCreateInfo
func (x VkShaderModuleCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkShaderModuleCreateInfo) WithDefaultSType() *VkShaderModuleCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkShaderModuleCreateInfo
func (x *VkShaderModuleCreateInfo) WithSType(y VkStructureType) *VkShaderModuleCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkShaderModuleCreateInfo
func (x VkShaderModuleCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkShaderModuleCreateInfo
func (x *VkShaderModuleCreateInfo) WithPNext(y unsafe.Pointer) *VkShaderModuleCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkShaderModuleCreateInfo
func (x VkShaderModuleCreateInfo) Flags() VkShaderModuleCreateFlags {
	ptr := /* Identifier */ (*VkShaderModuleCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkShaderModuleCreateInfo
func (x *VkShaderModuleCreateInfo) WithFlags(y VkShaderModuleCreateFlags) *VkShaderModuleCreateInfo {
	ptr := /* Identifier */ (*C.VkShaderModuleCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// CodeSize returns the value of codeSize from VkShaderModuleCreateInfo
func (x VkShaderModuleCreateInfo) CodeSize() uint32 {
	ptr := func(x *C.ulong) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.codeSize)
	return *ptr
}

// WithCodeSize copies the provided value into C space and stores it
// at codeSize on VkShaderModuleCreateInfo
func (x *VkShaderModuleCreateInfo) WithCodeSize(y uint32) *VkShaderModuleCreateInfo {
	ptr := func(x *uint32) *C.ulong { /* Scalar */ return (*C.ulong)(unsafe.Pointer(x)) }(&y)
	x.codeSize = *ptr
	return x
}

// PCode returns the value of pCode from VkShaderModuleCreateInfo
func (x VkShaderModuleCreateInfo) PCode() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pCode)
	return *ptr
}

// WithPCode copies the provided value into C space and stores it
// at pCode on VkShaderModuleCreateInfo
func (x *VkShaderModuleCreateInfo) WithPCode(y []uint32) *VkShaderModuleCreateInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pCode = *ptr
	return x
}

//VkDescriptorImageInfo provides a go interface for VkDescriptorImageInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorImageInfo.html
type VkDescriptorImageInfo C.struct_VkDescriptorImageInfo

// NewVkDescriptorImageInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorImageInfo() *VkDescriptorImageInfo {
	sz := unsafe.Sizeof(VkDescriptorImageInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorImageInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorImageInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorImageInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorImageInfo) AsPtr() *VkDescriptorImageInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorImageInfo) AsCPtr() *VkDescriptorImageInfo {
	clone := newVkDescriptorImageInfo()
	*clone = *x
	return clone
}

// Sampler returns the value of sampler from VkDescriptorImageInfo
func (x VkDescriptorImageInfo) Sampler() VkSampler {
	ptr := func(x *C.VkSampler) *VkSampler { /* Handle */ return (*VkSampler)(unsafe.Pointer(x)) }(&x.sampler)
	return *ptr
}

// WithSampler copies the provided value into C space and stores it
// at sampler on VkDescriptorImageInfo
func (x *VkDescriptorImageInfo) WithSampler(y VkSampler) *VkDescriptorImageInfo {
	ptr := func(x *VkSampler) *C.VkSampler { /* Handle */ return (*C.VkSampler)(unsafe.Pointer(x)) }(&y)
	x.sampler = *ptr
	return x
}

// ImageView returns the value of imageView from VkDescriptorImageInfo
func (x VkDescriptorImageInfo) ImageView() VkImageView {
	ptr := func(x *C.VkImageView) *VkImageView { /* Handle */ return (*VkImageView)(unsafe.Pointer(x)) }(&x.imageView)
	return *ptr
}

// WithImageView copies the provided value into C space and stores it
// at imageView on VkDescriptorImageInfo
func (x *VkDescriptorImageInfo) WithImageView(y VkImageView) *VkDescriptorImageInfo {
	ptr := func(x *VkImageView) *C.VkImageView { /* Handle */ return (*C.VkImageView)(unsafe.Pointer(x)) }(&y)
	x.imageView = *ptr
	return x
}

// ImageLayout returns the value of imageLayout from VkDescriptorImageInfo
func (x VkDescriptorImageInfo) ImageLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.imageLayout)
	return *ptr
}

// WithImageLayout copies the provided value into C space and stores it
// at imageLayout on VkDescriptorImageInfo
func (x *VkDescriptorImageInfo) WithImageLayout(y VkImageLayout) *VkDescriptorImageInfo {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.imageLayout = *ptr
	return x
}

//VkDescriptorBufferInfo provides a go interface for VkDescriptorBufferInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorBufferInfo.html
type VkDescriptorBufferInfo C.struct_VkDescriptorBufferInfo

// NewVkDescriptorBufferInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorBufferInfo() *VkDescriptorBufferInfo {
	sz := unsafe.Sizeof(VkDescriptorBufferInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorBufferInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorBufferInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorBufferInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorBufferInfo) AsPtr() *VkDescriptorBufferInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorBufferInfo) AsCPtr() *VkDescriptorBufferInfo {
	clone := newVkDescriptorBufferInfo()
	*clone = *x
	return clone
}

// Buffer returns the value of buffer from VkDescriptorBufferInfo
func (x VkDescriptorBufferInfo) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkDescriptorBufferInfo
func (x *VkDescriptorBufferInfo) WithBuffer(y VkBuffer) *VkDescriptorBufferInfo {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

// Offset returns the value of offset from VkDescriptorBufferInfo
func (x VkDescriptorBufferInfo) Offset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkDescriptorBufferInfo
func (x *VkDescriptorBufferInfo) WithOffset(y VkDeviceSize) *VkDescriptorBufferInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.offset = *ptr
	return x
}

// Range returns the value of range from VkDescriptorBufferInfo
func (x VkDescriptorBufferInfo) Range() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x._range)
	return *ptr
}

// WithRange copies the provided value into C space and stores it
// at range on VkDescriptorBufferInfo
func (x *VkDescriptorBufferInfo) WithRange(y VkDeviceSize) *VkDescriptorBufferInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x._range = *ptr
	return x
}

//VkCopyDescriptorSet provides a go interface for VkCopyDescriptorSet.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyDescriptorSet.html
type VkCopyDescriptorSet C.struct_VkCopyDescriptorSet

// NewVkCopyDescriptorSet allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkCopyDescriptorSet() *VkCopyDescriptorSet {
	sz := unsafe.Sizeof(VkCopyDescriptorSet{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkCopyDescriptorSet)(ptr)
}

// Free releases the memory allocated by the NewVkCopyDescriptorSet method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkCopyDescriptorSet) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkCopyDescriptorSet) AsPtr() *VkCopyDescriptorSet { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkCopyDescriptorSet) AsCPtr() *VkCopyDescriptorSet {
	clone := newVkCopyDescriptorSet()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkCopyDescriptorSet) WithDefaultSType() *VkCopyDescriptorSet {
	return x.WithSType(VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithSType(y VkStructureType) *VkCopyDescriptorSet {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithPNext(y unsafe.Pointer) *VkCopyDescriptorSet {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SrcSet returns the value of srcSet from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) SrcSet() VkDescriptorSet {
	ptr := func(x *C.VkDescriptorSet) *VkDescriptorSet { /* Handle */ return (*VkDescriptorSet)(unsafe.Pointer(x)) }(&x.srcSet)
	return *ptr
}

// WithSrcSet copies the provided value into C space and stores it
// at srcSet on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithSrcSet(y VkDescriptorSet) *VkCopyDescriptorSet {
	ptr := func(x *VkDescriptorSet) *C.VkDescriptorSet { /* Handle */
		return (*C.VkDescriptorSet)(unsafe.Pointer(x))
	}(&y)
	x.srcSet = *ptr
	return x
}

// SrcBinding returns the value of srcBinding from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) SrcBinding() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.srcBinding)
	return *ptr
}

// WithSrcBinding copies the provided value into C space and stores it
// at srcBinding on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithSrcBinding(y uint32) *VkCopyDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.srcBinding = *ptr
	return x
}

// SrcArrayElement returns the value of srcArrayElement from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) SrcArrayElement() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.srcArrayElement)
	return *ptr
}

// WithSrcArrayElement copies the provided value into C space and stores it
// at srcArrayElement on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithSrcArrayElement(y uint32) *VkCopyDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.srcArrayElement = *ptr
	return x
}

// DstSet returns the value of dstSet from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) DstSet() VkDescriptorSet {
	ptr := func(x *C.VkDescriptorSet) *VkDescriptorSet { /* Handle */ return (*VkDescriptorSet)(unsafe.Pointer(x)) }(&x.dstSet)
	return *ptr
}

// WithDstSet copies the provided value into C space and stores it
// at dstSet on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithDstSet(y VkDescriptorSet) *VkCopyDescriptorSet {
	ptr := func(x *VkDescriptorSet) *C.VkDescriptorSet { /* Handle */
		return (*C.VkDescriptorSet)(unsafe.Pointer(x))
	}(&y)
	x.dstSet = *ptr
	return x
}

// DstBinding returns the value of dstBinding from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) DstBinding() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstBinding)
	return *ptr
}

// WithDstBinding copies the provided value into C space and stores it
// at dstBinding on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithDstBinding(y uint32) *VkCopyDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstBinding = *ptr
	return x
}

// DstArrayElement returns the value of dstArrayElement from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) DstArrayElement() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstArrayElement)
	return *ptr
}

// WithDstArrayElement copies the provided value into C space and stores it
// at dstArrayElement on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithDstArrayElement(y uint32) *VkCopyDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstArrayElement = *ptr
	return x
}

// DescriptorCount returns the value of descriptorCount from VkCopyDescriptorSet
func (x VkCopyDescriptorSet) DescriptorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorCount)
	return *ptr
}

// WithDescriptorCount copies the provided value into C space and stores it
// at descriptorCount on VkCopyDescriptorSet
func (x *VkCopyDescriptorSet) WithDescriptorCount(y uint32) *VkCopyDescriptorSet {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorCount = *ptr
	return x
}

//VkLayerProperties provides a go interface for VkLayerProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkLayerProperties.html
type VkLayerProperties C.struct_VkLayerProperties

// NewVkLayerProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkLayerProperties() *VkLayerProperties {
	sz := unsafe.Sizeof(VkLayerProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkLayerProperties)(ptr)
}

// Free releases the memory allocated by the NewVkLayerProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkLayerProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkLayerProperties) AsPtr() *VkLayerProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkLayerProperties) AsCPtr() *VkLayerProperties {
	clone := newVkLayerProperties()
	*clone = *x
	return clone
}

// LayerName returns the value of layerName from VkLayerProperties
func (x VkLayerProperties) LayerName() []byte {
	ptr := func(x *[VK_MAX_EXTENSION_NAME_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_EXTENSION_NAME_SIZE)
		return &slc
	}(&x.layerName)
	return *ptr
}

// SpecVersion returns the value of specVersion from VkLayerProperties
func (x VkLayerProperties) SpecVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.specVersion)
	return *ptr
}

// ImplementationVersion returns the value of implementationVersion from VkLayerProperties
func (x VkLayerProperties) ImplementationVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.implementationVersion)
	return *ptr
}

// Description returns the value of description from VkLayerProperties
func (x VkLayerProperties) Description() []byte {
	ptr := func(x *[VK_MAX_DESCRIPTION_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_DESCRIPTION_SIZE)
		return &slc
	}(&x.description)
	return *ptr
}

//VkExtensionProperties provides a go interface for VkExtensionProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtensionProperties.html
type VkExtensionProperties C.struct_VkExtensionProperties

// NewVkExtensionProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExtensionProperties() *VkExtensionProperties {
	sz := unsafe.Sizeof(VkExtensionProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExtensionProperties)(ptr)
}

// Free releases the memory allocated by the NewVkExtensionProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExtensionProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExtensionProperties) AsPtr() *VkExtensionProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExtensionProperties) AsCPtr() *VkExtensionProperties {
	clone := newVkExtensionProperties()
	*clone = *x
	return clone
}

// ExtensionName returns the value of extensionName from VkExtensionProperties
func (x VkExtensionProperties) ExtensionName() []byte {
	ptr := func(x *[VK_MAX_EXTENSION_NAME_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_EXTENSION_NAME_SIZE)
		return &slc
	}(&x.extensionName)
	return *ptr
}

// SpecVersion returns the value of specVersion from VkExtensionProperties
func (x VkExtensionProperties) SpecVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.specVersion)
	return *ptr
}

//VkCommandBufferAllocateInfo provides a go interface for VkCommandBufferAllocateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferAllocateInfo.html
type VkCommandBufferAllocateInfo C.struct_VkCommandBufferAllocateInfo

// NewVkCommandBufferAllocateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkCommandBufferAllocateInfo() *VkCommandBufferAllocateInfo {
	sz := unsafe.Sizeof(VkCommandBufferAllocateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkCommandBufferAllocateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkCommandBufferAllocateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkCommandBufferAllocateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkCommandBufferAllocateInfo) AsPtr() *VkCommandBufferAllocateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkCommandBufferAllocateInfo) AsCPtr() *VkCommandBufferAllocateInfo {
	clone := newVkCommandBufferAllocateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkCommandBufferAllocateInfo
func (x VkCommandBufferAllocateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkCommandBufferAllocateInfo) WithDefaultSType() *VkCommandBufferAllocateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkCommandBufferAllocateInfo
func (x *VkCommandBufferAllocateInfo) WithSType(y VkStructureType) *VkCommandBufferAllocateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkCommandBufferAllocateInfo
func (x VkCommandBufferAllocateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkCommandBufferAllocateInfo
func (x *VkCommandBufferAllocateInfo) WithPNext(y unsafe.Pointer) *VkCommandBufferAllocateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// CommandPool returns the value of commandPool from VkCommandBufferAllocateInfo
func (x VkCommandBufferAllocateInfo) CommandPool() VkCommandPool {
	ptr := func(x *C.VkCommandPool) *VkCommandPool { /* Handle */ return (*VkCommandPool)(unsafe.Pointer(x)) }(&x.commandPool)
	return *ptr
}

// WithCommandPool copies the provided value into C space and stores it
// at commandPool on VkCommandBufferAllocateInfo
func (x *VkCommandBufferAllocateInfo) WithCommandPool(y VkCommandPool) *VkCommandBufferAllocateInfo {
	ptr := func(x *VkCommandPool) *C.VkCommandPool { /* Handle */ return (*C.VkCommandPool)(unsafe.Pointer(x)) }(&y)
	x.commandPool = *ptr
	return x
}

// Level returns the value of level from VkCommandBufferAllocateInfo
func (x VkCommandBufferAllocateInfo) Level() VkCommandBufferLevel {
	ptr := /* Identifier */ (*VkCommandBufferLevel)(&x.level)
	return *ptr
}

// WithLevel copies the provided value into C space and stores it
// at level on VkCommandBufferAllocateInfo
func (x *VkCommandBufferAllocateInfo) WithLevel(y VkCommandBufferLevel) *VkCommandBufferAllocateInfo {
	ptr := /* Identifier */ (*C.VkCommandBufferLevel)(&y)
	x.level = *ptr
	return x
}

// CommandBufferCount returns the value of commandBufferCount from VkCommandBufferAllocateInfo
func (x VkCommandBufferAllocateInfo) CommandBufferCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.commandBufferCount)
	return *ptr
}

// WithCommandBufferCount copies the provided value into C space and stores it
// at commandBufferCount on VkCommandBufferAllocateInfo
func (x *VkCommandBufferAllocateInfo) WithCommandBufferCount(y uint32) *VkCommandBufferAllocateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.commandBufferCount = *ptr
	return x
}

//VkCommandBufferInheritanceInfo provides a go interface for VkCommandBufferInheritanceInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceInfo.html
type VkCommandBufferInheritanceInfo C.struct_VkCommandBufferInheritanceInfo

// NewVkCommandBufferInheritanceInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkCommandBufferInheritanceInfo() *VkCommandBufferInheritanceInfo {
	sz := unsafe.Sizeof(VkCommandBufferInheritanceInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkCommandBufferInheritanceInfo)(ptr)
}

// Free releases the memory allocated by the NewVkCommandBufferInheritanceInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkCommandBufferInheritanceInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkCommandBufferInheritanceInfo) AsPtr() *VkCommandBufferInheritanceInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkCommandBufferInheritanceInfo) AsCPtr() *VkCommandBufferInheritanceInfo {
	clone := newVkCommandBufferInheritanceInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkCommandBufferInheritanceInfo) WithDefaultSType() *VkCommandBufferInheritanceInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithSType(y VkStructureType) *VkCommandBufferInheritanceInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithPNext(y unsafe.Pointer) *VkCommandBufferInheritanceInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// RenderPass returns the value of renderPass from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) RenderPass() VkRenderPass {
	ptr := func(x *C.VkRenderPass) *VkRenderPass { /* Handle */ return (*VkRenderPass)(unsafe.Pointer(x)) }(&x.renderPass)
	return *ptr
}

// WithRenderPass copies the provided value into C space and stores it
// at renderPass on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithRenderPass(y VkRenderPass) *VkCommandBufferInheritanceInfo {
	ptr := func(x *VkRenderPass) *C.VkRenderPass { /* Handle */ return (*C.VkRenderPass)(unsafe.Pointer(x)) }(&y)
	x.renderPass = *ptr
	return x
}

// Subpass returns the value of subpass from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) Subpass() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subpass)
	return *ptr
}

// WithSubpass copies the provided value into C space and stores it
// at subpass on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithSubpass(y uint32) *VkCommandBufferInheritanceInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.subpass = *ptr
	return x
}

// Framebuffer returns the value of framebuffer from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) Framebuffer() VkFramebuffer {
	ptr := func(x *C.VkFramebuffer) *VkFramebuffer { /* Handle */ return (*VkFramebuffer)(unsafe.Pointer(x)) }(&x.framebuffer)
	return *ptr
}

// WithFramebuffer copies the provided value into C space and stores it
// at framebuffer on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithFramebuffer(y VkFramebuffer) *VkCommandBufferInheritanceInfo {
	ptr := func(x *VkFramebuffer) *C.VkFramebuffer { /* Handle */ return (*C.VkFramebuffer)(unsafe.Pointer(x)) }(&y)
	x.framebuffer = *ptr
	return x
}

// OcclusionQueryEnable returns the value of occlusionQueryEnable from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) OcclusionQueryEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.occlusionQueryEnable)
	return *ptr
}

// WithOcclusionQueryEnable copies the provided value into C space and stores it
// at occlusionQueryEnable on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithOcclusionQueryEnable(y VkBool32) *VkCommandBufferInheritanceInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.occlusionQueryEnable = *ptr
	return x
}

// QueryFlags returns the value of queryFlags from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) QueryFlags() VkQueryControlFlags {
	ptr := /* Identifier */ (*VkQueryControlFlags)(&x.queryFlags)
	return *ptr
}

// WithQueryFlags copies the provided value into C space and stores it
// at queryFlags on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithQueryFlags(y VkQueryControlFlags) *VkCommandBufferInheritanceInfo {
	ptr := /* Identifier */ (*C.VkQueryControlFlags)(&y)
	x.queryFlags = *ptr
	return x
}

// PipelineStatistics returns the value of pipelineStatistics from VkCommandBufferInheritanceInfo
func (x VkCommandBufferInheritanceInfo) PipelineStatistics() VkQueryPipelineStatisticFlags {
	ptr := /* Identifier */ (*VkQueryPipelineStatisticFlags)(&x.pipelineStatistics)
	return *ptr
}

// WithPipelineStatistics copies the provided value into C space and stores it
// at pipelineStatistics on VkCommandBufferInheritanceInfo
func (x *VkCommandBufferInheritanceInfo) WithPipelineStatistics(y VkQueryPipelineStatisticFlags) *VkCommandBufferInheritanceInfo {
	ptr := /* Identifier */ (*C.VkQueryPipelineStatisticFlags)(&y)
	x.pipelineStatistics = *ptr
	return x
}

//VkPipelineCacheCreateInfo provides a go interface for VkPipelineCacheCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCacheCreateInfo.html
type VkPipelineCacheCreateInfo C.struct_VkPipelineCacheCreateInfo

// NewVkPipelineCacheCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineCacheCreateInfo() *VkPipelineCacheCreateInfo {
	sz := unsafe.Sizeof(VkPipelineCacheCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineCacheCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineCacheCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineCacheCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineCacheCreateInfo) AsPtr() *VkPipelineCacheCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineCacheCreateInfo) AsCPtr() *VkPipelineCacheCreateInfo {
	clone := newVkPipelineCacheCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineCacheCreateInfo
func (x VkPipelineCacheCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineCacheCreateInfo) WithDefaultSType() *VkPipelineCacheCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineCacheCreateInfo
func (x *VkPipelineCacheCreateInfo) WithSType(y VkStructureType) *VkPipelineCacheCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineCacheCreateInfo
func (x VkPipelineCacheCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineCacheCreateInfo
func (x *VkPipelineCacheCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineCacheCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineCacheCreateInfo
func (x VkPipelineCacheCreateInfo) Flags() VkPipelineCacheCreateFlags {
	ptr := /* Identifier */ (*VkPipelineCacheCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineCacheCreateInfo
func (x *VkPipelineCacheCreateInfo) WithFlags(y VkPipelineCacheCreateFlags) *VkPipelineCacheCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineCacheCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// InitialDataSize returns the value of initialDataSize from VkPipelineCacheCreateInfo
func (x VkPipelineCacheCreateInfo) InitialDataSize() uint32 {
	ptr := func(x *C.ulong) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.initialDataSize)
	return *ptr
}

// WithInitialDataSize copies the provided value into C space and stores it
// at initialDataSize on VkPipelineCacheCreateInfo
func (x *VkPipelineCacheCreateInfo) WithInitialDataSize(y uint32) *VkPipelineCacheCreateInfo {
	ptr := func(x *uint32) *C.ulong { /* Scalar */ return (*C.ulong)(unsafe.Pointer(x)) }(&y)
	x.initialDataSize = *ptr
	return x
}

// PInitialData returns the value of pInitialData from VkPipelineCacheCreateInfo
func (x VkPipelineCacheCreateInfo) PInitialData() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pInitialData)
	return *ptr
}

// WithPInitialData copies the provided value into C space and stores it
// at pInitialData on VkPipelineCacheCreateInfo
func (x *VkPipelineCacheCreateInfo) WithPInitialData(y unsafe.Pointer) *VkPipelineCacheCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pInitialData = *ptr
	return x
}

//VkSamplerCreateInfo provides a go interface for VkSamplerCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerCreateInfo.html
type VkSamplerCreateInfo C.struct_VkSamplerCreateInfo

// NewVkSamplerCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSamplerCreateInfo() *VkSamplerCreateInfo {
	sz := unsafe.Sizeof(VkSamplerCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSamplerCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSamplerCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSamplerCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSamplerCreateInfo) AsPtr() *VkSamplerCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSamplerCreateInfo) AsCPtr() *VkSamplerCreateInfo {
	clone := newVkSamplerCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSamplerCreateInfo) WithDefaultSType() *VkSamplerCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithSType(y VkStructureType) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithPNext(y unsafe.Pointer) *VkSamplerCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) Flags() VkSamplerCreateFlags {
	ptr := /* Identifier */ (*VkSamplerCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithFlags(y VkSamplerCreateFlags) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// MagFilter returns the value of magFilter from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) MagFilter() VkFilter {
	ptr := /* Identifier */ (*VkFilter)(&x.magFilter)
	return *ptr
}

// WithMagFilter copies the provided value into C space and stores it
// at magFilter on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithMagFilter(y VkFilter) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkFilter)(&y)
	x.magFilter = *ptr
	return x
}

// MinFilter returns the value of minFilter from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) MinFilter() VkFilter {
	ptr := /* Identifier */ (*VkFilter)(&x.minFilter)
	return *ptr
}

// WithMinFilter copies the provided value into C space and stores it
// at minFilter on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithMinFilter(y VkFilter) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkFilter)(&y)
	x.minFilter = *ptr
	return x
}

// MipmapMode returns the value of mipmapMode from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) MipmapMode() VkSamplerMipmapMode {
	ptr := /* Identifier */ (*VkSamplerMipmapMode)(&x.mipmapMode)
	return *ptr
}

// WithMipmapMode copies the provided value into C space and stores it
// at mipmapMode on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithMipmapMode(y VkSamplerMipmapMode) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerMipmapMode)(&y)
	x.mipmapMode = *ptr
	return x
}

// AddressModeU returns the value of addressModeU from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) AddressModeU() VkSamplerAddressMode {
	ptr := /* Identifier */ (*VkSamplerAddressMode)(&x.addressModeU)
	return *ptr
}

// WithAddressModeU copies the provided value into C space and stores it
// at addressModeU on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithAddressModeU(y VkSamplerAddressMode) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerAddressMode)(&y)
	x.addressModeU = *ptr
	return x
}

// AddressModeV returns the value of addressModeV from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) AddressModeV() VkSamplerAddressMode {
	ptr := /* Identifier */ (*VkSamplerAddressMode)(&x.addressModeV)
	return *ptr
}

// WithAddressModeV copies the provided value into C space and stores it
// at addressModeV on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithAddressModeV(y VkSamplerAddressMode) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerAddressMode)(&y)
	x.addressModeV = *ptr
	return x
}

// AddressModeW returns the value of addressModeW from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) AddressModeW() VkSamplerAddressMode {
	ptr := /* Identifier */ (*VkSamplerAddressMode)(&x.addressModeW)
	return *ptr
}

// WithAddressModeW copies the provided value into C space and stores it
// at addressModeW on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithAddressModeW(y VkSamplerAddressMode) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerAddressMode)(&y)
	x.addressModeW = *ptr
	return x
}

// MipLodBias returns the value of mipLodBias from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) MipLodBias() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.mipLodBias)
	return *ptr
}

// WithMipLodBias copies the provided value into C space and stores it
// at mipLodBias on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithMipLodBias(y float32) *VkSamplerCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.mipLodBias = *ptr
	return x
}

// AnisotropyEnable returns the value of anisotropyEnable from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) AnisotropyEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.anisotropyEnable)
	return *ptr
}

// WithAnisotropyEnable copies the provided value into C space and stores it
// at anisotropyEnable on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithAnisotropyEnable(y VkBool32) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.anisotropyEnable = *ptr
	return x
}

// MaxAnisotropy returns the value of maxAnisotropy from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) MaxAnisotropy() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.maxAnisotropy)
	return *ptr
}

// WithMaxAnisotropy copies the provided value into C space and stores it
// at maxAnisotropy on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithMaxAnisotropy(y float32) *VkSamplerCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.maxAnisotropy = *ptr
	return x
}

// CompareEnable returns the value of compareEnable from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) CompareEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.compareEnable)
	return *ptr
}

// WithCompareEnable copies the provided value into C space and stores it
// at compareEnable on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithCompareEnable(y VkBool32) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.compareEnable = *ptr
	return x
}

// CompareOp returns the value of compareOp from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) CompareOp() VkCompareOp {
	ptr := /* Identifier */ (*VkCompareOp)(&x.compareOp)
	return *ptr
}

// WithCompareOp copies the provided value into C space and stores it
// at compareOp on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithCompareOp(y VkCompareOp) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkCompareOp)(&y)
	x.compareOp = *ptr
	return x
}

// MinLod returns the value of minLod from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) MinLod() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.minLod)
	return *ptr
}

// WithMinLod copies the provided value into C space and stores it
// at minLod on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithMinLod(y float32) *VkSamplerCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.minLod = *ptr
	return x
}

// MaxLod returns the value of maxLod from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) MaxLod() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.maxLod)
	return *ptr
}

// WithMaxLod copies the provided value into C space and stores it
// at maxLod on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithMaxLod(y float32) *VkSamplerCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.maxLod = *ptr
	return x
}

// BorderColor returns the value of borderColor from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) BorderColor() VkBorderColor {
	ptr := /* Identifier */ (*VkBorderColor)(&x.borderColor)
	return *ptr
}

// WithBorderColor copies the provided value into C space and stores it
// at borderColor on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithBorderColor(y VkBorderColor) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkBorderColor)(&y)
	x.borderColor = *ptr
	return x
}

// UnnormalizedCoordinates returns the value of unnormalizedCoordinates from VkSamplerCreateInfo
func (x VkSamplerCreateInfo) UnnormalizedCoordinates() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.unnormalizedCoordinates)
	return *ptr
}

// WithUnnormalizedCoordinates copies the provided value into C space and stores it
// at unnormalizedCoordinates on VkSamplerCreateInfo
func (x *VkSamplerCreateInfo) WithUnnormalizedCoordinates(y VkBool32) *VkSamplerCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.unnormalizedCoordinates = *ptr
	return x
}

//VkDeviceCreateInfo provides a go interface for VkDeviceCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceCreateInfo.html
type VkDeviceCreateInfo C.struct_VkDeviceCreateInfo

// NewVkDeviceCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceCreateInfo() *VkDeviceCreateInfo {
	sz := unsafe.Sizeof(VkDeviceCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceCreateInfo) AsPtr() *VkDeviceCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceCreateInfo) AsCPtr() *VkDeviceCreateInfo {
	clone := newVkDeviceCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceCreateInfo) WithDefaultSType() *VkDeviceCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithSType(y VkStructureType) *VkDeviceCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithPNext(y unsafe.Pointer) *VkDeviceCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) Flags() VkDeviceCreateFlags {
	ptr := /* Identifier */ (*VkDeviceCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithFlags(y VkDeviceCreateFlags) *VkDeviceCreateInfo {
	ptr := /* Identifier */ (*C.VkDeviceCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// QueueCreateInfoCount returns the value of queueCreateInfoCount from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) QueueCreateInfoCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueCreateInfoCount)
	return *ptr
}

// WithQueueCreateInfoCount copies the provided value into C space and stores it
// at queueCreateInfoCount on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithQueueCreateInfoCount(y uint32) *VkDeviceCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueCreateInfoCount = *ptr
	return x
}

// PQueueCreateInfos returns the value of pQueueCreateInfos from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) PQueueCreateInfos() []VkDeviceQueueCreateInfo {
	ptr := func(x **C.VkDeviceQueueCreateInfo) *[]VkDeviceQueueCreateInfo { /* Slice */
		slc := unsafe.Slice((*VkDeviceQueueCreateInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pQueueCreateInfos)
	return *ptr
}

// WithPQueueCreateInfos copies the provided value into C space and stores it
// at pQueueCreateInfos on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithPQueueCreateInfos(y []VkDeviceQueueCreateInfo) *VkDeviceCreateInfo {
	ptr := func(x *[]VkDeviceQueueCreateInfo) **C.VkDeviceQueueCreateInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDeviceQueueCreateInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDeviceQueueCreateInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pQueueCreateInfos = *ptr
	return x
}

// EnabledLayerCount returns the value of enabledLayerCount from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) EnabledLayerCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.enabledLayerCount)
	return *ptr
}

// WithEnabledLayerCount copies the provided value into C space and stores it
// at enabledLayerCount on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithEnabledLayerCount(y uint32) *VkDeviceCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.enabledLayerCount = *ptr
	return x
}

// PpEnabledLayerNames returns the value of ppEnabledLayerNames from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) PpEnabledLayerNames() []*byte {
	ptr := func(x ***C.char) *[]*byte { /* Slice */
		slc := unsafe.Slice((**byte)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.ppEnabledLayerNames)
	return *ptr
}

// WithPpEnabledLayerNames copies the provided value into C space and stores it
// at ppEnabledLayerNames on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithPpEnabledLayerNames(y []*byte) *VkDeviceCreateInfo {
	ptr := func(x *[]*byte) ***C.char { /* Slice */
		if len(*x) > 0 {
			slc := (**C.char)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (***C.char)(unsafe.Pointer((&ptr)))
	}(&y)
	x.ppEnabledLayerNames = *ptr
	return x
}

// EnabledExtensionCount returns the value of enabledExtensionCount from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) EnabledExtensionCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.enabledExtensionCount)
	return *ptr
}

// WithEnabledExtensionCount copies the provided value into C space and stores it
// at enabledExtensionCount on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithEnabledExtensionCount(y uint32) *VkDeviceCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.enabledExtensionCount = *ptr
	return x
}

// PpEnabledExtensionNames returns the value of ppEnabledExtensionNames from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) PpEnabledExtensionNames() []*byte {
	ptr := func(x ***C.char) *[]*byte { /* Slice */
		slc := unsafe.Slice((**byte)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.ppEnabledExtensionNames)
	return *ptr
}

// WithPpEnabledExtensionNames copies the provided value into C space and stores it
// at ppEnabledExtensionNames on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithPpEnabledExtensionNames(y []*byte) *VkDeviceCreateInfo {
	ptr := func(x *[]*byte) ***C.char { /* Slice */
		if len(*x) > 0 {
			slc := (**C.char)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (***C.char)(unsafe.Pointer((&ptr)))
	}(&y)
	x.ppEnabledExtensionNames = *ptr
	return x
}

// PEnabledFeatures returns the value of pEnabledFeatures from VkDeviceCreateInfo
func (x VkDeviceCreateInfo) PEnabledFeatures() *VkPhysicalDeviceFeatures {
	ptr := func(x **C.VkPhysicalDeviceFeatures) **VkPhysicalDeviceFeatures { /* Pointer */
		return (**VkPhysicalDeviceFeatures)(unsafe.Pointer(x))
	}(&x.pEnabledFeatures)
	return *ptr
}

// WithPEnabledFeatures copies the provided value into C space and stores it
// at pEnabledFeatures on VkDeviceCreateInfo
func (x *VkDeviceCreateInfo) WithPEnabledFeatures(y *VkPhysicalDeviceFeatures) *VkDeviceCreateInfo {
	ptr := func(x **VkPhysicalDeviceFeatures) **C.VkPhysicalDeviceFeatures { /* Pointer */
		return (**C.VkPhysicalDeviceFeatures)(unsafe.Pointer(x))
	}(&y)
	x.pEnabledFeatures = *ptr
	return x
}

//VkQueueFamilyProperties provides a go interface for VkQueueFamilyProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueueFamilyProperties.html
type VkQueueFamilyProperties C.struct_VkQueueFamilyProperties

// NewVkQueueFamilyProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkQueueFamilyProperties() *VkQueueFamilyProperties {
	sz := unsafe.Sizeof(VkQueueFamilyProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkQueueFamilyProperties)(ptr)
}

// Free releases the memory allocated by the NewVkQueueFamilyProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkQueueFamilyProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkQueueFamilyProperties) AsPtr() *VkQueueFamilyProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkQueueFamilyProperties) AsCPtr() *VkQueueFamilyProperties {
	clone := newVkQueueFamilyProperties()
	*clone = *x
	return clone
}

// QueueFlags returns the value of queueFlags from VkQueueFamilyProperties
func (x VkQueueFamilyProperties) QueueFlags() VkQueueFlags {
	ptr := /* Identifier */ (*VkQueueFlags)(&x.queueFlags)
	return *ptr
}

// QueueCount returns the value of queueCount from VkQueueFamilyProperties
func (x VkQueueFamilyProperties) QueueCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueCount)
	return *ptr
}

// TimestampValidBits returns the value of timestampValidBits from VkQueueFamilyProperties
func (x VkQueueFamilyProperties) TimestampValidBits() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.timestampValidBits)
	return *ptr
}

// MinImageTransferGranularity returns the value of minImageTransferGranularity from VkQueueFamilyProperties
func (x VkQueueFamilyProperties) MinImageTransferGranularity() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.minImageTransferGranularity)
	return *ptr
}

//VkPhysicalDeviceSparseProperties provides a go interface for VkPhysicalDeviceSparseProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSparseProperties.html
type VkPhysicalDeviceSparseProperties C.struct_VkPhysicalDeviceSparseProperties

// NewVkPhysicalDeviceSparseProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceSparseProperties() *VkPhysicalDeviceSparseProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceSparseProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceSparseProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceSparseProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceSparseProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceSparseProperties) AsPtr() *VkPhysicalDeviceSparseProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceSparseProperties) AsCPtr() *VkPhysicalDeviceSparseProperties {
	clone := newVkPhysicalDeviceSparseProperties()
	*clone = *x
	return clone
}

// ResidencyStandard2DBlockShape returns the value of residencyStandard2DBlockShape from VkPhysicalDeviceSparseProperties
func (x VkPhysicalDeviceSparseProperties) ResidencyStandard2DBlockShape() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.residencyStandard2DBlockShape)
	return *ptr
}

// ResidencyStandard2DMultisampleBlockShape returns the value of residencyStandard2DMultisampleBlockShape from VkPhysicalDeviceSparseProperties
func (x VkPhysicalDeviceSparseProperties) ResidencyStandard2DMultisampleBlockShape() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.residencyStandard2DMultisampleBlockShape)
	return *ptr
}

// ResidencyStandard3DBlockShape returns the value of residencyStandard3DBlockShape from VkPhysicalDeviceSparseProperties
func (x VkPhysicalDeviceSparseProperties) ResidencyStandard3DBlockShape() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.residencyStandard3DBlockShape)
	return *ptr
}

// ResidencyAlignedMipSize returns the value of residencyAlignedMipSize from VkPhysicalDeviceSparseProperties
func (x VkPhysicalDeviceSparseProperties) ResidencyAlignedMipSize() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.residencyAlignedMipSize)
	return *ptr
}

// ResidencyNonResidentStrict returns the value of residencyNonResidentStrict from VkPhysicalDeviceSparseProperties
func (x VkPhysicalDeviceSparseProperties) ResidencyNonResidentStrict() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.residencyNonResidentStrict)
	return *ptr
}

//VkPhysicalDeviceProperties provides a go interface for VkPhysicalDeviceProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProperties.html
type VkPhysicalDeviceProperties C.struct_VkPhysicalDeviceProperties

// NewVkPhysicalDeviceProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceProperties() *VkPhysicalDeviceProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceProperties) AsPtr() *VkPhysicalDeviceProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceProperties) AsCPtr() *VkPhysicalDeviceProperties {
	clone := newVkPhysicalDeviceProperties()
	*clone = *x
	return clone
}

// ApiVersion returns the value of apiVersion from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) ApiVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.apiVersion)
	return *ptr
}

// DriverVersion returns the value of driverVersion from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) DriverVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.driverVersion)
	return *ptr
}

// VendorID returns the value of vendorID from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) VendorID() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.vendorID)
	return *ptr
}

// DeviceID returns the value of deviceID from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) DeviceID() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceID)
	return *ptr
}

// DeviceType returns the value of deviceType from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) DeviceType() VkPhysicalDeviceType {
	ptr := /* Identifier */ (*VkPhysicalDeviceType)(&x.deviceType)
	return *ptr
}

// DeviceName returns the value of deviceName from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) DeviceName() []byte {
	ptr := func(x *[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_PHYSICAL_DEVICE_NAME_SIZE)
		return &slc
	}(&x.deviceName)
	return *ptr
}

// PipelineCacheUUID returns the value of pipelineCacheUUID from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) PipelineCacheUUID() []byte {
	ptr := func(x *[VK_UUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_UUID_SIZE)
		return &slc
	}(&x.pipelineCacheUUID)
	return *ptr
}

// Limits returns the value of limits from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) Limits() VkPhysicalDeviceLimits {
	ptr := /* Identifier */ (*VkPhysicalDeviceLimits)(&x.limits)
	return *ptr
}

// SparseProperties returns the value of sparseProperties from VkPhysicalDeviceProperties
func (x VkPhysicalDeviceProperties) SparseProperties() VkPhysicalDeviceSparseProperties {
	ptr := /* Identifier */ (*VkPhysicalDeviceSparseProperties)(&x.sparseProperties)
	return *ptr
}

//VkPhysicalDeviceMemoryProperties provides a go interface for VkPhysicalDeviceMemoryProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMemoryProperties.html
type VkPhysicalDeviceMemoryProperties C.struct_VkPhysicalDeviceMemoryProperties

// NewVkPhysicalDeviceMemoryProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceMemoryProperties() *VkPhysicalDeviceMemoryProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceMemoryProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceMemoryProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceMemoryProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceMemoryProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceMemoryProperties) AsPtr() *VkPhysicalDeviceMemoryProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceMemoryProperties) AsCPtr() *VkPhysicalDeviceMemoryProperties {
	clone := newVkPhysicalDeviceMemoryProperties()
	*clone = *x
	return clone
}

// MemoryTypeCount returns the value of memoryTypeCount from VkPhysicalDeviceMemoryProperties
func (x VkPhysicalDeviceMemoryProperties) MemoryTypeCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.memoryTypeCount)
	return *ptr
}

// MemoryTypes returns the value of memoryTypes from VkPhysicalDeviceMemoryProperties
func (x VkPhysicalDeviceMemoryProperties) MemoryTypes() []VkMemoryType {
	ptr := func(x *[VK_MAX_MEMORY_TYPES]C.VkMemoryType) *[]VkMemoryType { /* Array */
		slc := unsafe.Slice((*VkMemoryType)(unsafe.Pointer(x)), VK_MAX_MEMORY_TYPES)
		return &slc
	}(&x.memoryTypes)
	return *ptr
}

// MemoryHeapCount returns the value of memoryHeapCount from VkPhysicalDeviceMemoryProperties
func (x VkPhysicalDeviceMemoryProperties) MemoryHeapCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.memoryHeapCount)
	return *ptr
}

// MemoryHeaps returns the value of memoryHeaps from VkPhysicalDeviceMemoryProperties
func (x VkPhysicalDeviceMemoryProperties) MemoryHeaps() []VkMemoryHeap {
	ptr := func(x *[VK_MAX_MEMORY_HEAPS]C.VkMemoryHeap) *[]VkMemoryHeap { /* Array */
		slc := unsafe.Slice((*VkMemoryHeap)(unsafe.Pointer(x)), VK_MAX_MEMORY_HEAPS)
		return &slc
	}(&x.memoryHeaps)
	return *ptr
}

//VkPhysicalDeviceLimits provides a go interface for VkPhysicalDeviceLimits.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceLimits.html
type VkPhysicalDeviceLimits C.struct_VkPhysicalDeviceLimits

// NewVkPhysicalDeviceLimits allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceLimits() *VkPhysicalDeviceLimits {
	sz := unsafe.Sizeof(VkPhysicalDeviceLimits{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceLimits)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceLimits method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceLimits) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceLimits) AsPtr() *VkPhysicalDeviceLimits { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceLimits) AsCPtr() *VkPhysicalDeviceLimits {
	clone := newVkPhysicalDeviceLimits()
	*clone = *x
	return clone
}

// MaxImageDimension1D returns the value of maxImageDimension1D from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxImageDimension1D() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxImageDimension1D)
	return *ptr
}

// MaxImageDimension2D returns the value of maxImageDimension2D from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxImageDimension2D() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxImageDimension2D)
	return *ptr
}

// MaxImageDimension3D returns the value of maxImageDimension3D from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxImageDimension3D() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxImageDimension3D)
	return *ptr
}

// MaxImageDimensionCube returns the value of maxImageDimensionCube from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxImageDimensionCube() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxImageDimensionCube)
	return *ptr
}

// MaxImageArrayLayers returns the value of maxImageArrayLayers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxImageArrayLayers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxImageArrayLayers)
	return *ptr
}

// MaxTexelBufferElements returns the value of maxTexelBufferElements from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTexelBufferElements() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTexelBufferElements)
	return *ptr
}

// MaxUniformBufferRange returns the value of maxUniformBufferRange from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxUniformBufferRange() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxUniformBufferRange)
	return *ptr
}

// MaxStorageBufferRange returns the value of maxStorageBufferRange from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxStorageBufferRange() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxStorageBufferRange)
	return *ptr
}

// MaxPushConstantsSize returns the value of maxPushConstantsSize from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPushConstantsSize() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPushConstantsSize)
	return *ptr
}

// MaxMemoryAllocationCount returns the value of maxMemoryAllocationCount from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxMemoryAllocationCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxMemoryAllocationCount)
	return *ptr
}

// MaxSamplerAllocationCount returns the value of maxSamplerAllocationCount from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxSamplerAllocationCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxSamplerAllocationCount)
	return *ptr
}

// BufferImageGranularity returns the value of bufferImageGranularity from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) BufferImageGranularity() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.bufferImageGranularity)
	return *ptr
}

// SparseAddressSpaceSize returns the value of sparseAddressSpaceSize from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SparseAddressSpaceSize() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.sparseAddressSpaceSize)
	return *ptr
}

// MaxBoundDescriptorSets returns the value of maxBoundDescriptorSets from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxBoundDescriptorSets() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxBoundDescriptorSets)
	return *ptr
}

// MaxPerStageDescriptorSamplers returns the value of maxPerStageDescriptorSamplers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPerStageDescriptorSamplers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorSamplers)
	return *ptr
}

// MaxPerStageDescriptorUniformBuffers returns the value of maxPerStageDescriptorUniformBuffers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPerStageDescriptorUniformBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUniformBuffers)
	return *ptr
}

// MaxPerStageDescriptorStorageBuffers returns the value of maxPerStageDescriptorStorageBuffers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPerStageDescriptorStorageBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorStorageBuffers)
	return *ptr
}

// MaxPerStageDescriptorSampledImages returns the value of maxPerStageDescriptorSampledImages from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPerStageDescriptorSampledImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorSampledImages)
	return *ptr
}

// MaxPerStageDescriptorStorageImages returns the value of maxPerStageDescriptorStorageImages from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPerStageDescriptorStorageImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorStorageImages)
	return *ptr
}

// MaxPerStageDescriptorInputAttachments returns the value of maxPerStageDescriptorInputAttachments from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPerStageDescriptorInputAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorInputAttachments)
	return *ptr
}

// MaxPerStageResources returns the value of maxPerStageResources from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxPerStageResources() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageResources)
	return *ptr
}

// MaxDescriptorSetSamplers returns the value of maxDescriptorSetSamplers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetSamplers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetSamplers)
	return *ptr
}

// MaxDescriptorSetUniformBuffers returns the value of maxDescriptorSetUniformBuffers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetUniformBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUniformBuffers)
	return *ptr
}

// MaxDescriptorSetUniformBuffersDynamic returns the value of maxDescriptorSetUniformBuffersDynamic from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetUniformBuffersDynamic() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUniformBuffersDynamic)
	return *ptr
}

// MaxDescriptorSetStorageBuffers returns the value of maxDescriptorSetStorageBuffers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetStorageBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetStorageBuffers)
	return *ptr
}

// MaxDescriptorSetStorageBuffersDynamic returns the value of maxDescriptorSetStorageBuffersDynamic from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetStorageBuffersDynamic() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetStorageBuffersDynamic)
	return *ptr
}

// MaxDescriptorSetSampledImages returns the value of maxDescriptorSetSampledImages from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetSampledImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetSampledImages)
	return *ptr
}

// MaxDescriptorSetStorageImages returns the value of maxDescriptorSetStorageImages from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetStorageImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetStorageImages)
	return *ptr
}

// MaxDescriptorSetInputAttachments returns the value of maxDescriptorSetInputAttachments from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDescriptorSetInputAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetInputAttachments)
	return *ptr
}

// MaxVertexInputAttributes returns the value of maxVertexInputAttributes from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxVertexInputAttributes() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxVertexInputAttributes)
	return *ptr
}

// MaxVertexInputBindings returns the value of maxVertexInputBindings from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxVertexInputBindings() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxVertexInputBindings)
	return *ptr
}

// MaxVertexInputAttributeOffset returns the value of maxVertexInputAttributeOffset from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxVertexInputAttributeOffset() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxVertexInputAttributeOffset)
	return *ptr
}

// MaxVertexInputBindingStride returns the value of maxVertexInputBindingStride from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxVertexInputBindingStride() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxVertexInputBindingStride)
	return *ptr
}

// MaxVertexOutputComponents returns the value of maxVertexOutputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxVertexOutputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxVertexOutputComponents)
	return *ptr
}

// MaxTessellationGenerationLevel returns the value of maxTessellationGenerationLevel from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationGenerationLevel() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationGenerationLevel)
	return *ptr
}

// MaxTessellationPatchSize returns the value of maxTessellationPatchSize from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationPatchSize() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationPatchSize)
	return *ptr
}

// MaxTessellationControlPerVertexInputComponents returns the value of maxTessellationControlPerVertexInputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationControlPerVertexInputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationControlPerVertexInputComponents)
	return *ptr
}

// MaxTessellationControlPerVertexOutputComponents returns the value of maxTessellationControlPerVertexOutputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationControlPerVertexOutputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationControlPerVertexOutputComponents)
	return *ptr
}

// MaxTessellationControlPerPatchOutputComponents returns the value of maxTessellationControlPerPatchOutputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationControlPerPatchOutputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationControlPerPatchOutputComponents)
	return *ptr
}

// MaxTessellationControlTotalOutputComponents returns the value of maxTessellationControlTotalOutputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationControlTotalOutputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationControlTotalOutputComponents)
	return *ptr
}

// MaxTessellationEvaluationInputComponents returns the value of maxTessellationEvaluationInputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationEvaluationInputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationEvaluationInputComponents)
	return *ptr
}

// MaxTessellationEvaluationOutputComponents returns the value of maxTessellationEvaluationOutputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTessellationEvaluationOutputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTessellationEvaluationOutputComponents)
	return *ptr
}

// MaxGeometryShaderInvocations returns the value of maxGeometryShaderInvocations from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxGeometryShaderInvocations() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxGeometryShaderInvocations)
	return *ptr
}

// MaxGeometryInputComponents returns the value of maxGeometryInputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxGeometryInputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxGeometryInputComponents)
	return *ptr
}

// MaxGeometryOutputComponents returns the value of maxGeometryOutputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxGeometryOutputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxGeometryOutputComponents)
	return *ptr
}

// MaxGeometryOutputVertices returns the value of maxGeometryOutputVertices from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxGeometryOutputVertices() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxGeometryOutputVertices)
	return *ptr
}

// MaxGeometryTotalOutputComponents returns the value of maxGeometryTotalOutputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxGeometryTotalOutputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxGeometryTotalOutputComponents)
	return *ptr
}

// MaxFragmentInputComponents returns the value of maxFragmentInputComponents from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxFragmentInputComponents() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxFragmentInputComponents)
	return *ptr
}

// MaxFragmentOutputAttachments returns the value of maxFragmentOutputAttachments from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxFragmentOutputAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxFragmentOutputAttachments)
	return *ptr
}

// MaxFragmentDualSrcAttachments returns the value of maxFragmentDualSrcAttachments from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxFragmentDualSrcAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxFragmentDualSrcAttachments)
	return *ptr
}

// MaxFragmentCombinedOutputResources returns the value of maxFragmentCombinedOutputResources from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxFragmentCombinedOutputResources() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxFragmentCombinedOutputResources)
	return *ptr
}

// MaxComputeSharedMemorySize returns the value of maxComputeSharedMemorySize from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxComputeSharedMemorySize() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxComputeSharedMemorySize)
	return *ptr
}

// MaxComputeWorkGroupCount returns the value of maxComputeWorkGroupCount from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxComputeWorkGroupCount() []uint32 {
	ptr := func(x *[3]C.uint) *[]uint32 { /* Array */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), 3)
		return &slc
	}(&x.maxComputeWorkGroupCount)
	return *ptr
}

// MaxComputeWorkGroupInvocations returns the value of maxComputeWorkGroupInvocations from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxComputeWorkGroupInvocations() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxComputeWorkGroupInvocations)
	return *ptr
}

// MaxComputeWorkGroupSize returns the value of maxComputeWorkGroupSize from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxComputeWorkGroupSize() []uint32 {
	ptr := func(x *[3]C.uint) *[]uint32 { /* Array */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), 3)
		return &slc
	}(&x.maxComputeWorkGroupSize)
	return *ptr
}

// SubPixelPrecisionBits returns the value of subPixelPrecisionBits from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SubPixelPrecisionBits() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subPixelPrecisionBits)
	return *ptr
}

// SubTexelPrecisionBits returns the value of subTexelPrecisionBits from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SubTexelPrecisionBits() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subTexelPrecisionBits)
	return *ptr
}

// MipmapPrecisionBits returns the value of mipmapPrecisionBits from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MipmapPrecisionBits() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.mipmapPrecisionBits)
	return *ptr
}

// MaxDrawIndexedIndexValue returns the value of maxDrawIndexedIndexValue from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDrawIndexedIndexValue() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDrawIndexedIndexValue)
	return *ptr
}

// MaxDrawIndirectCount returns the value of maxDrawIndirectCount from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxDrawIndirectCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDrawIndirectCount)
	return *ptr
}

// MaxSamplerLodBias returns the value of maxSamplerLodBias from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxSamplerLodBias() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.maxSamplerLodBias)
	return *ptr
}

// MaxSamplerAnisotropy returns the value of maxSamplerAnisotropy from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxSamplerAnisotropy() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.maxSamplerAnisotropy)
	return *ptr
}

// MaxViewports returns the value of maxViewports from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxViewports() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxViewports)
	return *ptr
}

// MaxViewportDimensions returns the value of maxViewportDimensions from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxViewportDimensions() []uint32 {
	ptr := func(x *[2]C.uint) *[]uint32 { /* Array */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), 2)
		return &slc
	}(&x.maxViewportDimensions)
	return *ptr
}

// ViewportBoundsRange returns the value of viewportBoundsRange from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) ViewportBoundsRange() []float32 {
	ptr := func(x *[2]C.float) *[]float32 { /* Array */
		slc := unsafe.Slice((*float32)(unsafe.Pointer(x)), 2)
		return &slc
	}(&x.viewportBoundsRange)
	return *ptr
}

// ViewportSubPixelBits returns the value of viewportSubPixelBits from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) ViewportSubPixelBits() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.viewportSubPixelBits)
	return *ptr
}

// MinMemoryMapAlignment returns the value of minMemoryMapAlignment from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MinMemoryMapAlignment() uint32 {
	ptr := func(x *C.ulong) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.minMemoryMapAlignment)
	return *ptr
}

// MinTexelBufferOffsetAlignment returns the value of minTexelBufferOffsetAlignment from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MinTexelBufferOffsetAlignment() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.minTexelBufferOffsetAlignment)
	return *ptr
}

// MinUniformBufferOffsetAlignment returns the value of minUniformBufferOffsetAlignment from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MinUniformBufferOffsetAlignment() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.minUniformBufferOffsetAlignment)
	return *ptr
}

// MinStorageBufferOffsetAlignment returns the value of minStorageBufferOffsetAlignment from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MinStorageBufferOffsetAlignment() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.minStorageBufferOffsetAlignment)
	return *ptr
}

// MinTexelOffset returns the value of minTexelOffset from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MinTexelOffset() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.minTexelOffset)
	return *ptr
}

// MaxTexelOffset returns the value of maxTexelOffset from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTexelOffset() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTexelOffset)
	return *ptr
}

// MinTexelGatherOffset returns the value of minTexelGatherOffset from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MinTexelGatherOffset() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.minTexelGatherOffset)
	return *ptr
}

// MaxTexelGatherOffset returns the value of maxTexelGatherOffset from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxTexelGatherOffset() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxTexelGatherOffset)
	return *ptr
}

// MinInterpolationOffset returns the value of minInterpolationOffset from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MinInterpolationOffset() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.minInterpolationOffset)
	return *ptr
}

// MaxInterpolationOffset returns the value of maxInterpolationOffset from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxInterpolationOffset() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.maxInterpolationOffset)
	return *ptr
}

// SubPixelInterpolationOffsetBits returns the value of subPixelInterpolationOffsetBits from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SubPixelInterpolationOffsetBits() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subPixelInterpolationOffsetBits)
	return *ptr
}

// MaxFramebufferWidth returns the value of maxFramebufferWidth from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxFramebufferWidth() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxFramebufferWidth)
	return *ptr
}

// MaxFramebufferHeight returns the value of maxFramebufferHeight from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxFramebufferHeight() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxFramebufferHeight)
	return *ptr
}

// MaxFramebufferLayers returns the value of maxFramebufferLayers from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxFramebufferLayers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxFramebufferLayers)
	return *ptr
}

// FramebufferColorSampleCounts returns the value of framebufferColorSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) FramebufferColorSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.framebufferColorSampleCounts)
	return *ptr
}

// FramebufferDepthSampleCounts returns the value of framebufferDepthSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) FramebufferDepthSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.framebufferDepthSampleCounts)
	return *ptr
}

// FramebufferStencilSampleCounts returns the value of framebufferStencilSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) FramebufferStencilSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.framebufferStencilSampleCounts)
	return *ptr
}

// FramebufferNoAttachmentsSampleCounts returns the value of framebufferNoAttachmentsSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) FramebufferNoAttachmentsSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.framebufferNoAttachmentsSampleCounts)
	return *ptr
}

// MaxColorAttachments returns the value of maxColorAttachments from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxColorAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxColorAttachments)
	return *ptr
}

// SampledImageColorSampleCounts returns the value of sampledImageColorSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SampledImageColorSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.sampledImageColorSampleCounts)
	return *ptr
}

// SampledImageIntegerSampleCounts returns the value of sampledImageIntegerSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SampledImageIntegerSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.sampledImageIntegerSampleCounts)
	return *ptr
}

// SampledImageDepthSampleCounts returns the value of sampledImageDepthSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SampledImageDepthSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.sampledImageDepthSampleCounts)
	return *ptr
}

// SampledImageStencilSampleCounts returns the value of sampledImageStencilSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) SampledImageStencilSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.sampledImageStencilSampleCounts)
	return *ptr
}

// StorageImageSampleCounts returns the value of storageImageSampleCounts from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) StorageImageSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.storageImageSampleCounts)
	return *ptr
}

// MaxSampleMaskWords returns the value of maxSampleMaskWords from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxSampleMaskWords() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxSampleMaskWords)
	return *ptr
}

// TimestampComputeAndGraphics returns the value of timestampComputeAndGraphics from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) TimestampComputeAndGraphics() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.timestampComputeAndGraphics)
	return *ptr
}

// TimestampPeriod returns the value of timestampPeriod from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) TimestampPeriod() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.timestampPeriod)
	return *ptr
}

// MaxClipDistances returns the value of maxClipDistances from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxClipDistances() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxClipDistances)
	return *ptr
}

// MaxCullDistances returns the value of maxCullDistances from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxCullDistances() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxCullDistances)
	return *ptr
}

// MaxCombinedClipAndCullDistances returns the value of maxCombinedClipAndCullDistances from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) MaxCombinedClipAndCullDistances() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxCombinedClipAndCullDistances)
	return *ptr
}

// DiscreteQueuePriorities returns the value of discreteQueuePriorities from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) DiscreteQueuePriorities() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.discreteQueuePriorities)
	return *ptr
}

// PointSizeRange returns the value of pointSizeRange from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) PointSizeRange() []float32 {
	ptr := func(x *[2]C.float) *[]float32 { /* Array */
		slc := unsafe.Slice((*float32)(unsafe.Pointer(x)), 2)
		return &slc
	}(&x.pointSizeRange)
	return *ptr
}

// LineWidthRange returns the value of lineWidthRange from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) LineWidthRange() []float32 {
	ptr := func(x *[2]C.float) *[]float32 { /* Array */
		slc := unsafe.Slice((*float32)(unsafe.Pointer(x)), 2)
		return &slc
	}(&x.lineWidthRange)
	return *ptr
}

// PointSizeGranularity returns the value of pointSizeGranularity from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) PointSizeGranularity() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.pointSizeGranularity)
	return *ptr
}

// LineWidthGranularity returns the value of lineWidthGranularity from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) LineWidthGranularity() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.lineWidthGranularity)
	return *ptr
}

// StrictLines returns the value of strictLines from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) StrictLines() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.strictLines)
	return *ptr
}

// StandardSampleLocations returns the value of standardSampleLocations from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) StandardSampleLocations() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.standardSampleLocations)
	return *ptr
}

// OptimalBufferCopyOffsetAlignment returns the value of optimalBufferCopyOffsetAlignment from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) OptimalBufferCopyOffsetAlignment() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.optimalBufferCopyOffsetAlignment)
	return *ptr
}

// OptimalBufferCopyRowPitchAlignment returns the value of optimalBufferCopyRowPitchAlignment from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) OptimalBufferCopyRowPitchAlignment() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.optimalBufferCopyRowPitchAlignment)
	return *ptr
}

// NonCoherentAtomSize returns the value of nonCoherentAtomSize from VkPhysicalDeviceLimits
func (x VkPhysicalDeviceLimits) NonCoherentAtomSize() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.nonCoherentAtomSize)
	return *ptr
}

//VkPhysicalDeviceFeatures provides a go interface for VkPhysicalDeviceFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFeatures.html
type VkPhysicalDeviceFeatures C.struct_VkPhysicalDeviceFeatures

// NewVkPhysicalDeviceFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceFeatures() *VkPhysicalDeviceFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceFeatures) AsPtr() *VkPhysicalDeviceFeatures { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceFeatures) AsCPtr() *VkPhysicalDeviceFeatures {
	clone := newVkPhysicalDeviceFeatures()
	*clone = *x
	return clone
}

// RobustBufferAccess returns the value of robustBufferAccess from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) RobustBufferAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.robustBufferAccess)
	return *ptr
}

// WithRobustBufferAccess copies the provided value into C space and stores it
// at robustBufferAccess on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithRobustBufferAccess(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.robustBufferAccess = *ptr
	return x
}

// FullDrawIndexUint32 returns the value of fullDrawIndexUint32 from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) FullDrawIndexUint32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.fullDrawIndexUint32)
	return *ptr
}

// WithFullDrawIndexUint32 copies the provided value into C space and stores it
// at fullDrawIndexUint32 on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithFullDrawIndexUint32(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.fullDrawIndexUint32 = *ptr
	return x
}

// ImageCubeArray returns the value of imageCubeArray from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ImageCubeArray() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.imageCubeArray)
	return *ptr
}

// WithImageCubeArray copies the provided value into C space and stores it
// at imageCubeArray on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithImageCubeArray(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.imageCubeArray = *ptr
	return x
}

// IndependentBlend returns the value of independentBlend from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) IndependentBlend() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.independentBlend)
	return *ptr
}

// WithIndependentBlend copies the provided value into C space and stores it
// at independentBlend on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithIndependentBlend(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.independentBlend = *ptr
	return x
}

// GeometryShader returns the value of geometryShader from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) GeometryShader() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.geometryShader)
	return *ptr
}

// WithGeometryShader copies the provided value into C space and stores it
// at geometryShader on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithGeometryShader(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.geometryShader = *ptr
	return x
}

// TessellationShader returns the value of tessellationShader from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) TessellationShader() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.tessellationShader)
	return *ptr
}

// WithTessellationShader copies the provided value into C space and stores it
// at tessellationShader on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithTessellationShader(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.tessellationShader = *ptr
	return x
}

// SampleRateShading returns the value of sampleRateShading from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SampleRateShading() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sampleRateShading)
	return *ptr
}

// WithSampleRateShading copies the provided value into C space and stores it
// at sampleRateShading on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSampleRateShading(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sampleRateShading = *ptr
	return x
}

// DualSrcBlend returns the value of dualSrcBlend from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) DualSrcBlend() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.dualSrcBlend)
	return *ptr
}

// WithDualSrcBlend copies the provided value into C space and stores it
// at dualSrcBlend on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithDualSrcBlend(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.dualSrcBlend = *ptr
	return x
}

// LogicOp returns the value of logicOp from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) LogicOp() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.logicOp)
	return *ptr
}

// WithLogicOp copies the provided value into C space and stores it
// at logicOp on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithLogicOp(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.logicOp = *ptr
	return x
}

// MultiDrawIndirect returns the value of multiDrawIndirect from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) MultiDrawIndirect() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiDrawIndirect)
	return *ptr
}

// WithMultiDrawIndirect copies the provided value into C space and stores it
// at multiDrawIndirect on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithMultiDrawIndirect(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiDrawIndirect = *ptr
	return x
}

// DrawIndirectFirstInstance returns the value of drawIndirectFirstInstance from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) DrawIndirectFirstInstance() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.drawIndirectFirstInstance)
	return *ptr
}

// WithDrawIndirectFirstInstance copies the provided value into C space and stores it
// at drawIndirectFirstInstance on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithDrawIndirectFirstInstance(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.drawIndirectFirstInstance = *ptr
	return x
}

// DepthClamp returns the value of depthClamp from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) DepthClamp() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthClamp)
	return *ptr
}

// WithDepthClamp copies the provided value into C space and stores it
// at depthClamp on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithDepthClamp(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthClamp = *ptr
	return x
}

// DepthBiasClamp returns the value of depthBiasClamp from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) DepthBiasClamp() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthBiasClamp)
	return *ptr
}

// WithDepthBiasClamp copies the provided value into C space and stores it
// at depthBiasClamp on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithDepthBiasClamp(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthBiasClamp = *ptr
	return x
}

// FillModeNonSolid returns the value of fillModeNonSolid from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) FillModeNonSolid() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.fillModeNonSolid)
	return *ptr
}

// WithFillModeNonSolid copies the provided value into C space and stores it
// at fillModeNonSolid on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithFillModeNonSolid(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.fillModeNonSolid = *ptr
	return x
}

// DepthBounds returns the value of depthBounds from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) DepthBounds() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthBounds)
	return *ptr
}

// WithDepthBounds copies the provided value into C space and stores it
// at depthBounds on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithDepthBounds(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthBounds = *ptr
	return x
}

// WideLines returns the value of wideLines from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) WideLines() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.wideLines)
	return *ptr
}

// WithWideLines copies the provided value into C space and stores it
// at wideLines on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithWideLines(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.wideLines = *ptr
	return x
}

// LargePoints returns the value of largePoints from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) LargePoints() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.largePoints)
	return *ptr
}

// WithLargePoints copies the provided value into C space and stores it
// at largePoints on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithLargePoints(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.largePoints = *ptr
	return x
}

// AlphaToOne returns the value of alphaToOne from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) AlphaToOne() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.alphaToOne)
	return *ptr
}

// WithAlphaToOne copies the provided value into C space and stores it
// at alphaToOne on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithAlphaToOne(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.alphaToOne = *ptr
	return x
}

// MultiViewport returns the value of multiViewport from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) MultiViewport() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiViewport)
	return *ptr
}

// WithMultiViewport copies the provided value into C space and stores it
// at multiViewport on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithMultiViewport(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiViewport = *ptr
	return x
}

// SamplerAnisotropy returns the value of samplerAnisotropy from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SamplerAnisotropy() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.samplerAnisotropy)
	return *ptr
}

// WithSamplerAnisotropy copies the provided value into C space and stores it
// at samplerAnisotropy on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSamplerAnisotropy(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.samplerAnisotropy = *ptr
	return x
}

// TextureCompressionETC2 returns the value of textureCompressionETC2 from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) TextureCompressionETC2() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.textureCompressionETC2)
	return *ptr
}

// WithTextureCompressionETC2 copies the provided value into C space and stores it
// at textureCompressionETC2 on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithTextureCompressionETC2(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.textureCompressionETC2 = *ptr
	return x
}

// TextureCompressionASTC_LDR returns the value of textureCompressionASTC_LDR from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) TextureCompressionASTC_LDR() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.textureCompressionASTC_LDR)
	return *ptr
}

// WithTextureCompressionASTC_LDR copies the provided value into C space and stores it
// at textureCompressionASTC_LDR on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithTextureCompressionASTC_LDR(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.textureCompressionASTC_LDR = *ptr
	return x
}

// TextureCompressionBC returns the value of textureCompressionBC from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) TextureCompressionBC() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.textureCompressionBC)
	return *ptr
}

// WithTextureCompressionBC copies the provided value into C space and stores it
// at textureCompressionBC on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithTextureCompressionBC(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.textureCompressionBC = *ptr
	return x
}

// OcclusionQueryPrecise returns the value of occlusionQueryPrecise from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) OcclusionQueryPrecise() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.occlusionQueryPrecise)
	return *ptr
}

// WithOcclusionQueryPrecise copies the provided value into C space and stores it
// at occlusionQueryPrecise on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithOcclusionQueryPrecise(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.occlusionQueryPrecise = *ptr
	return x
}

// PipelineStatisticsQuery returns the value of pipelineStatisticsQuery from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) PipelineStatisticsQuery() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.pipelineStatisticsQuery)
	return *ptr
}

// WithPipelineStatisticsQuery copies the provided value into C space and stores it
// at pipelineStatisticsQuery on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithPipelineStatisticsQuery(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.pipelineStatisticsQuery = *ptr
	return x
}

// VertexPipelineStoresAndAtomics returns the value of vertexPipelineStoresAndAtomics from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) VertexPipelineStoresAndAtomics() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.vertexPipelineStoresAndAtomics)
	return *ptr
}

// WithVertexPipelineStoresAndAtomics copies the provided value into C space and stores it
// at vertexPipelineStoresAndAtomics on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithVertexPipelineStoresAndAtomics(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.vertexPipelineStoresAndAtomics = *ptr
	return x
}

// FragmentStoresAndAtomics returns the value of fragmentStoresAndAtomics from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) FragmentStoresAndAtomics() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.fragmentStoresAndAtomics)
	return *ptr
}

// WithFragmentStoresAndAtomics copies the provided value into C space and stores it
// at fragmentStoresAndAtomics on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithFragmentStoresAndAtomics(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.fragmentStoresAndAtomics = *ptr
	return x
}

// ShaderTessellationAndGeometryPointSize returns the value of shaderTessellationAndGeometryPointSize from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderTessellationAndGeometryPointSize() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderTessellationAndGeometryPointSize)
	return *ptr
}

// WithShaderTessellationAndGeometryPointSize copies the provided value into C space and stores it
// at shaderTessellationAndGeometryPointSize on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderTessellationAndGeometryPointSize(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderTessellationAndGeometryPointSize = *ptr
	return x
}

// ShaderImageGatherExtended returns the value of shaderImageGatherExtended from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderImageGatherExtended() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderImageGatherExtended)
	return *ptr
}

// WithShaderImageGatherExtended copies the provided value into C space and stores it
// at shaderImageGatherExtended on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderImageGatherExtended(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderImageGatherExtended = *ptr
	return x
}

// ShaderStorageImageExtendedFormats returns the value of shaderStorageImageExtendedFormats from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderStorageImageExtendedFormats() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageExtendedFormats)
	return *ptr
}

// WithShaderStorageImageExtendedFormats copies the provided value into C space and stores it
// at shaderStorageImageExtendedFormats on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderStorageImageExtendedFormats(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageImageExtendedFormats = *ptr
	return x
}

// ShaderStorageImageMultisample returns the value of shaderStorageImageMultisample from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderStorageImageMultisample() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageMultisample)
	return *ptr
}

// WithShaderStorageImageMultisample copies the provided value into C space and stores it
// at shaderStorageImageMultisample on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderStorageImageMultisample(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageImageMultisample = *ptr
	return x
}

// ShaderStorageImageReadWithoutFormat returns the value of shaderStorageImageReadWithoutFormat from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderStorageImageReadWithoutFormat() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageReadWithoutFormat)
	return *ptr
}

// WithShaderStorageImageReadWithoutFormat copies the provided value into C space and stores it
// at shaderStorageImageReadWithoutFormat on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderStorageImageReadWithoutFormat(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageImageReadWithoutFormat = *ptr
	return x
}

// ShaderStorageImageWriteWithoutFormat returns the value of shaderStorageImageWriteWithoutFormat from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderStorageImageWriteWithoutFormat() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageWriteWithoutFormat)
	return *ptr
}

// WithShaderStorageImageWriteWithoutFormat copies the provided value into C space and stores it
// at shaderStorageImageWriteWithoutFormat on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderStorageImageWriteWithoutFormat(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageImageWriteWithoutFormat = *ptr
	return x
}

// ShaderUniformBufferArrayDynamicIndexing returns the value of shaderUniformBufferArrayDynamicIndexing from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderUniformBufferArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformBufferArrayDynamicIndexing)
	return *ptr
}

// WithShaderUniformBufferArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderUniformBufferArrayDynamicIndexing on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderUniformBufferArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderUniformBufferArrayDynamicIndexing = *ptr
	return x
}

// ShaderSampledImageArrayDynamicIndexing returns the value of shaderSampledImageArrayDynamicIndexing from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderSampledImageArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSampledImageArrayDynamicIndexing)
	return *ptr
}

// WithShaderSampledImageArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderSampledImageArrayDynamicIndexing on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderSampledImageArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderSampledImageArrayDynamicIndexing = *ptr
	return x
}

// ShaderStorageBufferArrayDynamicIndexing returns the value of shaderStorageBufferArrayDynamicIndexing from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderStorageBufferArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageBufferArrayDynamicIndexing)
	return *ptr
}

// WithShaderStorageBufferArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderStorageBufferArrayDynamicIndexing on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderStorageBufferArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageBufferArrayDynamicIndexing = *ptr
	return x
}

// ShaderStorageImageArrayDynamicIndexing returns the value of shaderStorageImageArrayDynamicIndexing from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderStorageImageArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageArrayDynamicIndexing)
	return *ptr
}

// WithShaderStorageImageArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderStorageImageArrayDynamicIndexing on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderStorageImageArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageImageArrayDynamicIndexing = *ptr
	return x
}

// ShaderClipDistance returns the value of shaderClipDistance from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderClipDistance() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderClipDistance)
	return *ptr
}

// WithShaderClipDistance copies the provided value into C space and stores it
// at shaderClipDistance on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderClipDistance(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderClipDistance = *ptr
	return x
}

// ShaderCullDistance returns the value of shaderCullDistance from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderCullDistance() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderCullDistance)
	return *ptr
}

// WithShaderCullDistance copies the provided value into C space and stores it
// at shaderCullDistance on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderCullDistance(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderCullDistance = *ptr
	return x
}

// ShaderFloat64 returns the value of shaderFloat64 from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderFloat64)
	return *ptr
}

// WithShaderFloat64 copies the provided value into C space and stores it
// at shaderFloat64 on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderFloat64(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderFloat64 = *ptr
	return x
}

// ShaderInt64 returns the value of shaderInt64 from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderInt64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInt64)
	return *ptr
}

// WithShaderInt64 copies the provided value into C space and stores it
// at shaderInt64 on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderInt64(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInt64 = *ptr
	return x
}

// ShaderInt16 returns the value of shaderInt16 from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderInt16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInt16)
	return *ptr
}

// WithShaderInt16 copies the provided value into C space and stores it
// at shaderInt16 on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderInt16(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInt16 = *ptr
	return x
}

// ShaderResourceResidency returns the value of shaderResourceResidency from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderResourceResidency() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderResourceResidency)
	return *ptr
}

// WithShaderResourceResidency copies the provided value into C space and stores it
// at shaderResourceResidency on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderResourceResidency(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderResourceResidency = *ptr
	return x
}

// ShaderResourceMinLod returns the value of shaderResourceMinLod from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) ShaderResourceMinLod() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderResourceMinLod)
	return *ptr
}

// WithShaderResourceMinLod copies the provided value into C space and stores it
// at shaderResourceMinLod on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithShaderResourceMinLod(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderResourceMinLod = *ptr
	return x
}

// SparseBinding returns the value of sparseBinding from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseBinding() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseBinding)
	return *ptr
}

// WithSparseBinding copies the provided value into C space and stores it
// at sparseBinding on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseBinding(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseBinding = *ptr
	return x
}

// SparseResidencyBuffer returns the value of sparseResidencyBuffer from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidencyBuffer() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidencyBuffer)
	return *ptr
}

// WithSparseResidencyBuffer copies the provided value into C space and stores it
// at sparseResidencyBuffer on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidencyBuffer(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidencyBuffer = *ptr
	return x
}

// SparseResidencyImage2D returns the value of sparseResidencyImage2D from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidencyImage2D() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidencyImage2D)
	return *ptr
}

// WithSparseResidencyImage2D copies the provided value into C space and stores it
// at sparseResidencyImage2D on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidencyImage2D(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidencyImage2D = *ptr
	return x
}

// SparseResidencyImage3D returns the value of sparseResidencyImage3D from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidencyImage3D() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidencyImage3D)
	return *ptr
}

// WithSparseResidencyImage3D copies the provided value into C space and stores it
// at sparseResidencyImage3D on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidencyImage3D(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidencyImage3D = *ptr
	return x
}

// SparseResidency2Samples returns the value of sparseResidency2Samples from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidency2Samples() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidency2Samples)
	return *ptr
}

// WithSparseResidency2Samples copies the provided value into C space and stores it
// at sparseResidency2Samples on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidency2Samples(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidency2Samples = *ptr
	return x
}

// SparseResidency4Samples returns the value of sparseResidency4Samples from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidency4Samples() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidency4Samples)
	return *ptr
}

// WithSparseResidency4Samples copies the provided value into C space and stores it
// at sparseResidency4Samples on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidency4Samples(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidency4Samples = *ptr
	return x
}

// SparseResidency8Samples returns the value of sparseResidency8Samples from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidency8Samples() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidency8Samples)
	return *ptr
}

// WithSparseResidency8Samples copies the provided value into C space and stores it
// at sparseResidency8Samples on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidency8Samples(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidency8Samples = *ptr
	return x
}

// SparseResidency16Samples returns the value of sparseResidency16Samples from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidency16Samples() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidency16Samples)
	return *ptr
}

// WithSparseResidency16Samples copies the provided value into C space and stores it
// at sparseResidency16Samples on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidency16Samples(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidency16Samples = *ptr
	return x
}

// SparseResidencyAliased returns the value of sparseResidencyAliased from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) SparseResidencyAliased() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sparseResidencyAliased)
	return *ptr
}

// WithSparseResidencyAliased copies the provided value into C space and stores it
// at sparseResidencyAliased on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithSparseResidencyAliased(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sparseResidencyAliased = *ptr
	return x
}

// VariableMultisampleRate returns the value of variableMultisampleRate from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) VariableMultisampleRate() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.variableMultisampleRate)
	return *ptr
}

// WithVariableMultisampleRate copies the provided value into C space and stores it
// at variableMultisampleRate on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithVariableMultisampleRate(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.variableMultisampleRate = *ptr
	return x
}

// InheritedQueries returns the value of inheritedQueries from VkPhysicalDeviceFeatures
func (x VkPhysicalDeviceFeatures) InheritedQueries() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.inheritedQueries)
	return *ptr
}

// WithInheritedQueries copies the provided value into C space and stores it
// at inheritedQueries on VkPhysicalDeviceFeatures
func (x *VkPhysicalDeviceFeatures) WithInheritedQueries(y VkBool32) *VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.inheritedQueries = *ptr
	return x
}

//VkComputePipelineCreateInfo provides a go interface for VkComputePipelineCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkComputePipelineCreateInfo.html
type VkComputePipelineCreateInfo C.struct_VkComputePipelineCreateInfo

// NewVkComputePipelineCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkComputePipelineCreateInfo() *VkComputePipelineCreateInfo {
	sz := unsafe.Sizeof(VkComputePipelineCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkComputePipelineCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkComputePipelineCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkComputePipelineCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkComputePipelineCreateInfo) AsPtr() *VkComputePipelineCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkComputePipelineCreateInfo) AsCPtr() *VkComputePipelineCreateInfo {
	clone := newVkComputePipelineCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkComputePipelineCreateInfo
func (x VkComputePipelineCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkComputePipelineCreateInfo) WithDefaultSType() *VkComputePipelineCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkComputePipelineCreateInfo
func (x *VkComputePipelineCreateInfo) WithSType(y VkStructureType) *VkComputePipelineCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkComputePipelineCreateInfo
func (x VkComputePipelineCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkComputePipelineCreateInfo
func (x *VkComputePipelineCreateInfo) WithPNext(y unsafe.Pointer) *VkComputePipelineCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkComputePipelineCreateInfo
func (x VkComputePipelineCreateInfo) Flags() VkPipelineCreateFlags {
	ptr := /* Identifier */ (*VkPipelineCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkComputePipelineCreateInfo
func (x *VkComputePipelineCreateInfo) WithFlags(y VkPipelineCreateFlags) *VkComputePipelineCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Stage returns the value of stage from VkComputePipelineCreateInfo
func (x VkComputePipelineCreateInfo) Stage() VkPipelineShaderStageCreateInfo {
	ptr := /* Identifier */ (*VkPipelineShaderStageCreateInfo)(&x.stage)
	return *ptr
}

// WithStage copies the provided value into C space and stores it
// at stage on VkComputePipelineCreateInfo
func (x *VkComputePipelineCreateInfo) WithStage(y VkPipelineShaderStageCreateInfo) *VkComputePipelineCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineShaderStageCreateInfo)(&y)
	x.stage = *ptr
	return x
}

// Layout returns the value of layout from VkComputePipelineCreateInfo
func (x VkComputePipelineCreateInfo) Layout() VkPipelineLayout {
	ptr := func(x *C.VkPipelineLayout) *VkPipelineLayout { /* Handle */
		return (*VkPipelineLayout)(unsafe.Pointer(x))
	}(&x.layout)
	return *ptr
}

// WithLayout copies the provided value into C space and stores it
// at layout on VkComputePipelineCreateInfo
func (x *VkComputePipelineCreateInfo) WithLayout(y VkPipelineLayout) *VkComputePipelineCreateInfo {
	ptr := func(x *VkPipelineLayout) *C.VkPipelineLayout { /* Handle */
		return (*C.VkPipelineLayout)(unsafe.Pointer(x))
	}(&y)
	x.layout = *ptr
	return x
}

// BasePipelineHandle returns the value of basePipelineHandle from VkComputePipelineCreateInfo
func (x VkComputePipelineCreateInfo) BasePipelineHandle() VkPipeline {
	ptr := func(x *C.VkPipeline) *VkPipeline { /* Handle */ return (*VkPipeline)(unsafe.Pointer(x)) }(&x.basePipelineHandle)
	return *ptr
}

// WithBasePipelineHandle copies the provided value into C space and stores it
// at basePipelineHandle on VkComputePipelineCreateInfo
func (x *VkComputePipelineCreateInfo) WithBasePipelineHandle(y VkPipeline) *VkComputePipelineCreateInfo {
	ptr := func(x *VkPipeline) *C.VkPipeline { /* Handle */ return (*C.VkPipeline)(unsafe.Pointer(x)) }(&y)
	x.basePipelineHandle = *ptr
	return x
}

// BasePipelineIndex returns the value of basePipelineIndex from VkComputePipelineCreateInfo
func (x VkComputePipelineCreateInfo) BasePipelineIndex() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.basePipelineIndex)
	return *ptr
}

// WithBasePipelineIndex copies the provided value into C space and stores it
// at basePipelineIndex on VkComputePipelineCreateInfo
func (x *VkComputePipelineCreateInfo) WithBasePipelineIndex(y int32) *VkComputePipelineCreateInfo {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.basePipelineIndex = *ptr
	return x
}

//VkMemoryType provides a go interface for VkMemoryType.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryType.html
type VkMemoryType C.struct_VkMemoryType

// NewVkMemoryType allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryType() *VkMemoryType {
	sz := unsafe.Sizeof(VkMemoryType{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryType)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryType method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryType) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryType) AsPtr() *VkMemoryType { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryType) AsCPtr() *VkMemoryType {
	clone := newVkMemoryType()
	*clone = *x
	return clone
}

// PropertyFlags returns the value of propertyFlags from VkMemoryType
func (x VkMemoryType) PropertyFlags() VkMemoryPropertyFlags {
	ptr := /* Identifier */ (*VkMemoryPropertyFlags)(&x.propertyFlags)
	return *ptr
}

// HeapIndex returns the value of heapIndex from VkMemoryType
func (x VkMemoryType) HeapIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.heapIndex)
	return *ptr
}

//VkMemoryHeap provides a go interface for VkMemoryHeap.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryHeap.html
type VkMemoryHeap C.struct_VkMemoryHeap

// NewVkMemoryHeap allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryHeap() *VkMemoryHeap {
	sz := unsafe.Sizeof(VkMemoryHeap{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryHeap)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryHeap method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryHeap) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryHeap) AsPtr() *VkMemoryHeap { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryHeap) AsCPtr() *VkMemoryHeap {
	clone := newVkMemoryHeap()
	*clone = *x
	return clone
}

// Size returns the value of size from VkMemoryHeap
func (x VkMemoryHeap) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// Flags returns the value of flags from VkMemoryHeap
func (x VkMemoryHeap) Flags() VkMemoryHeapFlags {
	ptr := /* Identifier */ (*VkMemoryHeapFlags)(&x.flags)
	return *ptr
}

//VkInstanceCreateInfo provides a go interface for VkInstanceCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInstanceCreateInfo.html
type VkInstanceCreateInfo C.struct_VkInstanceCreateInfo

// NewVkInstanceCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkInstanceCreateInfo() *VkInstanceCreateInfo {
	sz := unsafe.Sizeof(VkInstanceCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkInstanceCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkInstanceCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkInstanceCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkInstanceCreateInfo) AsPtr() *VkInstanceCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkInstanceCreateInfo) AsCPtr() *VkInstanceCreateInfo {
	clone := newVkInstanceCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkInstanceCreateInfo) WithDefaultSType() *VkInstanceCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithSType(y VkStructureType) *VkInstanceCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithPNext(y unsafe.Pointer) *VkInstanceCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) Flags() VkInstanceCreateFlags {
	ptr := /* Identifier */ (*VkInstanceCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithFlags(y VkInstanceCreateFlags) *VkInstanceCreateInfo {
	ptr := /* Identifier */ (*C.VkInstanceCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// PApplicationInfo returns the value of pApplicationInfo from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) PApplicationInfo() *VkApplicationInfo {
	ptr := func(x **C.VkApplicationInfo) **VkApplicationInfo { /* Pointer */
		return (**VkApplicationInfo)(unsafe.Pointer(x))
	}(&x.pApplicationInfo)
	return *ptr
}

// WithPApplicationInfo copies the provided value into C space and stores it
// at pApplicationInfo on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithPApplicationInfo(y *VkApplicationInfo) *VkInstanceCreateInfo {
	ptr := func(x **VkApplicationInfo) **C.VkApplicationInfo { /* Pointer */
		return (**C.VkApplicationInfo)(unsafe.Pointer(x))
	}(&y)
	x.pApplicationInfo = *ptr
	return x
}

// EnabledLayerCount returns the value of enabledLayerCount from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) EnabledLayerCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.enabledLayerCount)
	return *ptr
}

// WithEnabledLayerCount copies the provided value into C space and stores it
// at enabledLayerCount on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithEnabledLayerCount(y uint32) *VkInstanceCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.enabledLayerCount = *ptr
	return x
}

// PpEnabledLayerNames returns the value of ppEnabledLayerNames from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) PpEnabledLayerNames() []*byte {
	ptr := func(x ***C.char) *[]*byte { /* Slice */
		slc := unsafe.Slice((**byte)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.ppEnabledLayerNames)
	return *ptr
}

// WithPpEnabledLayerNames copies the provided value into C space and stores it
// at ppEnabledLayerNames on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithPpEnabledLayerNames(y []*byte) *VkInstanceCreateInfo {
	ptr := func(x *[]*byte) ***C.char { /* Slice */
		if len(*x) > 0 {
			slc := (**C.char)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (***C.char)(unsafe.Pointer((&ptr)))
	}(&y)
	x.ppEnabledLayerNames = *ptr
	return x
}

// EnabledExtensionCount returns the value of enabledExtensionCount from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) EnabledExtensionCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.enabledExtensionCount)
	return *ptr
}

// WithEnabledExtensionCount copies the provided value into C space and stores it
// at enabledExtensionCount on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithEnabledExtensionCount(y uint32) *VkInstanceCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.enabledExtensionCount = *ptr
	return x
}

// PpEnabledExtensionNames returns the value of ppEnabledExtensionNames from VkInstanceCreateInfo
func (x VkInstanceCreateInfo) PpEnabledExtensionNames() []*byte {
	ptr := func(x ***C.char) *[]*byte { /* Slice */
		slc := unsafe.Slice((**byte)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.ppEnabledExtensionNames)
	return *ptr
}

// WithPpEnabledExtensionNames copies the provided value into C space and stores it
// at ppEnabledExtensionNames on VkInstanceCreateInfo
func (x *VkInstanceCreateInfo) WithPpEnabledExtensionNames(y []*byte) *VkInstanceCreateInfo {
	ptr := func(x *[]*byte) ***C.char { /* Slice */
		if len(*x) > 0 {
			slc := (**C.char)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (***C.char)(unsafe.Pointer((&ptr)))
	}(&y)
	x.ppEnabledExtensionNames = *ptr
	return x
}

//VkImageFormatProperties provides a go interface for VkImageFormatProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageFormatProperties.html
type VkImageFormatProperties C.struct_VkImageFormatProperties

// NewVkImageFormatProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageFormatProperties() *VkImageFormatProperties {
	sz := unsafe.Sizeof(VkImageFormatProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageFormatProperties)(ptr)
}

// Free releases the memory allocated by the NewVkImageFormatProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageFormatProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageFormatProperties) AsPtr() *VkImageFormatProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageFormatProperties) AsCPtr() *VkImageFormatProperties {
	clone := newVkImageFormatProperties()
	*clone = *x
	return clone
}

// MaxExtent returns the value of maxExtent from VkImageFormatProperties
func (x VkImageFormatProperties) MaxExtent() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.maxExtent)
	return *ptr
}

// MaxMipLevels returns the value of maxMipLevels from VkImageFormatProperties
func (x VkImageFormatProperties) MaxMipLevels() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxMipLevels)
	return *ptr
}

// MaxArrayLayers returns the value of maxArrayLayers from VkImageFormatProperties
func (x VkImageFormatProperties) MaxArrayLayers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxArrayLayers)
	return *ptr
}

// SampleCounts returns the value of sampleCounts from VkImageFormatProperties
func (x VkImageFormatProperties) SampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.sampleCounts)
	return *ptr
}

// MaxResourceSize returns the value of maxResourceSize from VkImageFormatProperties
func (x VkImageFormatProperties) MaxResourceSize() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.maxResourceSize)
	return *ptr
}

//VkGraphicsPipelineCreateInfo provides a go interface for VkGraphicsPipelineCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsPipelineCreateInfo.html
type VkGraphicsPipelineCreateInfo C.struct_VkGraphicsPipelineCreateInfo

// NewVkGraphicsPipelineCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkGraphicsPipelineCreateInfo() *VkGraphicsPipelineCreateInfo {
	sz := unsafe.Sizeof(VkGraphicsPipelineCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkGraphicsPipelineCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkGraphicsPipelineCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkGraphicsPipelineCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkGraphicsPipelineCreateInfo) AsPtr() *VkGraphicsPipelineCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkGraphicsPipelineCreateInfo) AsCPtr() *VkGraphicsPipelineCreateInfo {
	clone := newVkGraphicsPipelineCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkGraphicsPipelineCreateInfo) WithDefaultSType() *VkGraphicsPipelineCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithSType(y VkStructureType) *VkGraphicsPipelineCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPNext(y unsafe.Pointer) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) Flags() VkPipelineCreateFlags {
	ptr := /* Identifier */ (*VkPipelineCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithFlags(y VkPipelineCreateFlags) *VkGraphicsPipelineCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// StageCount returns the value of stageCount from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) StageCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.stageCount)
	return *ptr
}

// WithStageCount copies the provided value into C space and stores it
// at stageCount on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithStageCount(y uint32) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.stageCount = *ptr
	return x
}

// PStages returns the value of pStages from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PStages() []VkPipelineShaderStageCreateInfo {
	ptr := func(x **C.VkPipelineShaderStageCreateInfo) *[]VkPipelineShaderStageCreateInfo { /* Slice */
		slc := unsafe.Slice((*VkPipelineShaderStageCreateInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pStages)
	return *ptr
}

// WithPStages copies the provided value into C space and stores it
// at pStages on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPStages(y []VkPipelineShaderStageCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *[]VkPipelineShaderStageCreateInfo) **C.VkPipelineShaderStageCreateInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPipelineShaderStageCreateInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPipelineShaderStageCreateInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pStages = *ptr
	return x
}

// PVertexInputState returns the value of pVertexInputState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PVertexInputState() *VkPipelineVertexInputStateCreateInfo {
	ptr := func(x **C.VkPipelineVertexInputStateCreateInfo) **VkPipelineVertexInputStateCreateInfo { /* Pointer */
		return (**VkPipelineVertexInputStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pVertexInputState)
	return *ptr
}

// WithPVertexInputState copies the provided value into C space and stores it
// at pVertexInputState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPVertexInputState(y *VkPipelineVertexInputStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineVertexInputStateCreateInfo) **C.VkPipelineVertexInputStateCreateInfo { /* Pointer */
		return (**C.VkPipelineVertexInputStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pVertexInputState = *ptr
	return x
}

// PInputAssemblyState returns the value of pInputAssemblyState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PInputAssemblyState() *VkPipelineInputAssemblyStateCreateInfo {
	ptr := func(x **C.VkPipelineInputAssemblyStateCreateInfo) **VkPipelineInputAssemblyStateCreateInfo { /* Pointer */
		return (**VkPipelineInputAssemblyStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pInputAssemblyState)
	return *ptr
}

// WithPInputAssemblyState copies the provided value into C space and stores it
// at pInputAssemblyState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPInputAssemblyState(y *VkPipelineInputAssemblyStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineInputAssemblyStateCreateInfo) **C.VkPipelineInputAssemblyStateCreateInfo { /* Pointer */
		return (**C.VkPipelineInputAssemblyStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pInputAssemblyState = *ptr
	return x
}

// PTessellationState returns the value of pTessellationState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PTessellationState() *VkPipelineTessellationStateCreateInfo {
	ptr := func(x **C.VkPipelineTessellationStateCreateInfo) **VkPipelineTessellationStateCreateInfo { /* Pointer */
		return (**VkPipelineTessellationStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pTessellationState)
	return *ptr
}

// WithPTessellationState copies the provided value into C space and stores it
// at pTessellationState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPTessellationState(y *VkPipelineTessellationStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineTessellationStateCreateInfo) **C.VkPipelineTessellationStateCreateInfo { /* Pointer */
		return (**C.VkPipelineTessellationStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pTessellationState = *ptr
	return x
}

// PViewportState returns the value of pViewportState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PViewportState() *VkPipelineViewportStateCreateInfo {
	ptr := func(x **C.VkPipelineViewportStateCreateInfo) **VkPipelineViewportStateCreateInfo { /* Pointer */
		return (**VkPipelineViewportStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pViewportState)
	return *ptr
}

// WithPViewportState copies the provided value into C space and stores it
// at pViewportState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPViewportState(y *VkPipelineViewportStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineViewportStateCreateInfo) **C.VkPipelineViewportStateCreateInfo { /* Pointer */
		return (**C.VkPipelineViewportStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pViewportState = *ptr
	return x
}

// PRasterizationState returns the value of pRasterizationState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PRasterizationState() *VkPipelineRasterizationStateCreateInfo {
	ptr := func(x **C.VkPipelineRasterizationStateCreateInfo) **VkPipelineRasterizationStateCreateInfo { /* Pointer */
		return (**VkPipelineRasterizationStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pRasterizationState)
	return *ptr
}

// WithPRasterizationState copies the provided value into C space and stores it
// at pRasterizationState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPRasterizationState(y *VkPipelineRasterizationStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineRasterizationStateCreateInfo) **C.VkPipelineRasterizationStateCreateInfo { /* Pointer */
		return (**C.VkPipelineRasterizationStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pRasterizationState = *ptr
	return x
}

// PMultisampleState returns the value of pMultisampleState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PMultisampleState() *VkPipelineMultisampleStateCreateInfo {
	ptr := func(x **C.VkPipelineMultisampleStateCreateInfo) **VkPipelineMultisampleStateCreateInfo { /* Pointer */
		return (**VkPipelineMultisampleStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pMultisampleState)
	return *ptr
}

// WithPMultisampleState copies the provided value into C space and stores it
// at pMultisampleState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPMultisampleState(y *VkPipelineMultisampleStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineMultisampleStateCreateInfo) **C.VkPipelineMultisampleStateCreateInfo { /* Pointer */
		return (**C.VkPipelineMultisampleStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pMultisampleState = *ptr
	return x
}

// PDepthStencilState returns the value of pDepthStencilState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PDepthStencilState() *VkPipelineDepthStencilStateCreateInfo {
	ptr := func(x **C.VkPipelineDepthStencilStateCreateInfo) **VkPipelineDepthStencilStateCreateInfo { /* Pointer */
		return (**VkPipelineDepthStencilStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pDepthStencilState)
	return *ptr
}

// WithPDepthStencilState copies the provided value into C space and stores it
// at pDepthStencilState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPDepthStencilState(y *VkPipelineDepthStencilStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineDepthStencilStateCreateInfo) **C.VkPipelineDepthStencilStateCreateInfo { /* Pointer */
		return (**C.VkPipelineDepthStencilStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pDepthStencilState = *ptr
	return x
}

// PColorBlendState returns the value of pColorBlendState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PColorBlendState() *VkPipelineColorBlendStateCreateInfo {
	ptr := func(x **C.VkPipelineColorBlendStateCreateInfo) **VkPipelineColorBlendStateCreateInfo { /* Pointer */
		return (**VkPipelineColorBlendStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pColorBlendState)
	return *ptr
}

// WithPColorBlendState copies the provided value into C space and stores it
// at pColorBlendState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPColorBlendState(y *VkPipelineColorBlendStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineColorBlendStateCreateInfo) **C.VkPipelineColorBlendStateCreateInfo { /* Pointer */
		return (**C.VkPipelineColorBlendStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pColorBlendState = *ptr
	return x
}

// PDynamicState returns the value of pDynamicState from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) PDynamicState() *VkPipelineDynamicStateCreateInfo {
	ptr := func(x **C.VkPipelineDynamicStateCreateInfo) **VkPipelineDynamicStateCreateInfo { /* Pointer */
		return (**VkPipelineDynamicStateCreateInfo)(unsafe.Pointer(x))
	}(&x.pDynamicState)
	return *ptr
}

// WithPDynamicState copies the provided value into C space and stores it
// at pDynamicState on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithPDynamicState(y *VkPipelineDynamicStateCreateInfo) *VkGraphicsPipelineCreateInfo {
	ptr := func(x **VkPipelineDynamicStateCreateInfo) **C.VkPipelineDynamicStateCreateInfo { /* Pointer */
		return (**C.VkPipelineDynamicStateCreateInfo)(unsafe.Pointer(x))
	}(&y)
	x.pDynamicState = *ptr
	return x
}

// Layout returns the value of layout from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) Layout() VkPipelineLayout {
	ptr := func(x *C.VkPipelineLayout) *VkPipelineLayout { /* Handle */
		return (*VkPipelineLayout)(unsafe.Pointer(x))
	}(&x.layout)
	return *ptr
}

// WithLayout copies the provided value into C space and stores it
// at layout on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithLayout(y VkPipelineLayout) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *VkPipelineLayout) *C.VkPipelineLayout { /* Handle */
		return (*C.VkPipelineLayout)(unsafe.Pointer(x))
	}(&y)
	x.layout = *ptr
	return x
}

// RenderPass returns the value of renderPass from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) RenderPass() VkRenderPass {
	ptr := func(x *C.VkRenderPass) *VkRenderPass { /* Handle */ return (*VkRenderPass)(unsafe.Pointer(x)) }(&x.renderPass)
	return *ptr
}

// WithRenderPass copies the provided value into C space and stores it
// at renderPass on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithRenderPass(y VkRenderPass) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *VkRenderPass) *C.VkRenderPass { /* Handle */ return (*C.VkRenderPass)(unsafe.Pointer(x)) }(&y)
	x.renderPass = *ptr
	return x
}

// Subpass returns the value of subpass from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) Subpass() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subpass)
	return *ptr
}

// WithSubpass copies the provided value into C space and stores it
// at subpass on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithSubpass(y uint32) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.subpass = *ptr
	return x
}

// BasePipelineHandle returns the value of basePipelineHandle from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) BasePipelineHandle() VkPipeline {
	ptr := func(x *C.VkPipeline) *VkPipeline { /* Handle */ return (*VkPipeline)(unsafe.Pointer(x)) }(&x.basePipelineHandle)
	return *ptr
}

// WithBasePipelineHandle copies the provided value into C space and stores it
// at basePipelineHandle on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithBasePipelineHandle(y VkPipeline) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *VkPipeline) *C.VkPipeline { /* Handle */ return (*C.VkPipeline)(unsafe.Pointer(x)) }(&y)
	x.basePipelineHandle = *ptr
	return x
}

// BasePipelineIndex returns the value of basePipelineIndex from VkGraphicsPipelineCreateInfo
func (x VkGraphicsPipelineCreateInfo) BasePipelineIndex() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.basePipelineIndex)
	return *ptr
}

// WithBasePipelineIndex copies the provided value into C space and stores it
// at basePipelineIndex on VkGraphicsPipelineCreateInfo
func (x *VkGraphicsPipelineCreateInfo) WithBasePipelineIndex(y int32) *VkGraphicsPipelineCreateInfo {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.basePipelineIndex = *ptr
	return x
}

//VkFormatProperties provides a go interface for VkFormatProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFormatProperties.html
type VkFormatProperties C.struct_VkFormatProperties

// NewVkFormatProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkFormatProperties() *VkFormatProperties {
	sz := unsafe.Sizeof(VkFormatProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkFormatProperties)(ptr)
}

// Free releases the memory allocated by the NewVkFormatProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkFormatProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkFormatProperties) AsPtr() *VkFormatProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkFormatProperties) AsCPtr() *VkFormatProperties {
	clone := newVkFormatProperties()
	*clone = *x
	return clone
}

// LinearTilingFeatures returns the value of linearTilingFeatures from VkFormatProperties
func (x VkFormatProperties) LinearTilingFeatures() VkFormatFeatureFlags {
	ptr := /* Identifier */ (*VkFormatFeatureFlags)(&x.linearTilingFeatures)
	return *ptr
}

// OptimalTilingFeatures returns the value of optimalTilingFeatures from VkFormatProperties
func (x VkFormatProperties) OptimalTilingFeatures() VkFormatFeatureFlags {
	ptr := /* Identifier */ (*VkFormatFeatureFlags)(&x.optimalTilingFeatures)
	return *ptr
}

// BufferFeatures returns the value of bufferFeatures from VkFormatProperties
func (x VkFormatProperties) BufferFeatures() VkFormatFeatureFlags {
	ptr := /* Identifier */ (*VkFormatFeatureFlags)(&x.bufferFeatures)
	return *ptr
}

//VkApplicationInfo provides a go interface for VkApplicationInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkApplicationInfo.html
type VkApplicationInfo C.struct_VkApplicationInfo

// NewVkApplicationInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkApplicationInfo() *VkApplicationInfo {
	sz := unsafe.Sizeof(VkApplicationInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkApplicationInfo)(ptr)
}

// Free releases the memory allocated by the NewVkApplicationInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkApplicationInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkApplicationInfo) AsPtr() *VkApplicationInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkApplicationInfo) AsCPtr() *VkApplicationInfo {
	clone := newVkApplicationInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkApplicationInfo
func (x VkApplicationInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkApplicationInfo) WithDefaultSType() *VkApplicationInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_APPLICATION_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkApplicationInfo
func (x *VkApplicationInfo) WithSType(y VkStructureType) *VkApplicationInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkApplicationInfo
func (x VkApplicationInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkApplicationInfo
func (x *VkApplicationInfo) WithPNext(y unsafe.Pointer) *VkApplicationInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PApplicationName returns the value of pApplicationName from VkApplicationInfo
func (x VkApplicationInfo) PApplicationName() *byte {
	ptr := func(x **C.char) **byte { /* Pointer */ return (**byte)(unsafe.Pointer(x)) }(&x.pApplicationName)
	return *ptr
}

// WithPApplicationName copies the provided value into C space and stores it
// at pApplicationName on VkApplicationInfo
func (x *VkApplicationInfo) WithPApplicationName(y *byte) *VkApplicationInfo {
	ptr := func(x **byte) **C.char { /* Pointer */ return (**C.char)(unsafe.Pointer(x)) }(&y)
	x.pApplicationName = *ptr
	return x
}

// ApplicationVersion returns the value of applicationVersion from VkApplicationInfo
func (x VkApplicationInfo) ApplicationVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.applicationVersion)
	return *ptr
}

// WithApplicationVersion copies the provided value into C space and stores it
// at applicationVersion on VkApplicationInfo
func (x *VkApplicationInfo) WithApplicationVersion(y uint32) *VkApplicationInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.applicationVersion = *ptr
	return x
}

// PEngineName returns the value of pEngineName from VkApplicationInfo
func (x VkApplicationInfo) PEngineName() *byte {
	ptr := func(x **C.char) **byte { /* Pointer */ return (**byte)(unsafe.Pointer(x)) }(&x.pEngineName)
	return *ptr
}

// WithPEngineName copies the provided value into C space and stores it
// at pEngineName on VkApplicationInfo
func (x *VkApplicationInfo) WithPEngineName(y *byte) *VkApplicationInfo {
	ptr := func(x **byte) **C.char { /* Pointer */ return (**C.char)(unsafe.Pointer(x)) }(&y)
	x.pEngineName = *ptr
	return x
}

// EngineVersion returns the value of engineVersion from VkApplicationInfo
func (x VkApplicationInfo) EngineVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.engineVersion)
	return *ptr
}

// WithEngineVersion copies the provided value into C space and stores it
// at engineVersion on VkApplicationInfo
func (x *VkApplicationInfo) WithEngineVersion(y uint32) *VkApplicationInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.engineVersion = *ptr
	return x
}

// ApiVersion returns the value of apiVersion from VkApplicationInfo
func (x VkApplicationInfo) ApiVersion() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.apiVersion)
	return *ptr
}

// WithApiVersion copies the provided value into C space and stores it
// at apiVersion on VkApplicationInfo
func (x *VkApplicationInfo) WithApiVersion(y uint32) *VkApplicationInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.apiVersion = *ptr
	return x
}

//VkPipelineColorBlendAttachmentState provides a go interface for VkPipelineColorBlendAttachmentState.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendAttachmentState.html
type VkPipelineColorBlendAttachmentState C.struct_VkPipelineColorBlendAttachmentState

// NewVkPipelineColorBlendAttachmentState allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineColorBlendAttachmentState() *VkPipelineColorBlendAttachmentState {
	sz := unsafe.Sizeof(VkPipelineColorBlendAttachmentState{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineColorBlendAttachmentState)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineColorBlendAttachmentState method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineColorBlendAttachmentState) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineColorBlendAttachmentState) AsPtr() *VkPipelineColorBlendAttachmentState { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineColorBlendAttachmentState) AsCPtr() *VkPipelineColorBlendAttachmentState {
	clone := newVkPipelineColorBlendAttachmentState()
	*clone = *x
	return clone
}

// BlendEnable returns the value of blendEnable from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) BlendEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.blendEnable)
	return *ptr
}

// WithBlendEnable copies the provided value into C space and stores it
// at blendEnable on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithBlendEnable(y VkBool32) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.blendEnable = *ptr
	return x
}

// SrcColorBlendFactor returns the value of srcColorBlendFactor from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) SrcColorBlendFactor() VkBlendFactor {
	ptr := /* Identifier */ (*VkBlendFactor)(&x.srcColorBlendFactor)
	return *ptr
}

// WithSrcColorBlendFactor copies the provided value into C space and stores it
// at srcColorBlendFactor on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithSrcColorBlendFactor(y VkBlendFactor) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkBlendFactor)(&y)
	x.srcColorBlendFactor = *ptr
	return x
}

// DstColorBlendFactor returns the value of dstColorBlendFactor from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) DstColorBlendFactor() VkBlendFactor {
	ptr := /* Identifier */ (*VkBlendFactor)(&x.dstColorBlendFactor)
	return *ptr
}

// WithDstColorBlendFactor copies the provided value into C space and stores it
// at dstColorBlendFactor on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithDstColorBlendFactor(y VkBlendFactor) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkBlendFactor)(&y)
	x.dstColorBlendFactor = *ptr
	return x
}

// ColorBlendOp returns the value of colorBlendOp from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) ColorBlendOp() VkBlendOp {
	ptr := /* Identifier */ (*VkBlendOp)(&x.colorBlendOp)
	return *ptr
}

// WithColorBlendOp copies the provided value into C space and stores it
// at colorBlendOp on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithColorBlendOp(y VkBlendOp) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkBlendOp)(&y)
	x.colorBlendOp = *ptr
	return x
}

// SrcAlphaBlendFactor returns the value of srcAlphaBlendFactor from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) SrcAlphaBlendFactor() VkBlendFactor {
	ptr := /* Identifier */ (*VkBlendFactor)(&x.srcAlphaBlendFactor)
	return *ptr
}

// WithSrcAlphaBlendFactor copies the provided value into C space and stores it
// at srcAlphaBlendFactor on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithSrcAlphaBlendFactor(y VkBlendFactor) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkBlendFactor)(&y)
	x.srcAlphaBlendFactor = *ptr
	return x
}

// DstAlphaBlendFactor returns the value of dstAlphaBlendFactor from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) DstAlphaBlendFactor() VkBlendFactor {
	ptr := /* Identifier */ (*VkBlendFactor)(&x.dstAlphaBlendFactor)
	return *ptr
}

// WithDstAlphaBlendFactor copies the provided value into C space and stores it
// at dstAlphaBlendFactor on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithDstAlphaBlendFactor(y VkBlendFactor) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkBlendFactor)(&y)
	x.dstAlphaBlendFactor = *ptr
	return x
}

// AlphaBlendOp returns the value of alphaBlendOp from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) AlphaBlendOp() VkBlendOp {
	ptr := /* Identifier */ (*VkBlendOp)(&x.alphaBlendOp)
	return *ptr
}

// WithAlphaBlendOp copies the provided value into C space and stores it
// at alphaBlendOp on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithAlphaBlendOp(y VkBlendOp) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkBlendOp)(&y)
	x.alphaBlendOp = *ptr
	return x
}

// ColorWriteMask returns the value of colorWriteMask from VkPipelineColorBlendAttachmentState
func (x VkPipelineColorBlendAttachmentState) ColorWriteMask() VkColorComponentFlags {
	ptr := /* Identifier */ (*VkColorComponentFlags)(&x.colorWriteMask)
	return *ptr
}

// WithColorWriteMask copies the provided value into C space and stores it
// at colorWriteMask on VkPipelineColorBlendAttachmentState
func (x *VkPipelineColorBlendAttachmentState) WithColorWriteMask(y VkColorComponentFlags) *VkPipelineColorBlendAttachmentState {
	ptr := /* Identifier */ (*C.VkColorComponentFlags)(&y)
	x.colorWriteMask = *ptr
	return x
}

//VkAllocationCallbacks provides a go interface for VkAllocationCallbacks.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAllocationCallbacks.html
type VkAllocationCallbacks C.struct_VkAllocationCallbacks

// NewVkAllocationCallbacks allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAllocationCallbacks() *VkAllocationCallbacks {
	sz := unsafe.Sizeof(VkAllocationCallbacks{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAllocationCallbacks)(ptr)
}

// Free releases the memory allocated by the NewVkAllocationCallbacks method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAllocationCallbacks) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAllocationCallbacks) AsPtr() *VkAllocationCallbacks { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAllocationCallbacks) AsCPtr() *VkAllocationCallbacks {
	clone := newVkAllocationCallbacks()
	*clone = *x
	return clone
}

// PUserData returns the value of pUserData from VkAllocationCallbacks
func (x VkAllocationCallbacks) PUserData() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pUserData)
	return *ptr
}

// WithPUserData copies the provided value into C space and stores it
// at pUserData on VkAllocationCallbacks
func (x *VkAllocationCallbacks) WithPUserData(y unsafe.Pointer) *VkAllocationCallbacks {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pUserData = *ptr
	return x
}

// PfnAllocation returns the value of pfnAllocation from VkAllocationCallbacks
func (x VkAllocationCallbacks) PfnAllocation() PFN_vkAllocationFunction {
	ptr := /* Identifier */ (*PFN_vkAllocationFunction)(&x.pfnAllocation)
	return *ptr
}

// WithPfnAllocation copies the provided value into C space and stores it
// at pfnAllocation on VkAllocationCallbacks
func (x *VkAllocationCallbacks) WithPfnAllocation(y PFN_vkAllocationFunction) *VkAllocationCallbacks {
	ptr := /* Identifier */ (*C.PFN_vkAllocationFunction)(&y)
	x.pfnAllocation = *ptr
	return x
}

// PfnReallocation returns the value of pfnReallocation from VkAllocationCallbacks
func (x VkAllocationCallbacks) PfnReallocation() PFN_vkReallocationFunction {
	ptr := /* Identifier */ (*PFN_vkReallocationFunction)(&x.pfnReallocation)
	return *ptr
}

// WithPfnReallocation copies the provided value into C space and stores it
// at pfnReallocation on VkAllocationCallbacks
func (x *VkAllocationCallbacks) WithPfnReallocation(y PFN_vkReallocationFunction) *VkAllocationCallbacks {
	ptr := /* Identifier */ (*C.PFN_vkReallocationFunction)(&y)
	x.pfnReallocation = *ptr
	return x
}

// PfnFree returns the value of pfnFree from VkAllocationCallbacks
func (x VkAllocationCallbacks) PfnFree() PFN_vkFreeFunction {
	ptr := /* Identifier */ (*PFN_vkFreeFunction)(&x.pfnFree)
	return *ptr
}

// WithPfnFree copies the provided value into C space and stores it
// at pfnFree on VkAllocationCallbacks
func (x *VkAllocationCallbacks) WithPfnFree(y PFN_vkFreeFunction) *VkAllocationCallbacks {
	ptr := /* Identifier */ (*C.PFN_vkFreeFunction)(&y)
	x.pfnFree = *ptr
	return x
}

// PfnInternalAllocation returns the value of pfnInternalAllocation from VkAllocationCallbacks
func (x VkAllocationCallbacks) PfnInternalAllocation() PFN_vkInternalAllocationNotification {
	ptr := /* Identifier */ (*PFN_vkInternalAllocationNotification)(&x.pfnInternalAllocation)
	return *ptr
}

// WithPfnInternalAllocation copies the provided value into C space and stores it
// at pfnInternalAllocation on VkAllocationCallbacks
func (x *VkAllocationCallbacks) WithPfnInternalAllocation(y PFN_vkInternalAllocationNotification) *VkAllocationCallbacks {
	ptr := /* Identifier */ (*C.PFN_vkInternalAllocationNotification)(&y)
	x.pfnInternalAllocation = *ptr
	return x
}

// PfnInternalFree returns the value of pfnInternalFree from VkAllocationCallbacks
func (x VkAllocationCallbacks) PfnInternalFree() PFN_vkInternalFreeNotification {
	ptr := /* Identifier */ (*PFN_vkInternalFreeNotification)(&x.pfnInternalFree)
	return *ptr
}

// WithPfnInternalFree copies the provided value into C space and stores it
// at pfnInternalFree on VkAllocationCallbacks
func (x *VkAllocationCallbacks) WithPfnInternalFree(y PFN_vkInternalFreeNotification) *VkAllocationCallbacks {
	ptr := /* Identifier */ (*C.PFN_vkInternalFreeNotification)(&y)
	x.pfnInternalFree = *ptr
	return x
}

//VkPipelineColorBlendStateCreateInfo provides a go interface for VkPipelineColorBlendStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendStateCreateInfo.html
type VkPipelineColorBlendStateCreateInfo C.struct_VkPipelineColorBlendStateCreateInfo

// NewVkPipelineColorBlendStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineColorBlendStateCreateInfo() *VkPipelineColorBlendStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineColorBlendStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineColorBlendStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineColorBlendStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineColorBlendStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineColorBlendStateCreateInfo) AsPtr() *VkPipelineColorBlendStateCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineColorBlendStateCreateInfo) AsCPtr() *VkPipelineColorBlendStateCreateInfo {
	clone := newVkPipelineColorBlendStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineColorBlendStateCreateInfo) WithDefaultSType() *VkPipelineColorBlendStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithSType(y VkStructureType) *VkPipelineColorBlendStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineColorBlendStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) Flags() VkPipelineColorBlendStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineColorBlendStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithFlags(y VkPipelineColorBlendStateCreateFlags) *VkPipelineColorBlendStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineColorBlendStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// LogicOpEnable returns the value of logicOpEnable from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) LogicOpEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.logicOpEnable)
	return *ptr
}

// WithLogicOpEnable copies the provided value into C space and stores it
// at logicOpEnable on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithLogicOpEnable(y VkBool32) *VkPipelineColorBlendStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.logicOpEnable = *ptr
	return x
}

// LogicOp returns the value of logicOp from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) LogicOp() VkLogicOp {
	ptr := /* Identifier */ (*VkLogicOp)(&x.logicOp)
	return *ptr
}

// WithLogicOp copies the provided value into C space and stores it
// at logicOp on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithLogicOp(y VkLogicOp) *VkPipelineColorBlendStateCreateInfo {
	ptr := /* Identifier */ (*C.VkLogicOp)(&y)
	x.logicOp = *ptr
	return x
}

// AttachmentCount returns the value of attachmentCount from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) AttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachmentCount)
	return *ptr
}

// WithAttachmentCount copies the provided value into C space and stores it
// at attachmentCount on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithAttachmentCount(y uint32) *VkPipelineColorBlendStateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachmentCount = *ptr
	return x
}

// PAttachments returns the value of pAttachments from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) PAttachments() []VkPipelineColorBlendAttachmentState {
	ptr := func(x **C.VkPipelineColorBlendAttachmentState) *[]VkPipelineColorBlendAttachmentState { /* Slice */
		slc := unsafe.Slice((*VkPipelineColorBlendAttachmentState)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pAttachments)
	return *ptr
}

// WithPAttachments copies the provided value into C space and stores it
// at pAttachments on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithPAttachments(y []VkPipelineColorBlendAttachmentState) *VkPipelineColorBlendStateCreateInfo {
	ptr := func(x *[]VkPipelineColorBlendAttachmentState) **C.VkPipelineColorBlendAttachmentState { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPipelineColorBlendAttachmentState)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPipelineColorBlendAttachmentState)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pAttachments = *ptr
	return x
}

// BlendConstants returns the value of blendConstants from VkPipelineColorBlendStateCreateInfo
func (x VkPipelineColorBlendStateCreateInfo) BlendConstants() []float32 {
	ptr := func(x *[4]C.float) *[]float32 { /* Array */
		slc := unsafe.Slice((*float32)(unsafe.Pointer(x)), 4)
		return &slc
	}(&x.blendConstants)
	return *ptr
}

// WithBlendConstants copies the provided value into C space and stores it
// at blendConstants on VkPipelineColorBlendStateCreateInfo
func (x *VkPipelineColorBlendStateCreateInfo) WithBlendConstants(y []float32) *VkPipelineColorBlendStateCreateInfo {
	ptr := func(x *[]float32) **C.float { /* Array */
		if *x != nil {
			slc := (*C.float)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.float)(unsafe.Pointer((&ptr)))
	}(&y)
	copy(x.blendConstants[:], unsafe.Slice(*ptr, len(y)))
	return x
}

//VkBufferCopy provides a go interface for VkBufferCopy.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCopy.html
type VkBufferCopy C.struct_VkBufferCopy

// NewVkBufferCopy allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferCopy() *VkBufferCopy {
	sz := unsafe.Sizeof(VkBufferCopy{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferCopy)(ptr)
}

// Free releases the memory allocated by the NewVkBufferCopy method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferCopy) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferCopy) AsPtr() *VkBufferCopy { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferCopy) AsCPtr() *VkBufferCopy {
	clone := newVkBufferCopy()
	*clone = *x
	return clone
}

// SrcOffset returns the value of srcOffset from VkBufferCopy
func (x VkBufferCopy) SrcOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.srcOffset)
	return *ptr
}

// WithSrcOffset copies the provided value into C space and stores it
// at srcOffset on VkBufferCopy
func (x *VkBufferCopy) WithSrcOffset(y VkDeviceSize) *VkBufferCopy {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.srcOffset = *ptr
	return x
}

// DstOffset returns the value of dstOffset from VkBufferCopy
func (x VkBufferCopy) DstOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.dstOffset)
	return *ptr
}

// WithDstOffset copies the provided value into C space and stores it
// at dstOffset on VkBufferCopy
func (x *VkBufferCopy) WithDstOffset(y VkDeviceSize) *VkBufferCopy {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.dstOffset = *ptr
	return x
}

// Size returns the value of size from VkBufferCopy
func (x VkBufferCopy) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// WithSize copies the provided value into C space and stores it
// at size on VkBufferCopy
func (x *VkBufferCopy) WithSize(y VkDeviceSize) *VkBufferCopy {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.size = *ptr
	return x
}

//VkBufferImageCopy provides a go interface for VkBufferImageCopy.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferImageCopy.html
type VkBufferImageCopy C.struct_VkBufferImageCopy

// NewVkBufferImageCopy allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferImageCopy() *VkBufferImageCopy {
	sz := unsafe.Sizeof(VkBufferImageCopy{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferImageCopy)(ptr)
}

// Free releases the memory allocated by the NewVkBufferImageCopy method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferImageCopy) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferImageCopy) AsPtr() *VkBufferImageCopy { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferImageCopy) AsCPtr() *VkBufferImageCopy {
	clone := newVkBufferImageCopy()
	*clone = *x
	return clone
}

// BufferOffset returns the value of bufferOffset from VkBufferImageCopy
func (x VkBufferImageCopy) BufferOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.bufferOffset)
	return *ptr
}

// WithBufferOffset copies the provided value into C space and stores it
// at bufferOffset on VkBufferImageCopy
func (x *VkBufferImageCopy) WithBufferOffset(y VkDeviceSize) *VkBufferImageCopy {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.bufferOffset = *ptr
	return x
}

// BufferRowLength returns the value of bufferRowLength from VkBufferImageCopy
func (x VkBufferImageCopy) BufferRowLength() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bufferRowLength)
	return *ptr
}

// WithBufferRowLength copies the provided value into C space and stores it
// at bufferRowLength on VkBufferImageCopy
func (x *VkBufferImageCopy) WithBufferRowLength(y uint32) *VkBufferImageCopy {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bufferRowLength = *ptr
	return x
}

// BufferImageHeight returns the value of bufferImageHeight from VkBufferImageCopy
func (x VkBufferImageCopy) BufferImageHeight() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bufferImageHeight)
	return *ptr
}

// WithBufferImageHeight copies the provided value into C space and stores it
// at bufferImageHeight on VkBufferImageCopy
func (x *VkBufferImageCopy) WithBufferImageHeight(y uint32) *VkBufferImageCopy {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bufferImageHeight = *ptr
	return x
}

// ImageSubresource returns the value of imageSubresource from VkBufferImageCopy
func (x VkBufferImageCopy) ImageSubresource() VkImageSubresourceLayers {
	ptr := /* Identifier */ (*VkImageSubresourceLayers)(&x.imageSubresource)
	return *ptr
}

// WithImageSubresource copies the provided value into C space and stores it
// at imageSubresource on VkBufferImageCopy
func (x *VkBufferImageCopy) WithImageSubresource(y VkImageSubresourceLayers) *VkBufferImageCopy {
	ptr := /* Identifier */ (*C.VkImageSubresourceLayers)(&y)
	x.imageSubresource = *ptr
	return x
}

// ImageOffset returns the value of imageOffset from VkBufferImageCopy
func (x VkBufferImageCopy) ImageOffset() VkOffset3D {
	ptr := /* Identifier */ (*VkOffset3D)(&x.imageOffset)
	return *ptr
}

// WithImageOffset copies the provided value into C space and stores it
// at imageOffset on VkBufferImageCopy
func (x *VkBufferImageCopy) WithImageOffset(y VkOffset3D) *VkBufferImageCopy {
	ptr := /* Identifier */ (*C.VkOffset3D)(&y)
	x.imageOffset = *ptr
	return x
}

// ImageExtent returns the value of imageExtent from VkBufferImageCopy
func (x VkBufferImageCopy) ImageExtent() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.imageExtent)
	return *ptr
}

// WithImageExtent copies the provided value into C space and stores it
// at imageExtent on VkBufferImageCopy
func (x *VkBufferImageCopy) WithImageExtent(y VkExtent3D) *VkBufferImageCopy {
	ptr := /* Identifier */ (*C.VkExtent3D)(&y)
	x.imageExtent = *ptr
	return x
}

//VkClearAttachment provides a go interface for VkClearAttachment.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearAttachment.html
type VkClearAttachment C.struct_VkClearAttachment

// NewVkClearAttachment allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkClearAttachment() *VkClearAttachment {
	sz := unsafe.Sizeof(VkClearAttachment{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkClearAttachment)(ptr)
}

// Free releases the memory allocated by the NewVkClearAttachment method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkClearAttachment) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkClearAttachment) AsPtr() *VkClearAttachment { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkClearAttachment) AsCPtr() *VkClearAttachment {
	clone := newVkClearAttachment()
	*clone = *x
	return clone
}

// AspectMask returns the value of aspectMask from VkClearAttachment
func (x VkClearAttachment) AspectMask() VkImageAspectFlags {
	ptr := /* Identifier */ (*VkImageAspectFlags)(&x.aspectMask)
	return *ptr
}

// WithAspectMask copies the provided value into C space and stores it
// at aspectMask on VkClearAttachment
func (x *VkClearAttachment) WithAspectMask(y VkImageAspectFlags) *VkClearAttachment {
	ptr := /* Identifier */ (*C.VkImageAspectFlags)(&y)
	x.aspectMask = *ptr
	return x
}

// ColorAttachment returns the value of colorAttachment from VkClearAttachment
func (x VkClearAttachment) ColorAttachment() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.colorAttachment)
	return *ptr
}

// WithColorAttachment copies the provided value into C space and stores it
// at colorAttachment on VkClearAttachment
func (x *VkClearAttachment) WithColorAttachment(y uint32) *VkClearAttachment {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.colorAttachment = *ptr
	return x
}

// ClearValue returns the value of clearValue from VkClearAttachment
func (x VkClearAttachment) ClearValue() VkClearValue {
	ptr := /* Identifier */ (*VkClearValue)(&x.clearValue)
	return *ptr
}

// WithClearValue copies the provided value into C space and stores it
// at clearValue on VkClearAttachment
func (x *VkClearAttachment) WithClearValue(y VkClearValue) *VkClearAttachment {
	ptr := /* Identifier */ (*C.VkClearValue)(&y)
	x.clearValue = *ptr
	return x
}

//VkPipelineDepthStencilStateCreateInfo provides a go interface for VkPipelineDepthStencilStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDepthStencilStateCreateInfo.html
type VkPipelineDepthStencilStateCreateInfo C.struct_VkPipelineDepthStencilStateCreateInfo

// NewVkPipelineDepthStencilStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineDepthStencilStateCreateInfo() *VkPipelineDepthStencilStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineDepthStencilStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineDepthStencilStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineDepthStencilStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineDepthStencilStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineDepthStencilStateCreateInfo) AsPtr() *VkPipelineDepthStencilStateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineDepthStencilStateCreateInfo) AsCPtr() *VkPipelineDepthStencilStateCreateInfo {
	clone := newVkPipelineDepthStencilStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineDepthStencilStateCreateInfo) WithDefaultSType() *VkPipelineDepthStencilStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithSType(y VkStructureType) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineDepthStencilStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) Flags() VkPipelineDepthStencilStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineDepthStencilStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithFlags(y VkPipelineDepthStencilStateCreateFlags) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineDepthStencilStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// DepthTestEnable returns the value of depthTestEnable from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) DepthTestEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthTestEnable)
	return *ptr
}

// WithDepthTestEnable copies the provided value into C space and stores it
// at depthTestEnable on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithDepthTestEnable(y VkBool32) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthTestEnable = *ptr
	return x
}

// DepthWriteEnable returns the value of depthWriteEnable from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) DepthWriteEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthWriteEnable)
	return *ptr
}

// WithDepthWriteEnable copies the provided value into C space and stores it
// at depthWriteEnable on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithDepthWriteEnable(y VkBool32) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthWriteEnable = *ptr
	return x
}

// DepthCompareOp returns the value of depthCompareOp from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) DepthCompareOp() VkCompareOp {
	ptr := /* Identifier */ (*VkCompareOp)(&x.depthCompareOp)
	return *ptr
}

// WithDepthCompareOp copies the provided value into C space and stores it
// at depthCompareOp on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithDepthCompareOp(y VkCompareOp) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkCompareOp)(&y)
	x.depthCompareOp = *ptr
	return x
}

// DepthBoundsTestEnable returns the value of depthBoundsTestEnable from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) DepthBoundsTestEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthBoundsTestEnable)
	return *ptr
}

// WithDepthBoundsTestEnable copies the provided value into C space and stores it
// at depthBoundsTestEnable on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithDepthBoundsTestEnable(y VkBool32) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthBoundsTestEnable = *ptr
	return x
}

// StencilTestEnable returns the value of stencilTestEnable from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) StencilTestEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.stencilTestEnable)
	return *ptr
}

// WithStencilTestEnable copies the provided value into C space and stores it
// at stencilTestEnable on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithStencilTestEnable(y VkBool32) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.stencilTestEnable = *ptr
	return x
}

// Front returns the value of front from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) Front() VkStencilOpState {
	ptr := /* Identifier */ (*VkStencilOpState)(&x.front)
	return *ptr
}

// WithFront copies the provided value into C space and stores it
// at front on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithFront(y VkStencilOpState) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStencilOpState)(&y)
	x.front = *ptr
	return x
}

// Back returns the value of back from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) Back() VkStencilOpState {
	ptr := /* Identifier */ (*VkStencilOpState)(&x.back)
	return *ptr
}

// WithBack copies the provided value into C space and stores it
// at back on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithBack(y VkStencilOpState) *VkPipelineDepthStencilStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStencilOpState)(&y)
	x.back = *ptr
	return x
}

// MinDepthBounds returns the value of minDepthBounds from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) MinDepthBounds() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.minDepthBounds)
	return *ptr
}

// WithMinDepthBounds copies the provided value into C space and stores it
// at minDepthBounds on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithMinDepthBounds(y float32) *VkPipelineDepthStencilStateCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.minDepthBounds = *ptr
	return x
}

// MaxDepthBounds returns the value of maxDepthBounds from VkPipelineDepthStencilStateCreateInfo
func (x VkPipelineDepthStencilStateCreateInfo) MaxDepthBounds() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.maxDepthBounds)
	return *ptr
}

// WithMaxDepthBounds copies the provided value into C space and stores it
// at maxDepthBounds on VkPipelineDepthStencilStateCreateInfo
func (x *VkPipelineDepthStencilStateCreateInfo) WithMaxDepthBounds(y float32) *VkPipelineDepthStencilStateCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.maxDepthBounds = *ptr
	return x
}

//VkClearDepthStencilValue provides a go interface for VkClearDepthStencilValue.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearDepthStencilValue.html
type VkClearDepthStencilValue C.struct_VkClearDepthStencilValue

// NewVkClearDepthStencilValue allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkClearDepthStencilValue() *VkClearDepthStencilValue {
	sz := unsafe.Sizeof(VkClearDepthStencilValue{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkClearDepthStencilValue)(ptr)
}

// Free releases the memory allocated by the NewVkClearDepthStencilValue method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkClearDepthStencilValue) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkClearDepthStencilValue) AsPtr() *VkClearDepthStencilValue { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkClearDepthStencilValue) AsCPtr() *VkClearDepthStencilValue {
	clone := newVkClearDepthStencilValue()
	*clone = *x
	return clone
}

// Depth returns the value of depth from VkClearDepthStencilValue
func (x VkClearDepthStencilValue) Depth() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.depth)
	return *ptr
}

// WithDepth copies the provided value into C space and stores it
// at depth on VkClearDepthStencilValue
func (x *VkClearDepthStencilValue) WithDepth(y float32) *VkClearDepthStencilValue {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.depth = *ptr
	return x
}

// Stencil returns the value of stencil from VkClearDepthStencilValue
func (x VkClearDepthStencilValue) Stencil() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.stencil)
	return *ptr
}

// WithStencil copies the provided value into C space and stores it
// at stencil on VkClearDepthStencilValue
func (x *VkClearDepthStencilValue) WithStencil(y uint32) *VkClearDepthStencilValue {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.stencil = *ptr
	return x
}

//VkPipelineDynamicStateCreateInfo provides a go interface for VkPipelineDynamicStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDynamicStateCreateInfo.html
type VkPipelineDynamicStateCreateInfo C.struct_VkPipelineDynamicStateCreateInfo

// NewVkPipelineDynamicStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineDynamicStateCreateInfo() *VkPipelineDynamicStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineDynamicStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineDynamicStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineDynamicStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineDynamicStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineDynamicStateCreateInfo) AsPtr() *VkPipelineDynamicStateCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineDynamicStateCreateInfo) AsCPtr() *VkPipelineDynamicStateCreateInfo {
	clone := newVkPipelineDynamicStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineDynamicStateCreateInfo
func (x VkPipelineDynamicStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineDynamicStateCreateInfo) WithDefaultSType() *VkPipelineDynamicStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineDynamicStateCreateInfo
func (x *VkPipelineDynamicStateCreateInfo) WithSType(y VkStructureType) *VkPipelineDynamicStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineDynamicStateCreateInfo
func (x VkPipelineDynamicStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineDynamicStateCreateInfo
func (x *VkPipelineDynamicStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineDynamicStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineDynamicStateCreateInfo
func (x VkPipelineDynamicStateCreateInfo) Flags() VkPipelineDynamicStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineDynamicStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineDynamicStateCreateInfo
func (x *VkPipelineDynamicStateCreateInfo) WithFlags(y VkPipelineDynamicStateCreateFlags) *VkPipelineDynamicStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineDynamicStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// DynamicStateCount returns the value of dynamicStateCount from VkPipelineDynamicStateCreateInfo
func (x VkPipelineDynamicStateCreateInfo) DynamicStateCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dynamicStateCount)
	return *ptr
}

// WithDynamicStateCount copies the provided value into C space and stores it
// at dynamicStateCount on VkPipelineDynamicStateCreateInfo
func (x *VkPipelineDynamicStateCreateInfo) WithDynamicStateCount(y uint32) *VkPipelineDynamicStateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dynamicStateCount = *ptr
	return x
}

// PDynamicStates returns the value of pDynamicStates from VkPipelineDynamicStateCreateInfo
func (x VkPipelineDynamicStateCreateInfo) PDynamicStates() []VkDynamicState {
	ptr := func(x **C.VkDynamicState) *[]VkDynamicState { /* Slice */
		slc := unsafe.Slice((*VkDynamicState)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDynamicStates)
	return *ptr
}

// WithPDynamicStates copies the provided value into C space and stores it
// at pDynamicStates on VkPipelineDynamicStateCreateInfo
func (x *VkPipelineDynamicStateCreateInfo) WithPDynamicStates(y []VkDynamicState) *VkPipelineDynamicStateCreateInfo {
	ptr := func(x *[]VkDynamicState) **C.VkDynamicState { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDynamicState)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDynamicState)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDynamicStates = *ptr
	return x
}

//VkClearRect provides a go interface for VkClearRect.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearRect.html
type VkClearRect C.struct_VkClearRect

// NewVkClearRect allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkClearRect() *VkClearRect {
	sz := unsafe.Sizeof(VkClearRect{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkClearRect)(ptr)
}

// Free releases the memory allocated by the NewVkClearRect method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkClearRect) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkClearRect) AsPtr() *VkClearRect { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkClearRect) AsCPtr() *VkClearRect {
	clone := newVkClearRect()
	*clone = *x
	return clone
}

// Rect returns the value of rect from VkClearRect
func (x VkClearRect) Rect() VkRect2D {
	ptr := /* Identifier */ (*VkRect2D)(&x.rect)
	return *ptr
}

// WithRect copies the provided value into C space and stores it
// at rect on VkClearRect
func (x *VkClearRect) WithRect(y VkRect2D) *VkClearRect {
	ptr := /* Identifier */ (*C.VkRect2D)(&y)
	x.rect = *ptr
	return x
}

// BaseArrayLayer returns the value of baseArrayLayer from VkClearRect
func (x VkClearRect) BaseArrayLayer() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.baseArrayLayer)
	return *ptr
}

// WithBaseArrayLayer copies the provided value into C space and stores it
// at baseArrayLayer on VkClearRect
func (x *VkClearRect) WithBaseArrayLayer(y uint32) *VkClearRect {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.baseArrayLayer = *ptr
	return x
}

// LayerCount returns the value of layerCount from VkClearRect
func (x VkClearRect) LayerCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.layerCount)
	return *ptr
}

// WithLayerCount copies the provided value into C space and stores it
// at layerCount on VkClearRect
func (x *VkClearRect) WithLayerCount(y uint32) *VkClearRect {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.layerCount = *ptr
	return x
}

//VkPipelineInputAssemblyStateCreateInfo provides a go interface for VkPipelineInputAssemblyStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineInputAssemblyStateCreateInfo.html
type VkPipelineInputAssemblyStateCreateInfo C.struct_VkPipelineInputAssemblyStateCreateInfo

// NewVkPipelineInputAssemblyStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineInputAssemblyStateCreateInfo() *VkPipelineInputAssemblyStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineInputAssemblyStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineInputAssemblyStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineInputAssemblyStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineInputAssemblyStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineInputAssemblyStateCreateInfo) AsPtr() *VkPipelineInputAssemblyStateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineInputAssemblyStateCreateInfo) AsCPtr() *VkPipelineInputAssemblyStateCreateInfo {
	clone := newVkPipelineInputAssemblyStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineInputAssemblyStateCreateInfo
func (x VkPipelineInputAssemblyStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineInputAssemblyStateCreateInfo) WithDefaultSType() *VkPipelineInputAssemblyStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineInputAssemblyStateCreateInfo
func (x *VkPipelineInputAssemblyStateCreateInfo) WithSType(y VkStructureType) *VkPipelineInputAssemblyStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineInputAssemblyStateCreateInfo
func (x VkPipelineInputAssemblyStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineInputAssemblyStateCreateInfo
func (x *VkPipelineInputAssemblyStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineInputAssemblyStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineInputAssemblyStateCreateInfo
func (x VkPipelineInputAssemblyStateCreateInfo) Flags() VkPipelineInputAssemblyStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineInputAssemblyStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineInputAssemblyStateCreateInfo
func (x *VkPipelineInputAssemblyStateCreateInfo) WithFlags(y VkPipelineInputAssemblyStateCreateFlags) *VkPipelineInputAssemblyStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineInputAssemblyStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Topology returns the value of topology from VkPipelineInputAssemblyStateCreateInfo
func (x VkPipelineInputAssemblyStateCreateInfo) Topology() VkPrimitiveTopology {
	ptr := /* Identifier */ (*VkPrimitiveTopology)(&x.topology)
	return *ptr
}

// WithTopology copies the provided value into C space and stores it
// at topology on VkPipelineInputAssemblyStateCreateInfo
func (x *VkPipelineInputAssemblyStateCreateInfo) WithTopology(y VkPrimitiveTopology) *VkPipelineInputAssemblyStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPrimitiveTopology)(&y)
	x.topology = *ptr
	return x
}

// PrimitiveRestartEnable returns the value of primitiveRestartEnable from VkPipelineInputAssemblyStateCreateInfo
func (x VkPipelineInputAssemblyStateCreateInfo) PrimitiveRestartEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.primitiveRestartEnable)
	return *ptr
}

// WithPrimitiveRestartEnable copies the provided value into C space and stores it
// at primitiveRestartEnable on VkPipelineInputAssemblyStateCreateInfo
func (x *VkPipelineInputAssemblyStateCreateInfo) WithPrimitiveRestartEnable(y VkBool32) *VkPipelineInputAssemblyStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.primitiveRestartEnable = *ptr
	return x
}

//VkImageBlit provides a go interface for VkImageBlit.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageBlit.html
type VkImageBlit C.struct_VkImageBlit

// NewVkImageBlit allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageBlit() *VkImageBlit {
	sz := unsafe.Sizeof(VkImageBlit{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageBlit)(ptr)
}

// Free releases the memory allocated by the NewVkImageBlit method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageBlit) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageBlit) AsPtr() *VkImageBlit { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageBlit) AsCPtr() *VkImageBlit {
	clone := newVkImageBlit()
	*clone = *x
	return clone
}

// SrcSubresource returns the value of srcSubresource from VkImageBlit
func (x VkImageBlit) SrcSubresource() VkImageSubresourceLayers {
	ptr := /* Identifier */ (*VkImageSubresourceLayers)(&x.srcSubresource)
	return *ptr
}

// WithSrcSubresource copies the provided value into C space and stores it
// at srcSubresource on VkImageBlit
func (x *VkImageBlit) WithSrcSubresource(y VkImageSubresourceLayers) *VkImageBlit {
	ptr := /* Identifier */ (*C.VkImageSubresourceLayers)(&y)
	x.srcSubresource = *ptr
	return x
}

// SrcOffsets returns the value of srcOffsets from VkImageBlit
func (x VkImageBlit) SrcOffsets() []VkOffset3D {
	ptr := func(x *[2]C.VkOffset3D) *[]VkOffset3D { /* Array */
		slc := unsafe.Slice((*VkOffset3D)(unsafe.Pointer(x)), 2)
		return &slc
	}(&x.srcOffsets)
	return *ptr
}

// WithSrcOffsets copies the provided value into C space and stores it
// at srcOffsets on VkImageBlit
func (x *VkImageBlit) WithSrcOffsets(y []VkOffset3D) *VkImageBlit {
	ptr := func(x *[]VkOffset3D) **C.VkOffset3D { /* Array */
		if *x != nil {
			slc := (*C.VkOffset3D)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkOffset3D)(unsafe.Pointer((&ptr)))
	}(&y)
	copy(x.srcOffsets[:], unsafe.Slice(*ptr, len(y)))
	return x
}

// DstSubresource returns the value of dstSubresource from VkImageBlit
func (x VkImageBlit) DstSubresource() VkImageSubresourceLayers {
	ptr := /* Identifier */ (*VkImageSubresourceLayers)(&x.dstSubresource)
	return *ptr
}

// WithDstSubresource copies the provided value into C space and stores it
// at dstSubresource on VkImageBlit
func (x *VkImageBlit) WithDstSubresource(y VkImageSubresourceLayers) *VkImageBlit {
	ptr := /* Identifier */ (*C.VkImageSubresourceLayers)(&y)
	x.dstSubresource = *ptr
	return x
}

// DstOffsets returns the value of dstOffsets from VkImageBlit
func (x VkImageBlit) DstOffsets() []VkOffset3D {
	ptr := func(x *[2]C.VkOffset3D) *[]VkOffset3D { /* Array */
		slc := unsafe.Slice((*VkOffset3D)(unsafe.Pointer(x)), 2)
		return &slc
	}(&x.dstOffsets)
	return *ptr
}

// WithDstOffsets copies the provided value into C space and stores it
// at dstOffsets on VkImageBlit
func (x *VkImageBlit) WithDstOffsets(y []VkOffset3D) *VkImageBlit {
	ptr := func(x *[]VkOffset3D) **C.VkOffset3D { /* Array */
		if *x != nil {
			slc := (*C.VkOffset3D)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkOffset3D)(unsafe.Pointer((&ptr)))
	}(&y)
	copy(x.dstOffsets[:], unsafe.Slice(*ptr, len(y)))
	return x
}

//VkImageCopy provides a go interface for VkImageCopy.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCopy.html
type VkImageCopy C.struct_VkImageCopy

// NewVkImageCopy allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageCopy() *VkImageCopy {
	sz := unsafe.Sizeof(VkImageCopy{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageCopy)(ptr)
}

// Free releases the memory allocated by the NewVkImageCopy method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageCopy) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageCopy) AsPtr() *VkImageCopy { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageCopy) AsCPtr() *VkImageCopy {
	clone := newVkImageCopy()
	*clone = *x
	return clone
}

// SrcSubresource returns the value of srcSubresource from VkImageCopy
func (x VkImageCopy) SrcSubresource() VkImageSubresourceLayers {
	ptr := /* Identifier */ (*VkImageSubresourceLayers)(&x.srcSubresource)
	return *ptr
}

// WithSrcSubresource copies the provided value into C space and stores it
// at srcSubresource on VkImageCopy
func (x *VkImageCopy) WithSrcSubresource(y VkImageSubresourceLayers) *VkImageCopy {
	ptr := /* Identifier */ (*C.VkImageSubresourceLayers)(&y)
	x.srcSubresource = *ptr
	return x
}

// SrcOffset returns the value of srcOffset from VkImageCopy
func (x VkImageCopy) SrcOffset() VkOffset3D {
	ptr := /* Identifier */ (*VkOffset3D)(&x.srcOffset)
	return *ptr
}

// WithSrcOffset copies the provided value into C space and stores it
// at srcOffset on VkImageCopy
func (x *VkImageCopy) WithSrcOffset(y VkOffset3D) *VkImageCopy {
	ptr := /* Identifier */ (*C.VkOffset3D)(&y)
	x.srcOffset = *ptr
	return x
}

// DstSubresource returns the value of dstSubresource from VkImageCopy
func (x VkImageCopy) DstSubresource() VkImageSubresourceLayers {
	ptr := /* Identifier */ (*VkImageSubresourceLayers)(&x.dstSubresource)
	return *ptr
}

// WithDstSubresource copies the provided value into C space and stores it
// at dstSubresource on VkImageCopy
func (x *VkImageCopy) WithDstSubresource(y VkImageSubresourceLayers) *VkImageCopy {
	ptr := /* Identifier */ (*C.VkImageSubresourceLayers)(&y)
	x.dstSubresource = *ptr
	return x
}

// DstOffset returns the value of dstOffset from VkImageCopy
func (x VkImageCopy) DstOffset() VkOffset3D {
	ptr := /* Identifier */ (*VkOffset3D)(&x.dstOffset)
	return *ptr
}

// WithDstOffset copies the provided value into C space and stores it
// at dstOffset on VkImageCopy
func (x *VkImageCopy) WithDstOffset(y VkOffset3D) *VkImageCopy {
	ptr := /* Identifier */ (*C.VkOffset3D)(&y)
	x.dstOffset = *ptr
	return x
}

// Extent returns the value of extent from VkImageCopy
func (x VkImageCopy) Extent() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.extent)
	return *ptr
}

// WithExtent copies the provided value into C space and stores it
// at extent on VkImageCopy
func (x *VkImageCopy) WithExtent(y VkExtent3D) *VkImageCopy {
	ptr := /* Identifier */ (*C.VkExtent3D)(&y)
	x.extent = *ptr
	return x
}

//VkPipelineMultisampleStateCreateInfo provides a go interface for VkPipelineMultisampleStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineMultisampleStateCreateInfo.html
type VkPipelineMultisampleStateCreateInfo C.struct_VkPipelineMultisampleStateCreateInfo

// NewVkPipelineMultisampleStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineMultisampleStateCreateInfo() *VkPipelineMultisampleStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineMultisampleStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineMultisampleStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineMultisampleStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineMultisampleStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineMultisampleStateCreateInfo) AsPtr() *VkPipelineMultisampleStateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineMultisampleStateCreateInfo) AsCPtr() *VkPipelineMultisampleStateCreateInfo {
	clone := newVkPipelineMultisampleStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineMultisampleStateCreateInfo) WithDefaultSType() *VkPipelineMultisampleStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithSType(y VkStructureType) *VkPipelineMultisampleStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineMultisampleStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) Flags() VkPipelineMultisampleStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineMultisampleStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithFlags(y VkPipelineMultisampleStateCreateFlags) *VkPipelineMultisampleStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineMultisampleStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// RasterizationSamples returns the value of rasterizationSamples from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) RasterizationSamples() VkSampleCountFlagBits {
	ptr := /* Identifier */ (*VkSampleCountFlagBits)(&x.rasterizationSamples)
	return *ptr
}

// WithRasterizationSamples copies the provided value into C space and stores it
// at rasterizationSamples on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithRasterizationSamples(y VkSampleCountFlagBits) *VkPipelineMultisampleStateCreateInfo {
	ptr := /* Identifier */ (*C.VkSampleCountFlagBits)(&y)
	x.rasterizationSamples = *ptr
	return x
}

// SampleShadingEnable returns the value of sampleShadingEnable from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) SampleShadingEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.sampleShadingEnable)
	return *ptr
}

// WithSampleShadingEnable copies the provided value into C space and stores it
// at sampleShadingEnable on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithSampleShadingEnable(y VkBool32) *VkPipelineMultisampleStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.sampleShadingEnable = *ptr
	return x
}

// MinSampleShading returns the value of minSampleShading from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) MinSampleShading() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.minSampleShading)
	return *ptr
}

// WithMinSampleShading copies the provided value into C space and stores it
// at minSampleShading on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithMinSampleShading(y float32) *VkPipelineMultisampleStateCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.minSampleShading = *ptr
	return x
}

// PSampleMask returns the value of pSampleMask from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) PSampleMask() []VkSampleMask {
	ptr := func(x **C.VkSampleMask) *[]VkSampleMask { /* Slice */
		slc := unsafe.Slice((*VkSampleMask)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSampleMask)
	return *ptr
}

// WithPSampleMask copies the provided value into C space and stores it
// at pSampleMask on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithPSampleMask(y []VkSampleMask) *VkPipelineMultisampleStateCreateInfo {
	ptr := func(x *[]VkSampleMask) **C.VkSampleMask { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSampleMask)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSampleMask)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSampleMask = *ptr
	return x
}

// AlphaToCoverageEnable returns the value of alphaToCoverageEnable from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) AlphaToCoverageEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.alphaToCoverageEnable)
	return *ptr
}

// WithAlphaToCoverageEnable copies the provided value into C space and stores it
// at alphaToCoverageEnable on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithAlphaToCoverageEnable(y VkBool32) *VkPipelineMultisampleStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.alphaToCoverageEnable = *ptr
	return x
}

// AlphaToOneEnable returns the value of alphaToOneEnable from VkPipelineMultisampleStateCreateInfo
func (x VkPipelineMultisampleStateCreateInfo) AlphaToOneEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.alphaToOneEnable)
	return *ptr
}

// WithAlphaToOneEnable copies the provided value into C space and stores it
// at alphaToOneEnable on VkPipelineMultisampleStateCreateInfo
func (x *VkPipelineMultisampleStateCreateInfo) WithAlphaToOneEnable(y VkBool32) *VkPipelineMultisampleStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.alphaToOneEnable = *ptr
	return x
}

//VkImageResolve provides a go interface for VkImageResolve.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageResolve.html
type VkImageResolve C.struct_VkImageResolve

// NewVkImageResolve allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageResolve() *VkImageResolve {
	sz := unsafe.Sizeof(VkImageResolve{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageResolve)(ptr)
}

// Free releases the memory allocated by the NewVkImageResolve method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageResolve) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageResolve) AsPtr() *VkImageResolve { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageResolve) AsCPtr() *VkImageResolve {
	clone := newVkImageResolve()
	*clone = *x
	return clone
}

// SrcSubresource returns the value of srcSubresource from VkImageResolve
func (x VkImageResolve) SrcSubresource() VkImageSubresourceLayers {
	ptr := /* Identifier */ (*VkImageSubresourceLayers)(&x.srcSubresource)
	return *ptr
}

// WithSrcSubresource copies the provided value into C space and stores it
// at srcSubresource on VkImageResolve
func (x *VkImageResolve) WithSrcSubresource(y VkImageSubresourceLayers) *VkImageResolve {
	ptr := /* Identifier */ (*C.VkImageSubresourceLayers)(&y)
	x.srcSubresource = *ptr
	return x
}

// SrcOffset returns the value of srcOffset from VkImageResolve
func (x VkImageResolve) SrcOffset() VkOffset3D {
	ptr := /* Identifier */ (*VkOffset3D)(&x.srcOffset)
	return *ptr
}

// WithSrcOffset copies the provided value into C space and stores it
// at srcOffset on VkImageResolve
func (x *VkImageResolve) WithSrcOffset(y VkOffset3D) *VkImageResolve {
	ptr := /* Identifier */ (*C.VkOffset3D)(&y)
	x.srcOffset = *ptr
	return x
}

// DstSubresource returns the value of dstSubresource from VkImageResolve
func (x VkImageResolve) DstSubresource() VkImageSubresourceLayers {
	ptr := /* Identifier */ (*VkImageSubresourceLayers)(&x.dstSubresource)
	return *ptr
}

// WithDstSubresource copies the provided value into C space and stores it
// at dstSubresource on VkImageResolve
func (x *VkImageResolve) WithDstSubresource(y VkImageSubresourceLayers) *VkImageResolve {
	ptr := /* Identifier */ (*C.VkImageSubresourceLayers)(&y)
	x.dstSubresource = *ptr
	return x
}

// DstOffset returns the value of dstOffset from VkImageResolve
func (x VkImageResolve) DstOffset() VkOffset3D {
	ptr := /* Identifier */ (*VkOffset3D)(&x.dstOffset)
	return *ptr
}

// WithDstOffset copies the provided value into C space and stores it
// at dstOffset on VkImageResolve
func (x *VkImageResolve) WithDstOffset(y VkOffset3D) *VkImageResolve {
	ptr := /* Identifier */ (*C.VkOffset3D)(&y)
	x.dstOffset = *ptr
	return x
}

// Extent returns the value of extent from VkImageResolve
func (x VkImageResolve) Extent() VkExtent3D {
	ptr := /* Identifier */ (*VkExtent3D)(&x.extent)
	return *ptr
}

// WithExtent copies the provided value into C space and stores it
// at extent on VkImageResolve
func (x *VkImageResolve) WithExtent(y VkExtent3D) *VkImageResolve {
	ptr := /* Identifier */ (*C.VkExtent3D)(&y)
	x.extent = *ptr
	return x
}

//VkPipelineRasterizationStateCreateInfo provides a go interface for VkPipelineRasterizationStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationStateCreateInfo.html
type VkPipelineRasterizationStateCreateInfo C.struct_VkPipelineRasterizationStateCreateInfo

// NewVkPipelineRasterizationStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineRasterizationStateCreateInfo() *VkPipelineRasterizationStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineRasterizationStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineRasterizationStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineRasterizationStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineRasterizationStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineRasterizationStateCreateInfo) AsPtr() *VkPipelineRasterizationStateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineRasterizationStateCreateInfo) AsCPtr() *VkPipelineRasterizationStateCreateInfo {
	clone := newVkPipelineRasterizationStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineRasterizationStateCreateInfo) WithDefaultSType() *VkPipelineRasterizationStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithSType(y VkStructureType) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineRasterizationStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) Flags() VkPipelineRasterizationStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineRasterizationStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithFlags(y VkPipelineRasterizationStateCreateFlags) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineRasterizationStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// DepthClampEnable returns the value of depthClampEnable from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) DepthClampEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthClampEnable)
	return *ptr
}

// WithDepthClampEnable copies the provided value into C space and stores it
// at depthClampEnable on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithDepthClampEnable(y VkBool32) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthClampEnable = *ptr
	return x
}

// RasterizerDiscardEnable returns the value of rasterizerDiscardEnable from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) RasterizerDiscardEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.rasterizerDiscardEnable)
	return *ptr
}

// WithRasterizerDiscardEnable copies the provided value into C space and stores it
// at rasterizerDiscardEnable on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithRasterizerDiscardEnable(y VkBool32) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.rasterizerDiscardEnable = *ptr
	return x
}

// PolygonMode returns the value of polygonMode from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) PolygonMode() VkPolygonMode {
	ptr := /* Identifier */ (*VkPolygonMode)(&x.polygonMode)
	return *ptr
}

// WithPolygonMode copies the provided value into C space and stores it
// at polygonMode on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithPolygonMode(y VkPolygonMode) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPolygonMode)(&y)
	x.polygonMode = *ptr
	return x
}

// CullMode returns the value of cullMode from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) CullMode() VkCullModeFlags {
	ptr := /* Identifier */ (*VkCullModeFlags)(&x.cullMode)
	return *ptr
}

// WithCullMode copies the provided value into C space and stores it
// at cullMode on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithCullMode(y VkCullModeFlags) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkCullModeFlags)(&y)
	x.cullMode = *ptr
	return x
}

// FrontFace returns the value of frontFace from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) FrontFace() VkFrontFace {
	ptr := /* Identifier */ (*VkFrontFace)(&x.frontFace)
	return *ptr
}

// WithFrontFace copies the provided value into C space and stores it
// at frontFace on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithFrontFace(y VkFrontFace) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkFrontFace)(&y)
	x.frontFace = *ptr
	return x
}

// DepthBiasEnable returns the value of depthBiasEnable from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) DepthBiasEnable() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.depthBiasEnable)
	return *ptr
}

// WithDepthBiasEnable copies the provided value into C space and stores it
// at depthBiasEnable on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithDepthBiasEnable(y VkBool32) *VkPipelineRasterizationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.depthBiasEnable = *ptr
	return x
}

// DepthBiasConstantFactor returns the value of depthBiasConstantFactor from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) DepthBiasConstantFactor() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.depthBiasConstantFactor)
	return *ptr
}

// WithDepthBiasConstantFactor copies the provided value into C space and stores it
// at depthBiasConstantFactor on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithDepthBiasConstantFactor(y float32) *VkPipelineRasterizationStateCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.depthBiasConstantFactor = *ptr
	return x
}

// DepthBiasClamp returns the value of depthBiasClamp from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) DepthBiasClamp() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.depthBiasClamp)
	return *ptr
}

// WithDepthBiasClamp copies the provided value into C space and stores it
// at depthBiasClamp on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithDepthBiasClamp(y float32) *VkPipelineRasterizationStateCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.depthBiasClamp = *ptr
	return x
}

// DepthBiasSlopeFactor returns the value of depthBiasSlopeFactor from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) DepthBiasSlopeFactor() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.depthBiasSlopeFactor)
	return *ptr
}

// WithDepthBiasSlopeFactor copies the provided value into C space and stores it
// at depthBiasSlopeFactor on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithDepthBiasSlopeFactor(y float32) *VkPipelineRasterizationStateCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.depthBiasSlopeFactor = *ptr
	return x
}

// LineWidth returns the value of lineWidth from VkPipelineRasterizationStateCreateInfo
func (x VkPipelineRasterizationStateCreateInfo) LineWidth() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.lineWidth)
	return *ptr
}

// WithLineWidth copies the provided value into C space and stores it
// at lineWidth on VkPipelineRasterizationStateCreateInfo
func (x *VkPipelineRasterizationStateCreateInfo) WithLineWidth(y float32) *VkPipelineRasterizationStateCreateInfo {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.lineWidth = *ptr
	return x
}

//VkImageSubresourceLayers provides a go interface for VkImageSubresourceLayers.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresourceLayers.html
type VkImageSubresourceLayers C.struct_VkImageSubresourceLayers

// NewVkImageSubresourceLayers allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageSubresourceLayers() *VkImageSubresourceLayers {
	sz := unsafe.Sizeof(VkImageSubresourceLayers{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageSubresourceLayers)(ptr)
}

// Free releases the memory allocated by the NewVkImageSubresourceLayers method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageSubresourceLayers) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageSubresourceLayers) AsPtr() *VkImageSubresourceLayers { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageSubresourceLayers) AsCPtr() *VkImageSubresourceLayers {
	clone := newVkImageSubresourceLayers()
	*clone = *x
	return clone
}

// AspectMask returns the value of aspectMask from VkImageSubresourceLayers
func (x VkImageSubresourceLayers) AspectMask() VkImageAspectFlags {
	ptr := /* Identifier */ (*VkImageAspectFlags)(&x.aspectMask)
	return *ptr
}

// WithAspectMask copies the provided value into C space and stores it
// at aspectMask on VkImageSubresourceLayers
func (x *VkImageSubresourceLayers) WithAspectMask(y VkImageAspectFlags) *VkImageSubresourceLayers {
	ptr := /* Identifier */ (*C.VkImageAspectFlags)(&y)
	x.aspectMask = *ptr
	return x
}

// MipLevel returns the value of mipLevel from VkImageSubresourceLayers
func (x VkImageSubresourceLayers) MipLevel() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.mipLevel)
	return *ptr
}

// WithMipLevel copies the provided value into C space and stores it
// at mipLevel on VkImageSubresourceLayers
func (x *VkImageSubresourceLayers) WithMipLevel(y uint32) *VkImageSubresourceLayers {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.mipLevel = *ptr
	return x
}

// BaseArrayLayer returns the value of baseArrayLayer from VkImageSubresourceLayers
func (x VkImageSubresourceLayers) BaseArrayLayer() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.baseArrayLayer)
	return *ptr
}

// WithBaseArrayLayer copies the provided value into C space and stores it
// at baseArrayLayer on VkImageSubresourceLayers
func (x *VkImageSubresourceLayers) WithBaseArrayLayer(y uint32) *VkImageSubresourceLayers {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.baseArrayLayer = *ptr
	return x
}

// LayerCount returns the value of layerCount from VkImageSubresourceLayers
func (x VkImageSubresourceLayers) LayerCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.layerCount)
	return *ptr
}

// WithLayerCount copies the provided value into C space and stores it
// at layerCount on VkImageSubresourceLayers
func (x *VkImageSubresourceLayers) WithLayerCount(y uint32) *VkImageSubresourceLayers {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.layerCount = *ptr
	return x
}

//VkRenderPassBeginInfo provides a go interface for VkRenderPassBeginInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassBeginInfo.html
type VkRenderPassBeginInfo C.struct_VkRenderPassBeginInfo

// NewVkRenderPassBeginInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkRenderPassBeginInfo() *VkRenderPassBeginInfo {
	sz := unsafe.Sizeof(VkRenderPassBeginInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkRenderPassBeginInfo)(ptr)
}

// Free releases the memory allocated by the NewVkRenderPassBeginInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkRenderPassBeginInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkRenderPassBeginInfo) AsPtr() *VkRenderPassBeginInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkRenderPassBeginInfo) AsCPtr() *VkRenderPassBeginInfo {
	clone := newVkRenderPassBeginInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkRenderPassBeginInfo
func (x VkRenderPassBeginInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkRenderPassBeginInfo) WithDefaultSType() *VkRenderPassBeginInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkRenderPassBeginInfo
func (x *VkRenderPassBeginInfo) WithSType(y VkStructureType) *VkRenderPassBeginInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkRenderPassBeginInfo
func (x VkRenderPassBeginInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkRenderPassBeginInfo
func (x *VkRenderPassBeginInfo) WithPNext(y unsafe.Pointer) *VkRenderPassBeginInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// RenderPass returns the value of renderPass from VkRenderPassBeginInfo
func (x VkRenderPassBeginInfo) RenderPass() VkRenderPass {
	ptr := func(x *C.VkRenderPass) *VkRenderPass { /* Handle */ return (*VkRenderPass)(unsafe.Pointer(x)) }(&x.renderPass)
	return *ptr
}

// WithRenderPass copies the provided value into C space and stores it
// at renderPass on VkRenderPassBeginInfo
func (x *VkRenderPassBeginInfo) WithRenderPass(y VkRenderPass) *VkRenderPassBeginInfo {
	ptr := func(x *VkRenderPass) *C.VkRenderPass { /* Handle */ return (*C.VkRenderPass)(unsafe.Pointer(x)) }(&y)
	x.renderPass = *ptr
	return x
}

// Framebuffer returns the value of framebuffer from VkRenderPassBeginInfo
func (x VkRenderPassBeginInfo) Framebuffer() VkFramebuffer {
	ptr := func(x *C.VkFramebuffer) *VkFramebuffer { /* Handle */ return (*VkFramebuffer)(unsafe.Pointer(x)) }(&x.framebuffer)
	return *ptr
}

// WithFramebuffer copies the provided value into C space and stores it
// at framebuffer on VkRenderPassBeginInfo
func (x *VkRenderPassBeginInfo) WithFramebuffer(y VkFramebuffer) *VkRenderPassBeginInfo {
	ptr := func(x *VkFramebuffer) *C.VkFramebuffer { /* Handle */ return (*C.VkFramebuffer)(unsafe.Pointer(x)) }(&y)
	x.framebuffer = *ptr
	return x
}

// RenderArea returns the value of renderArea from VkRenderPassBeginInfo
func (x VkRenderPassBeginInfo) RenderArea() VkRect2D {
	ptr := /* Identifier */ (*VkRect2D)(&x.renderArea)
	return *ptr
}

// WithRenderArea copies the provided value into C space and stores it
// at renderArea on VkRenderPassBeginInfo
func (x *VkRenderPassBeginInfo) WithRenderArea(y VkRect2D) *VkRenderPassBeginInfo {
	ptr := /* Identifier */ (*C.VkRect2D)(&y)
	x.renderArea = *ptr
	return x
}

// ClearValueCount returns the value of clearValueCount from VkRenderPassBeginInfo
func (x VkRenderPassBeginInfo) ClearValueCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.clearValueCount)
	return *ptr
}

// WithClearValueCount copies the provided value into C space and stores it
// at clearValueCount on VkRenderPassBeginInfo
func (x *VkRenderPassBeginInfo) WithClearValueCount(y uint32) *VkRenderPassBeginInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.clearValueCount = *ptr
	return x
}

// PClearValues returns the value of pClearValues from VkRenderPassBeginInfo
func (x VkRenderPassBeginInfo) PClearValues() []VkClearValue {
	ptr := func(x **C.VkClearValue) *[]VkClearValue { /* Slice */
		slc := unsafe.Slice((*VkClearValue)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pClearValues)
	return *ptr
}

// WithPClearValues copies the provided value into C space and stores it
// at pClearValues on VkRenderPassBeginInfo
func (x *VkRenderPassBeginInfo) WithPClearValues(y []VkClearValue) *VkRenderPassBeginInfo {
	ptr := func(x *[]VkClearValue) **C.VkClearValue { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkClearValue)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkClearValue)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pClearValues = *ptr
	return x
}

//VkPipelineShaderStageCreateInfo provides a go interface for VkPipelineShaderStageCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineShaderStageCreateInfo.html
type VkPipelineShaderStageCreateInfo C.struct_VkPipelineShaderStageCreateInfo

// NewVkPipelineShaderStageCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineShaderStageCreateInfo() *VkPipelineShaderStageCreateInfo {
	sz := unsafe.Sizeof(VkPipelineShaderStageCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineShaderStageCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineShaderStageCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineShaderStageCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineShaderStageCreateInfo) AsPtr() *VkPipelineShaderStageCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineShaderStageCreateInfo) AsCPtr() *VkPipelineShaderStageCreateInfo {
	clone := newVkPipelineShaderStageCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineShaderStageCreateInfo
func (x VkPipelineShaderStageCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineShaderStageCreateInfo) WithDefaultSType() *VkPipelineShaderStageCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineShaderStageCreateInfo
func (x *VkPipelineShaderStageCreateInfo) WithSType(y VkStructureType) *VkPipelineShaderStageCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineShaderStageCreateInfo
func (x VkPipelineShaderStageCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineShaderStageCreateInfo
func (x *VkPipelineShaderStageCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineShaderStageCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineShaderStageCreateInfo
func (x VkPipelineShaderStageCreateInfo) Flags() VkPipelineShaderStageCreateFlags {
	ptr := /* Identifier */ (*VkPipelineShaderStageCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineShaderStageCreateInfo
func (x *VkPipelineShaderStageCreateInfo) WithFlags(y VkPipelineShaderStageCreateFlags) *VkPipelineShaderStageCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineShaderStageCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Stage returns the value of stage from VkPipelineShaderStageCreateInfo
func (x VkPipelineShaderStageCreateInfo) Stage() VkShaderStageFlagBits {
	ptr := /* Identifier */ (*VkShaderStageFlagBits)(&x.stage)
	return *ptr
}

// WithStage copies the provided value into C space and stores it
// at stage on VkPipelineShaderStageCreateInfo
func (x *VkPipelineShaderStageCreateInfo) WithStage(y VkShaderStageFlagBits) *VkPipelineShaderStageCreateInfo {
	ptr := /* Identifier */ (*C.VkShaderStageFlagBits)(&y)
	x.stage = *ptr
	return x
}

// Module returns the value of module from VkPipelineShaderStageCreateInfo
func (x VkPipelineShaderStageCreateInfo) Module() VkShaderModule {
	ptr := func(x *C.VkShaderModule) *VkShaderModule { /* Handle */ return (*VkShaderModule)(unsafe.Pointer(x)) }(&x.module)
	return *ptr
}

// WithModule copies the provided value into C space and stores it
// at module on VkPipelineShaderStageCreateInfo
func (x *VkPipelineShaderStageCreateInfo) WithModule(y VkShaderModule) *VkPipelineShaderStageCreateInfo {
	ptr := func(x *VkShaderModule) *C.VkShaderModule { /* Handle */ return (*C.VkShaderModule)(unsafe.Pointer(x)) }(&y)
	x.module = *ptr
	return x
}

// PName returns the value of pName from VkPipelineShaderStageCreateInfo
func (x VkPipelineShaderStageCreateInfo) PName() *byte {
	ptr := func(x **C.char) **byte { /* Pointer */ return (**byte)(unsafe.Pointer(x)) }(&x.pName)
	return *ptr
}

// WithPName copies the provided value into C space and stores it
// at pName on VkPipelineShaderStageCreateInfo
func (x *VkPipelineShaderStageCreateInfo) WithPName(y *byte) *VkPipelineShaderStageCreateInfo {
	ptr := func(x **byte) **C.char { /* Pointer */ return (**C.char)(unsafe.Pointer(x)) }(&y)
	x.pName = *ptr
	return x
}

// PSpecializationInfo returns the value of pSpecializationInfo from VkPipelineShaderStageCreateInfo
func (x VkPipelineShaderStageCreateInfo) PSpecializationInfo() *VkSpecializationInfo {
	ptr := func(x **C.VkSpecializationInfo) **VkSpecializationInfo { /* Pointer */
		return (**VkSpecializationInfo)(unsafe.Pointer(x))
	}(&x.pSpecializationInfo)
	return *ptr
}

// WithPSpecializationInfo copies the provided value into C space and stores it
// at pSpecializationInfo on VkPipelineShaderStageCreateInfo
func (x *VkPipelineShaderStageCreateInfo) WithPSpecializationInfo(y *VkSpecializationInfo) *VkPipelineShaderStageCreateInfo {
	ptr := func(x **VkSpecializationInfo) **C.VkSpecializationInfo { /* Pointer */
		return (**C.VkSpecializationInfo)(unsafe.Pointer(x))
	}(&y)
	x.pSpecializationInfo = *ptr
	return x
}

//VkPipelineCacheHeaderVersionOne provides a go interface for VkPipelineCacheHeaderVersionOne.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCacheHeaderVersionOne.html
type VkPipelineCacheHeaderVersionOne C.struct_VkPipelineCacheHeaderVersionOne

// NewVkPipelineCacheHeaderVersionOne allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineCacheHeaderVersionOne() *VkPipelineCacheHeaderVersionOne {
	sz := unsafe.Sizeof(VkPipelineCacheHeaderVersionOne{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineCacheHeaderVersionOne)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineCacheHeaderVersionOne method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineCacheHeaderVersionOne) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineCacheHeaderVersionOne) AsPtr() *VkPipelineCacheHeaderVersionOne { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineCacheHeaderVersionOne) AsCPtr() *VkPipelineCacheHeaderVersionOne {
	clone := newVkPipelineCacheHeaderVersionOne()
	*clone = *x
	return clone
}

// HeaderSize returns the value of headerSize from VkPipelineCacheHeaderVersionOne
func (x VkPipelineCacheHeaderVersionOne) HeaderSize() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.headerSize)
	return *ptr
}

// WithHeaderSize copies the provided value into C space and stores it
// at headerSize on VkPipelineCacheHeaderVersionOne
func (x *VkPipelineCacheHeaderVersionOne) WithHeaderSize(y uint32) *VkPipelineCacheHeaderVersionOne {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.headerSize = *ptr
	return x
}

// HeaderVersion returns the value of headerVersion from VkPipelineCacheHeaderVersionOne
func (x VkPipelineCacheHeaderVersionOne) HeaderVersion() VkPipelineCacheHeaderVersion {
	ptr := /* Identifier */ (*VkPipelineCacheHeaderVersion)(&x.headerVersion)
	return *ptr
}

// WithHeaderVersion copies the provided value into C space and stores it
// at headerVersion on VkPipelineCacheHeaderVersionOne
func (x *VkPipelineCacheHeaderVersionOne) WithHeaderVersion(y VkPipelineCacheHeaderVersion) *VkPipelineCacheHeaderVersionOne {
	ptr := /* Identifier */ (*C.VkPipelineCacheHeaderVersion)(&y)
	x.headerVersion = *ptr
	return x
}

// VendorID returns the value of vendorID from VkPipelineCacheHeaderVersionOne
func (x VkPipelineCacheHeaderVersionOne) VendorID() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.vendorID)
	return *ptr
}

// WithVendorID copies the provided value into C space and stores it
// at vendorID on VkPipelineCacheHeaderVersionOne
func (x *VkPipelineCacheHeaderVersionOne) WithVendorID(y uint32) *VkPipelineCacheHeaderVersionOne {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.vendorID = *ptr
	return x
}

// DeviceID returns the value of deviceID from VkPipelineCacheHeaderVersionOne
func (x VkPipelineCacheHeaderVersionOne) DeviceID() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceID)
	return *ptr
}

// WithDeviceID copies the provided value into C space and stores it
// at deviceID on VkPipelineCacheHeaderVersionOne
func (x *VkPipelineCacheHeaderVersionOne) WithDeviceID(y uint32) *VkPipelineCacheHeaderVersionOne {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceID = *ptr
	return x
}

// PipelineCacheUUID returns the value of pipelineCacheUUID from VkPipelineCacheHeaderVersionOne
func (x VkPipelineCacheHeaderVersionOne) PipelineCacheUUID() []byte {
	ptr := func(x *[VK_UUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_UUID_SIZE)
		return &slc
	}(&x.pipelineCacheUUID)
	return *ptr
}

// WithPipelineCacheUUID copies the provided value into C space and stores it
// at pipelineCacheUUID on VkPipelineCacheHeaderVersionOne
func (x *VkPipelineCacheHeaderVersionOne) WithPipelineCacheUUID(y []byte) *VkPipelineCacheHeaderVersionOne {
	ptr := func(x *[]byte) **C.uchar { /* Array */
		if *x != nil {
			slc := (*C.uchar)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uchar)(unsafe.Pointer((&ptr)))
	}(&y)
	copy(x.pipelineCacheUUID[:], unsafe.Slice(*ptr, len(y)))
	return x
}

//VkPipelineTessellationStateCreateInfo provides a go interface for VkPipelineTessellationStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineTessellationStateCreateInfo.html
type VkPipelineTessellationStateCreateInfo C.struct_VkPipelineTessellationStateCreateInfo

// NewVkPipelineTessellationStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineTessellationStateCreateInfo() *VkPipelineTessellationStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineTessellationStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineTessellationStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineTessellationStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineTessellationStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineTessellationStateCreateInfo) AsPtr() *VkPipelineTessellationStateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineTessellationStateCreateInfo) AsCPtr() *VkPipelineTessellationStateCreateInfo {
	clone := newVkPipelineTessellationStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineTessellationStateCreateInfo
func (x VkPipelineTessellationStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineTessellationStateCreateInfo) WithDefaultSType() *VkPipelineTessellationStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineTessellationStateCreateInfo
func (x *VkPipelineTessellationStateCreateInfo) WithSType(y VkStructureType) *VkPipelineTessellationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineTessellationStateCreateInfo
func (x VkPipelineTessellationStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineTessellationStateCreateInfo
func (x *VkPipelineTessellationStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineTessellationStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineTessellationStateCreateInfo
func (x VkPipelineTessellationStateCreateInfo) Flags() VkPipelineTessellationStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineTessellationStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineTessellationStateCreateInfo
func (x *VkPipelineTessellationStateCreateInfo) WithFlags(y VkPipelineTessellationStateCreateFlags) *VkPipelineTessellationStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineTessellationStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// PatchControlPoints returns the value of patchControlPoints from VkPipelineTessellationStateCreateInfo
func (x VkPipelineTessellationStateCreateInfo) PatchControlPoints() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.patchControlPoints)
	return *ptr
}

// WithPatchControlPoints copies the provided value into C space and stores it
// at patchControlPoints on VkPipelineTessellationStateCreateInfo
func (x *VkPipelineTessellationStateCreateInfo) WithPatchControlPoints(y uint32) *VkPipelineTessellationStateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.patchControlPoints = *ptr
	return x
}

//VkMemoryBarrier provides a go interface for VkMemoryBarrier.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryBarrier.html
type VkMemoryBarrier C.struct_VkMemoryBarrier

// NewVkMemoryBarrier allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryBarrier() *VkMemoryBarrier {
	sz := unsafe.Sizeof(VkMemoryBarrier{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryBarrier)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryBarrier method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryBarrier) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryBarrier) AsPtr() *VkMemoryBarrier { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryBarrier) AsCPtr() *VkMemoryBarrier {
	clone := newVkMemoryBarrier()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMemoryBarrier
func (x VkMemoryBarrier) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMemoryBarrier) WithDefaultSType() *VkMemoryBarrier {
	return x.WithSType(VK_STRUCTURE_TYPE_MEMORY_BARRIER)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMemoryBarrier
func (x *VkMemoryBarrier) WithSType(y VkStructureType) *VkMemoryBarrier {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMemoryBarrier
func (x VkMemoryBarrier) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMemoryBarrier
func (x *VkMemoryBarrier) WithPNext(y unsafe.Pointer) *VkMemoryBarrier {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SrcAccessMask returns the value of srcAccessMask from VkMemoryBarrier
func (x VkMemoryBarrier) SrcAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.srcAccessMask)
	return *ptr
}

// WithSrcAccessMask copies the provided value into C space and stores it
// at srcAccessMask on VkMemoryBarrier
func (x *VkMemoryBarrier) WithSrcAccessMask(y VkAccessFlags) *VkMemoryBarrier {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.srcAccessMask = *ptr
	return x
}

// DstAccessMask returns the value of dstAccessMask from VkMemoryBarrier
func (x VkMemoryBarrier) DstAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.dstAccessMask)
	return *ptr
}

// WithDstAccessMask copies the provided value into C space and stores it
// at dstAccessMask on VkMemoryBarrier
func (x *VkMemoryBarrier) WithDstAccessMask(y VkAccessFlags) *VkMemoryBarrier {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.dstAccessMask = *ptr
	return x
}

//VkPipelineVertexInputStateCreateInfo provides a go interface for VkPipelineVertexInputStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineVertexInputStateCreateInfo.html
type VkPipelineVertexInputStateCreateInfo C.struct_VkPipelineVertexInputStateCreateInfo

// NewVkPipelineVertexInputStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineVertexInputStateCreateInfo() *VkPipelineVertexInputStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineVertexInputStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineVertexInputStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineVertexInputStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineVertexInputStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineVertexInputStateCreateInfo) AsPtr() *VkPipelineVertexInputStateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineVertexInputStateCreateInfo) AsCPtr() *VkPipelineVertexInputStateCreateInfo {
	clone := newVkPipelineVertexInputStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineVertexInputStateCreateInfo
func (x VkPipelineVertexInputStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineVertexInputStateCreateInfo) WithDefaultSType() *VkPipelineVertexInputStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineVertexInputStateCreateInfo
func (x *VkPipelineVertexInputStateCreateInfo) WithSType(y VkStructureType) *VkPipelineVertexInputStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineVertexInputStateCreateInfo
func (x VkPipelineVertexInputStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineVertexInputStateCreateInfo
func (x *VkPipelineVertexInputStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineVertexInputStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineVertexInputStateCreateInfo
func (x VkPipelineVertexInputStateCreateInfo) Flags() VkPipelineVertexInputStateCreateFlags {
	ptr := /* Identifier */ (*VkPipelineVertexInputStateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineVertexInputStateCreateInfo
func (x *VkPipelineVertexInputStateCreateInfo) WithFlags(y VkPipelineVertexInputStateCreateFlags) *VkPipelineVertexInputStateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineVertexInputStateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// VertexBindingDescriptionCount returns the value of vertexBindingDescriptionCount from VkPipelineVertexInputStateCreateInfo
func (x VkPipelineVertexInputStateCreateInfo) VertexBindingDescriptionCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.vertexBindingDescriptionCount)
	return *ptr
}

// WithVertexBindingDescriptionCount copies the provided value into C space and stores it
// at vertexBindingDescriptionCount on VkPipelineVertexInputStateCreateInfo
func (x *VkPipelineVertexInputStateCreateInfo) WithVertexBindingDescriptionCount(y uint32) *VkPipelineVertexInputStateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.vertexBindingDescriptionCount = *ptr
	return x
}

// PVertexBindingDescriptions returns the value of pVertexBindingDescriptions from VkPipelineVertexInputStateCreateInfo
func (x VkPipelineVertexInputStateCreateInfo) PVertexBindingDescriptions() []VkVertexInputBindingDescription {
	ptr := func(x **C.VkVertexInputBindingDescription) *[]VkVertexInputBindingDescription { /* Slice */
		slc := unsafe.Slice((*VkVertexInputBindingDescription)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pVertexBindingDescriptions)
	return *ptr
}

// WithPVertexBindingDescriptions copies the provided value into C space and stores it
// at pVertexBindingDescriptions on VkPipelineVertexInputStateCreateInfo
func (x *VkPipelineVertexInputStateCreateInfo) WithPVertexBindingDescriptions(y []VkVertexInputBindingDescription) *VkPipelineVertexInputStateCreateInfo {
	ptr := func(x *[]VkVertexInputBindingDescription) **C.VkVertexInputBindingDescription { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkVertexInputBindingDescription)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkVertexInputBindingDescription)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pVertexBindingDescriptions = *ptr
	return x
}

// VertexAttributeDescriptionCount returns the value of vertexAttributeDescriptionCount from VkPipelineVertexInputStateCreateInfo
func (x VkPipelineVertexInputStateCreateInfo) VertexAttributeDescriptionCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.vertexAttributeDescriptionCount)
	return *ptr
}

// WithVertexAttributeDescriptionCount copies the provided value into C space and stores it
// at vertexAttributeDescriptionCount on VkPipelineVertexInputStateCreateInfo
func (x *VkPipelineVertexInputStateCreateInfo) WithVertexAttributeDescriptionCount(y uint32) *VkPipelineVertexInputStateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.vertexAttributeDescriptionCount = *ptr
	return x
}

// PVertexAttributeDescriptions returns the value of pVertexAttributeDescriptions from VkPipelineVertexInputStateCreateInfo
func (x VkPipelineVertexInputStateCreateInfo) PVertexAttributeDescriptions() []VkVertexInputAttributeDescription {
	ptr := func(x **C.VkVertexInputAttributeDescription) *[]VkVertexInputAttributeDescription { /* Slice */
		slc := unsafe.Slice((*VkVertexInputAttributeDescription)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pVertexAttributeDescriptions)
	return *ptr
}

// WithPVertexAttributeDescriptions copies the provided value into C space and stores it
// at pVertexAttributeDescriptions on VkPipelineVertexInputStateCreateInfo
func (x *VkPipelineVertexInputStateCreateInfo) WithPVertexAttributeDescriptions(y []VkVertexInputAttributeDescription) *VkPipelineVertexInputStateCreateInfo {
	ptr := func(x *[]VkVertexInputAttributeDescription) **C.VkVertexInputAttributeDescription { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkVertexInputAttributeDescription)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkVertexInputAttributeDescription)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pVertexAttributeDescriptions = *ptr
	return x
}

//VkImageMemoryBarrier provides a go interface for VkImageMemoryBarrier.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryBarrier.html
type VkImageMemoryBarrier C.struct_VkImageMemoryBarrier

// NewVkImageMemoryBarrier allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageMemoryBarrier() *VkImageMemoryBarrier {
	sz := unsafe.Sizeof(VkImageMemoryBarrier{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageMemoryBarrier)(ptr)
}

// Free releases the memory allocated by the NewVkImageMemoryBarrier method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageMemoryBarrier) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageMemoryBarrier) AsPtr() *VkImageMemoryBarrier { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageMemoryBarrier) AsCPtr() *VkImageMemoryBarrier {
	clone := newVkImageMemoryBarrier()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageMemoryBarrier) WithDefaultSType() *VkImageMemoryBarrier {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithSType(y VkStructureType) *VkImageMemoryBarrier {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithPNext(y unsafe.Pointer) *VkImageMemoryBarrier {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SrcAccessMask returns the value of srcAccessMask from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) SrcAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.srcAccessMask)
	return *ptr
}

// WithSrcAccessMask copies the provided value into C space and stores it
// at srcAccessMask on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithSrcAccessMask(y VkAccessFlags) *VkImageMemoryBarrier {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.srcAccessMask = *ptr
	return x
}

// DstAccessMask returns the value of dstAccessMask from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) DstAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.dstAccessMask)
	return *ptr
}

// WithDstAccessMask copies the provided value into C space and stores it
// at dstAccessMask on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithDstAccessMask(y VkAccessFlags) *VkImageMemoryBarrier {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.dstAccessMask = *ptr
	return x
}

// OldLayout returns the value of oldLayout from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) OldLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.oldLayout)
	return *ptr
}

// WithOldLayout copies the provided value into C space and stores it
// at oldLayout on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithOldLayout(y VkImageLayout) *VkImageMemoryBarrier {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.oldLayout = *ptr
	return x
}

// NewLayout returns the value of newLayout from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) NewLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.newLayout)
	return *ptr
}

// WithNewLayout copies the provided value into C space and stores it
// at newLayout on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithNewLayout(y VkImageLayout) *VkImageMemoryBarrier {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.newLayout = *ptr
	return x
}

// SrcQueueFamilyIndex returns the value of srcQueueFamilyIndex from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) SrcQueueFamilyIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.srcQueueFamilyIndex)
	return *ptr
}

// WithSrcQueueFamilyIndex copies the provided value into C space and stores it
// at srcQueueFamilyIndex on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithSrcQueueFamilyIndex(y uint32) *VkImageMemoryBarrier {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.srcQueueFamilyIndex = *ptr
	return x
}

// DstQueueFamilyIndex returns the value of dstQueueFamilyIndex from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) DstQueueFamilyIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstQueueFamilyIndex)
	return *ptr
}

// WithDstQueueFamilyIndex copies the provided value into C space and stores it
// at dstQueueFamilyIndex on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithDstQueueFamilyIndex(y uint32) *VkImageMemoryBarrier {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstQueueFamilyIndex = *ptr
	return x
}

// Image returns the value of image from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithImage(y VkImage) *VkImageMemoryBarrier {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

// SubresourceRange returns the value of subresourceRange from VkImageMemoryBarrier
func (x VkImageMemoryBarrier) SubresourceRange() VkImageSubresourceRange {
	ptr := /* Identifier */ (*VkImageSubresourceRange)(&x.subresourceRange)
	return *ptr
}

// WithSubresourceRange copies the provided value into C space and stores it
// at subresourceRange on VkImageMemoryBarrier
func (x *VkImageMemoryBarrier) WithSubresourceRange(y VkImageSubresourceRange) *VkImageMemoryBarrier {
	ptr := /* Identifier */ (*C.VkImageSubresourceRange)(&y)
	x.subresourceRange = *ptr
	return x
}

//VkDrawIndirectCommand provides a go interface for VkDrawIndirectCommand.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawIndirectCommand.html
type VkDrawIndirectCommand C.struct_VkDrawIndirectCommand

// NewVkDrawIndirectCommand allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDrawIndirectCommand() *VkDrawIndirectCommand {
	sz := unsafe.Sizeof(VkDrawIndirectCommand{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDrawIndirectCommand)(ptr)
}

// Free releases the memory allocated by the NewVkDrawIndirectCommand method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDrawIndirectCommand) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDrawIndirectCommand) AsPtr() *VkDrawIndirectCommand { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDrawIndirectCommand) AsCPtr() *VkDrawIndirectCommand {
	clone := newVkDrawIndirectCommand()
	*clone = *x
	return clone
}

// VertexCount returns the value of vertexCount from VkDrawIndirectCommand
func (x VkDrawIndirectCommand) VertexCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.vertexCount)
	return *ptr
}

// WithVertexCount copies the provided value into C space and stores it
// at vertexCount on VkDrawIndirectCommand
func (x *VkDrawIndirectCommand) WithVertexCount(y uint32) *VkDrawIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.vertexCount = *ptr
	return x
}

// InstanceCount returns the value of instanceCount from VkDrawIndirectCommand
func (x VkDrawIndirectCommand) InstanceCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.instanceCount)
	return *ptr
}

// WithInstanceCount copies the provided value into C space and stores it
// at instanceCount on VkDrawIndirectCommand
func (x *VkDrawIndirectCommand) WithInstanceCount(y uint32) *VkDrawIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.instanceCount = *ptr
	return x
}

// FirstVertex returns the value of firstVertex from VkDrawIndirectCommand
func (x VkDrawIndirectCommand) FirstVertex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.firstVertex)
	return *ptr
}

// WithFirstVertex copies the provided value into C space and stores it
// at firstVertex on VkDrawIndirectCommand
func (x *VkDrawIndirectCommand) WithFirstVertex(y uint32) *VkDrawIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.firstVertex = *ptr
	return x
}

// FirstInstance returns the value of firstInstance from VkDrawIndirectCommand
func (x VkDrawIndirectCommand) FirstInstance() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.firstInstance)
	return *ptr
}

// WithFirstInstance copies the provided value into C space and stores it
// at firstInstance on VkDrawIndirectCommand
func (x *VkDrawIndirectCommand) WithFirstInstance(y uint32) *VkDrawIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.firstInstance = *ptr
	return x
}

//VkDrawIndexedIndirectCommand provides a go interface for VkDrawIndexedIndirectCommand.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawIndexedIndirectCommand.html
type VkDrawIndexedIndirectCommand C.struct_VkDrawIndexedIndirectCommand

// NewVkDrawIndexedIndirectCommand allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDrawIndexedIndirectCommand() *VkDrawIndexedIndirectCommand {
	sz := unsafe.Sizeof(VkDrawIndexedIndirectCommand{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDrawIndexedIndirectCommand)(ptr)
}

// Free releases the memory allocated by the NewVkDrawIndexedIndirectCommand method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDrawIndexedIndirectCommand) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDrawIndexedIndirectCommand) AsPtr() *VkDrawIndexedIndirectCommand { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDrawIndexedIndirectCommand) AsCPtr() *VkDrawIndexedIndirectCommand {
	clone := newVkDrawIndexedIndirectCommand()
	*clone = *x
	return clone
}

// IndexCount returns the value of indexCount from VkDrawIndexedIndirectCommand
func (x VkDrawIndexedIndirectCommand) IndexCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.indexCount)
	return *ptr
}

// WithIndexCount copies the provided value into C space and stores it
// at indexCount on VkDrawIndexedIndirectCommand
func (x *VkDrawIndexedIndirectCommand) WithIndexCount(y uint32) *VkDrawIndexedIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.indexCount = *ptr
	return x
}

// InstanceCount returns the value of instanceCount from VkDrawIndexedIndirectCommand
func (x VkDrawIndexedIndirectCommand) InstanceCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.instanceCount)
	return *ptr
}

// WithInstanceCount copies the provided value into C space and stores it
// at instanceCount on VkDrawIndexedIndirectCommand
func (x *VkDrawIndexedIndirectCommand) WithInstanceCount(y uint32) *VkDrawIndexedIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.instanceCount = *ptr
	return x
}

// FirstIndex returns the value of firstIndex from VkDrawIndexedIndirectCommand
func (x VkDrawIndexedIndirectCommand) FirstIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.firstIndex)
	return *ptr
}

// WithFirstIndex copies the provided value into C space and stores it
// at firstIndex on VkDrawIndexedIndirectCommand
func (x *VkDrawIndexedIndirectCommand) WithFirstIndex(y uint32) *VkDrawIndexedIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.firstIndex = *ptr
	return x
}

// VertexOffset returns the value of vertexOffset from VkDrawIndexedIndirectCommand
func (x VkDrawIndexedIndirectCommand) VertexOffset() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.vertexOffset)
	return *ptr
}

// WithVertexOffset copies the provided value into C space and stores it
// at vertexOffset on VkDrawIndexedIndirectCommand
func (x *VkDrawIndexedIndirectCommand) WithVertexOffset(y int32) *VkDrawIndexedIndirectCommand {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.vertexOffset = *ptr
	return x
}

// FirstInstance returns the value of firstInstance from VkDrawIndexedIndirectCommand
func (x VkDrawIndexedIndirectCommand) FirstInstance() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.firstInstance)
	return *ptr
}

// WithFirstInstance copies the provided value into C space and stores it
// at firstInstance on VkDrawIndexedIndirectCommand
func (x *VkDrawIndexedIndirectCommand) WithFirstInstance(y uint32) *VkDrawIndexedIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.firstInstance = *ptr
	return x
}

//VkDispatchIndirectCommand provides a go interface for VkDispatchIndirectCommand.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDispatchIndirectCommand.html
type VkDispatchIndirectCommand C.struct_VkDispatchIndirectCommand

// NewVkDispatchIndirectCommand allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDispatchIndirectCommand() *VkDispatchIndirectCommand {
	sz := unsafe.Sizeof(VkDispatchIndirectCommand{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDispatchIndirectCommand)(ptr)
}

// Free releases the memory allocated by the NewVkDispatchIndirectCommand method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDispatchIndirectCommand) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDispatchIndirectCommand) AsPtr() *VkDispatchIndirectCommand { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDispatchIndirectCommand) AsCPtr() *VkDispatchIndirectCommand {
	clone := newVkDispatchIndirectCommand()
	*clone = *x
	return clone
}

// X returns the value of x from VkDispatchIndirectCommand
func (x VkDispatchIndirectCommand) X() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.x)
	return *ptr
}

// WithX copies the provided value into C space and stores it
// at x on VkDispatchIndirectCommand
func (x *VkDispatchIndirectCommand) WithX(y uint32) *VkDispatchIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.x = *ptr
	return x
}

// Y returns the value of y from VkDispatchIndirectCommand
func (x VkDispatchIndirectCommand) Y() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.y)
	return *ptr
}

// WithY copies the provided value into C space and stores it
// at y on VkDispatchIndirectCommand
func (x *VkDispatchIndirectCommand) WithY(y uint32) *VkDispatchIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.y = *ptr
	return x
}

// Z returns the value of z from VkDispatchIndirectCommand
func (x VkDispatchIndirectCommand) Z() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.z)
	return *ptr
}

// WithZ copies the provided value into C space and stores it
// at z on VkDispatchIndirectCommand
func (x *VkDispatchIndirectCommand) WithZ(y uint32) *VkDispatchIndirectCommand {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.z = *ptr
	return x
}

//VkBufferMemoryBarrier provides a go interface for VkBufferMemoryBarrier.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryBarrier.html
type VkBufferMemoryBarrier C.struct_VkBufferMemoryBarrier

// NewVkBufferMemoryBarrier allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferMemoryBarrier() *VkBufferMemoryBarrier {
	sz := unsafe.Sizeof(VkBufferMemoryBarrier{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferMemoryBarrier)(ptr)
}

// Free releases the memory allocated by the NewVkBufferMemoryBarrier method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferMemoryBarrier) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferMemoryBarrier) AsPtr() *VkBufferMemoryBarrier { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferMemoryBarrier) AsCPtr() *VkBufferMemoryBarrier {
	clone := newVkBufferMemoryBarrier()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBufferMemoryBarrier) WithDefaultSType() *VkBufferMemoryBarrier {
	return x.WithSType(VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithSType(y VkStructureType) *VkBufferMemoryBarrier {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithPNext(y unsafe.Pointer) *VkBufferMemoryBarrier {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SrcAccessMask returns the value of srcAccessMask from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) SrcAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.srcAccessMask)
	return *ptr
}

// WithSrcAccessMask copies the provided value into C space and stores it
// at srcAccessMask on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithSrcAccessMask(y VkAccessFlags) *VkBufferMemoryBarrier {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.srcAccessMask = *ptr
	return x
}

// DstAccessMask returns the value of dstAccessMask from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) DstAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.dstAccessMask)
	return *ptr
}

// WithDstAccessMask copies the provided value into C space and stores it
// at dstAccessMask on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithDstAccessMask(y VkAccessFlags) *VkBufferMemoryBarrier {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.dstAccessMask = *ptr
	return x
}

// SrcQueueFamilyIndex returns the value of srcQueueFamilyIndex from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) SrcQueueFamilyIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.srcQueueFamilyIndex)
	return *ptr
}

// WithSrcQueueFamilyIndex copies the provided value into C space and stores it
// at srcQueueFamilyIndex on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithSrcQueueFamilyIndex(y uint32) *VkBufferMemoryBarrier {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.srcQueueFamilyIndex = *ptr
	return x
}

// DstQueueFamilyIndex returns the value of dstQueueFamilyIndex from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) DstQueueFamilyIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstQueueFamilyIndex)
	return *ptr
}

// WithDstQueueFamilyIndex copies the provided value into C space and stores it
// at dstQueueFamilyIndex on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithDstQueueFamilyIndex(y uint32) *VkBufferMemoryBarrier {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstQueueFamilyIndex = *ptr
	return x
}

// Buffer returns the value of buffer from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithBuffer(y VkBuffer) *VkBufferMemoryBarrier {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

// Offset returns the value of offset from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) Offset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithOffset(y VkDeviceSize) *VkBufferMemoryBarrier {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.offset = *ptr
	return x
}

// Size returns the value of size from VkBufferMemoryBarrier
func (x VkBufferMemoryBarrier) Size() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.size)
	return *ptr
}

// WithSize copies the provided value into C space and stores it
// at size on VkBufferMemoryBarrier
func (x *VkBufferMemoryBarrier) WithSize(y VkDeviceSize) *VkBufferMemoryBarrier {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.size = *ptr
	return x
}

//VkBaseOutStructure provides a go interface for VkBaseOutStructure.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBaseOutStructure.html
type VkBaseOutStructure C.struct_VkBaseOutStructure

// NewVkBaseOutStructure allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBaseOutStructure() *VkBaseOutStructure {
	sz := unsafe.Sizeof(VkBaseOutStructure{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBaseOutStructure)(ptr)
}

// Free releases the memory allocated by the NewVkBaseOutStructure method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBaseOutStructure) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBaseOutStructure) AsPtr() *VkBaseOutStructure { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBaseOutStructure) AsCPtr() *VkBaseOutStructure {
	clone := newVkBaseOutStructure()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBaseOutStructure
func (x VkBaseOutStructure) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBaseOutStructure
func (x *VkBaseOutStructure) WithSType(y VkStructureType) *VkBaseOutStructure {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBaseOutStructure
func (x VkBaseOutStructure) PNext() *VkBaseOutStructure {
	ptr := func(x **C.VkBaseOutStructure) **VkBaseOutStructure { /* Pointer */
		return (**VkBaseOutStructure)(unsafe.Pointer(x))
	}(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBaseOutStructure
func (x *VkBaseOutStructure) WithPNext(y *VkBaseOutStructure) *VkBaseOutStructure {
	ptr := func(x **VkBaseOutStructure) **C.VkBaseOutStructure { /* Pointer */
		return (**C.VkBaseOutStructure)(unsafe.Pointer(x))
	}(&y)
	x.pNext = *ptr
	return x
}

//VkBaseInStructure provides a go interface for VkBaseInStructure.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBaseInStructure.html
type VkBaseInStructure C.struct_VkBaseInStructure

// NewVkBaseInStructure allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBaseInStructure() *VkBaseInStructure {
	sz := unsafe.Sizeof(VkBaseInStructure{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBaseInStructure)(ptr)
}

// Free releases the memory allocated by the NewVkBaseInStructure method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBaseInStructure) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBaseInStructure) AsPtr() *VkBaseInStructure { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBaseInStructure) AsCPtr() *VkBaseInStructure {
	clone := newVkBaseInStructure()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBaseInStructure
func (x VkBaseInStructure) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBaseInStructure
func (x *VkBaseInStructure) WithSType(y VkStructureType) *VkBaseInStructure {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBaseInStructure
func (x VkBaseInStructure) PNext() *VkBaseInStructure {
	ptr := func(x **C.VkBaseInStructure) **VkBaseInStructure { /* Pointer */
		return (**VkBaseInStructure)(unsafe.Pointer(x))
	}(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBaseInStructure
func (x *VkBaseInStructure) WithPNext(y *VkBaseInStructure) *VkBaseInStructure {
	ptr := func(x **VkBaseInStructure) **C.VkBaseInStructure { /* Pointer */
		return (**C.VkBaseInStructure)(unsafe.Pointer(x))
	}(&y)
	x.pNext = *ptr
	return x
}

//VkSpecializationInfo provides a go interface for VkSpecializationInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSpecializationInfo.html
type VkSpecializationInfo C.struct_VkSpecializationInfo

// NewVkSpecializationInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSpecializationInfo() *VkSpecializationInfo {
	sz := unsafe.Sizeof(VkSpecializationInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSpecializationInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSpecializationInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSpecializationInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSpecializationInfo) AsPtr() *VkSpecializationInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSpecializationInfo) AsCPtr() *VkSpecializationInfo {
	clone := newVkSpecializationInfo()
	*clone = *x
	return clone
}

// MapEntryCount returns the value of mapEntryCount from VkSpecializationInfo
func (x VkSpecializationInfo) MapEntryCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.mapEntryCount)
	return *ptr
}

// WithMapEntryCount copies the provided value into C space and stores it
// at mapEntryCount on VkSpecializationInfo
func (x *VkSpecializationInfo) WithMapEntryCount(y uint32) *VkSpecializationInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.mapEntryCount = *ptr
	return x
}

// PMapEntries returns the value of pMapEntries from VkSpecializationInfo
func (x VkSpecializationInfo) PMapEntries() []VkSpecializationMapEntry {
	ptr := func(x **C.VkSpecializationMapEntry) *[]VkSpecializationMapEntry { /* Slice */
		slc := unsafe.Slice((*VkSpecializationMapEntry)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pMapEntries)
	return *ptr
}

// WithPMapEntries copies the provided value into C space and stores it
// at pMapEntries on VkSpecializationInfo
func (x *VkSpecializationInfo) WithPMapEntries(y []VkSpecializationMapEntry) *VkSpecializationInfo {
	ptr := func(x *[]VkSpecializationMapEntry) **C.VkSpecializationMapEntry { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSpecializationMapEntry)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSpecializationMapEntry)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pMapEntries = *ptr
	return x
}

// DataSize returns the value of dataSize from VkSpecializationInfo
func (x VkSpecializationInfo) DataSize() uint32 {
	ptr := func(x *C.ulong) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dataSize)
	return *ptr
}

// WithDataSize copies the provided value into C space and stores it
// at dataSize on VkSpecializationInfo
func (x *VkSpecializationInfo) WithDataSize(y uint32) *VkSpecializationInfo {
	ptr := func(x *uint32) *C.ulong { /* Scalar */ return (*C.ulong)(unsafe.Pointer(x)) }(&y)
	x.dataSize = *ptr
	return x
}

// PData returns the value of pData from VkSpecializationInfo
func (x VkSpecializationInfo) PData() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pData)
	return *ptr
}

// WithPData copies the provided value into C space and stores it
// at pData on VkSpecializationInfo
func (x *VkSpecializationInfo) WithPData(y unsafe.Pointer) *VkSpecializationInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pData = *ptr
	return x
}

//VkSpecializationMapEntry provides a go interface for VkSpecializationMapEntry.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSpecializationMapEntry.html
type VkSpecializationMapEntry C.struct_VkSpecializationMapEntry

// NewVkSpecializationMapEntry allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSpecializationMapEntry() *VkSpecializationMapEntry {
	sz := unsafe.Sizeof(VkSpecializationMapEntry{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSpecializationMapEntry)(ptr)
}

// Free releases the memory allocated by the NewVkSpecializationMapEntry method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSpecializationMapEntry) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSpecializationMapEntry) AsPtr() *VkSpecializationMapEntry { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSpecializationMapEntry) AsCPtr() *VkSpecializationMapEntry {
	clone := newVkSpecializationMapEntry()
	*clone = *x
	return clone
}

// ConstantID returns the value of constantID from VkSpecializationMapEntry
func (x VkSpecializationMapEntry) ConstantID() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.constantID)
	return *ptr
}

// WithConstantID copies the provided value into C space and stores it
// at constantID on VkSpecializationMapEntry
func (x *VkSpecializationMapEntry) WithConstantID(y uint32) *VkSpecializationMapEntry {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.constantID = *ptr
	return x
}

// Offset returns the value of offset from VkSpecializationMapEntry
func (x VkSpecializationMapEntry) Offset() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkSpecializationMapEntry
func (x *VkSpecializationMapEntry) WithOffset(y uint32) *VkSpecializationMapEntry {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.offset = *ptr
	return x
}

// Size returns the value of size from VkSpecializationMapEntry
func (x VkSpecializationMapEntry) Size() uint32 {
	ptr := func(x *C.ulong) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.size)
	return *ptr
}

// WithSize copies the provided value into C space and stores it
// at size on VkSpecializationMapEntry
func (x *VkSpecializationMapEntry) WithSize(y uint32) *VkSpecializationMapEntry {
	ptr := func(x *uint32) *C.ulong { /* Scalar */ return (*C.ulong)(unsafe.Pointer(x)) }(&y)
	x.size = *ptr
	return x
}

//VkRect2D provides a go interface for VkRect2D.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRect2D.html
type VkRect2D C.struct_VkRect2D

// NewVkRect2D allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkRect2D() *VkRect2D {
	sz := unsafe.Sizeof(VkRect2D{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkRect2D)(ptr)
}

// Free releases the memory allocated by the NewVkRect2D method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkRect2D) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkRect2D) AsPtr() *VkRect2D { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkRect2D) AsCPtr() *VkRect2D {
	clone := newVkRect2D()
	*clone = *x
	return clone
}

// Offset returns the value of offset from VkRect2D
func (x VkRect2D) Offset() VkOffset2D {
	ptr := /* Identifier */ (*VkOffset2D)(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkRect2D
func (x *VkRect2D) WithOffset(y VkOffset2D) *VkRect2D {
	ptr := /* Identifier */ (*C.VkOffset2D)(&y)
	x.offset = *ptr
	return x
}

// Extent returns the value of extent from VkRect2D
func (x VkRect2D) Extent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.extent)
	return *ptr
}

// WithExtent copies the provided value into C space and stores it
// at extent on VkRect2D
func (x *VkRect2D) WithExtent(y VkExtent2D) *VkRect2D {
	ptr := /* Identifier */ (*C.VkExtent2D)(&y)
	x.extent = *ptr
	return x
}

//VkStencilOpState provides a go interface for VkStencilOpState.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkStencilOpState.html
type VkStencilOpState C.struct_VkStencilOpState

// NewVkStencilOpState allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkStencilOpState() *VkStencilOpState {
	sz := unsafe.Sizeof(VkStencilOpState{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkStencilOpState)(ptr)
}

// Free releases the memory allocated by the NewVkStencilOpState method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkStencilOpState) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkStencilOpState) AsPtr() *VkStencilOpState { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkStencilOpState) AsCPtr() *VkStencilOpState {
	clone := newVkStencilOpState()
	*clone = *x
	return clone
}

// FailOp returns the value of failOp from VkStencilOpState
func (x VkStencilOpState) FailOp() VkStencilOp {
	ptr := /* Identifier */ (*VkStencilOp)(&x.failOp)
	return *ptr
}

// WithFailOp copies the provided value into C space and stores it
// at failOp on VkStencilOpState
func (x *VkStencilOpState) WithFailOp(y VkStencilOp) *VkStencilOpState {
	ptr := /* Identifier */ (*C.VkStencilOp)(&y)
	x.failOp = *ptr
	return x
}

// PassOp returns the value of passOp from VkStencilOpState
func (x VkStencilOpState) PassOp() VkStencilOp {
	ptr := /* Identifier */ (*VkStencilOp)(&x.passOp)
	return *ptr
}

// WithPassOp copies the provided value into C space and stores it
// at passOp on VkStencilOpState
func (x *VkStencilOpState) WithPassOp(y VkStencilOp) *VkStencilOpState {
	ptr := /* Identifier */ (*C.VkStencilOp)(&y)
	x.passOp = *ptr
	return x
}

// DepthFailOp returns the value of depthFailOp from VkStencilOpState
func (x VkStencilOpState) DepthFailOp() VkStencilOp {
	ptr := /* Identifier */ (*VkStencilOp)(&x.depthFailOp)
	return *ptr
}

// WithDepthFailOp copies the provided value into C space and stores it
// at depthFailOp on VkStencilOpState
func (x *VkStencilOpState) WithDepthFailOp(y VkStencilOp) *VkStencilOpState {
	ptr := /* Identifier */ (*C.VkStencilOp)(&y)
	x.depthFailOp = *ptr
	return x
}

// CompareOp returns the value of compareOp from VkStencilOpState
func (x VkStencilOpState) CompareOp() VkCompareOp {
	ptr := /* Identifier */ (*VkCompareOp)(&x.compareOp)
	return *ptr
}

// WithCompareOp copies the provided value into C space and stores it
// at compareOp on VkStencilOpState
func (x *VkStencilOpState) WithCompareOp(y VkCompareOp) *VkStencilOpState {
	ptr := /* Identifier */ (*C.VkCompareOp)(&y)
	x.compareOp = *ptr
	return x
}

// CompareMask returns the value of compareMask from VkStencilOpState
func (x VkStencilOpState) CompareMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.compareMask)
	return *ptr
}

// WithCompareMask copies the provided value into C space and stores it
// at compareMask on VkStencilOpState
func (x *VkStencilOpState) WithCompareMask(y uint32) *VkStencilOpState {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.compareMask = *ptr
	return x
}

// WriteMask returns the value of writeMask from VkStencilOpState
func (x VkStencilOpState) WriteMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.writeMask)
	return *ptr
}

// WithWriteMask copies the provided value into C space and stores it
// at writeMask on VkStencilOpState
func (x *VkStencilOpState) WithWriteMask(y uint32) *VkStencilOpState {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.writeMask = *ptr
	return x
}

// Reference returns the value of reference from VkStencilOpState
func (x VkStencilOpState) Reference() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.reference)
	return *ptr
}

// WithReference copies the provided value into C space and stores it
// at reference on VkStencilOpState
func (x *VkStencilOpState) WithReference(y uint32) *VkStencilOpState {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.reference = *ptr
	return x
}

//VkVertexInputAttributeDescription provides a go interface for VkVertexInputAttributeDescription.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputAttributeDescription.html
type VkVertexInputAttributeDescription C.struct_VkVertexInputAttributeDescription

// NewVkVertexInputAttributeDescription allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkVertexInputAttributeDescription() *VkVertexInputAttributeDescription {
	sz := unsafe.Sizeof(VkVertexInputAttributeDescription{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkVertexInputAttributeDescription)(ptr)
}

// Free releases the memory allocated by the NewVkVertexInputAttributeDescription method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkVertexInputAttributeDescription) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkVertexInputAttributeDescription) AsPtr() *VkVertexInputAttributeDescription { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkVertexInputAttributeDescription) AsCPtr() *VkVertexInputAttributeDescription {
	clone := newVkVertexInputAttributeDescription()
	*clone = *x
	return clone
}

// Location returns the value of location from VkVertexInputAttributeDescription
func (x VkVertexInputAttributeDescription) Location() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.location)
	return *ptr
}

// WithLocation copies the provided value into C space and stores it
// at location on VkVertexInputAttributeDescription
func (x *VkVertexInputAttributeDescription) WithLocation(y uint32) *VkVertexInputAttributeDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.location = *ptr
	return x
}

// Binding returns the value of binding from VkVertexInputAttributeDescription
func (x VkVertexInputAttributeDescription) Binding() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.binding)
	return *ptr
}

// WithBinding copies the provided value into C space and stores it
// at binding on VkVertexInputAttributeDescription
func (x *VkVertexInputAttributeDescription) WithBinding(y uint32) *VkVertexInputAttributeDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.binding = *ptr
	return x
}

// Format returns the value of format from VkVertexInputAttributeDescription
func (x VkVertexInputAttributeDescription) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkVertexInputAttributeDescription
func (x *VkVertexInputAttributeDescription) WithFormat(y VkFormat) *VkVertexInputAttributeDescription {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Offset returns the value of offset from VkVertexInputAttributeDescription
func (x VkVertexInputAttributeDescription) Offset() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkVertexInputAttributeDescription
func (x *VkVertexInputAttributeDescription) WithOffset(y uint32) *VkVertexInputAttributeDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.offset = *ptr
	return x
}

//VkVertexInputBindingDescription provides a go interface for VkVertexInputBindingDescription.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputBindingDescription.html
type VkVertexInputBindingDescription C.struct_VkVertexInputBindingDescription

// NewVkVertexInputBindingDescription allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkVertexInputBindingDescription() *VkVertexInputBindingDescription {
	sz := unsafe.Sizeof(VkVertexInputBindingDescription{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkVertexInputBindingDescription)(ptr)
}

// Free releases the memory allocated by the NewVkVertexInputBindingDescription method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkVertexInputBindingDescription) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkVertexInputBindingDescription) AsPtr() *VkVertexInputBindingDescription { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkVertexInputBindingDescription) AsCPtr() *VkVertexInputBindingDescription {
	clone := newVkVertexInputBindingDescription()
	*clone = *x
	return clone
}

// Binding returns the value of binding from VkVertexInputBindingDescription
func (x VkVertexInputBindingDescription) Binding() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.binding)
	return *ptr
}

// WithBinding copies the provided value into C space and stores it
// at binding on VkVertexInputBindingDescription
func (x *VkVertexInputBindingDescription) WithBinding(y uint32) *VkVertexInputBindingDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.binding = *ptr
	return x
}

// Stride returns the value of stride from VkVertexInputBindingDescription
func (x VkVertexInputBindingDescription) Stride() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.stride)
	return *ptr
}

// WithStride copies the provided value into C space and stores it
// at stride on VkVertexInputBindingDescription
func (x *VkVertexInputBindingDescription) WithStride(y uint32) *VkVertexInputBindingDescription {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.stride = *ptr
	return x
}

// InputRate returns the value of inputRate from VkVertexInputBindingDescription
func (x VkVertexInputBindingDescription) InputRate() VkVertexInputRate {
	ptr := /* Identifier */ (*VkVertexInputRate)(&x.inputRate)
	return *ptr
}

// WithInputRate copies the provided value into C space and stores it
// at inputRate on VkVertexInputBindingDescription
func (x *VkVertexInputBindingDescription) WithInputRate(y VkVertexInputRate) *VkVertexInputBindingDescription {
	ptr := /* Identifier */ (*C.VkVertexInputRate)(&y)
	x.inputRate = *ptr
	return x
}

//VkOffset3D provides a go interface for VkOffset3D.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkOffset3D.html
type VkOffset3D C.struct_VkOffset3D

// NewVkOffset3D allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkOffset3D() *VkOffset3D {
	sz := unsafe.Sizeof(VkOffset3D{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkOffset3D)(ptr)
}

// Free releases the memory allocated by the NewVkOffset3D method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkOffset3D) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkOffset3D) AsPtr() *VkOffset3D { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkOffset3D) AsCPtr() *VkOffset3D {
	clone := newVkOffset3D()
	*clone = *x
	return clone
}

// X returns the value of x from VkOffset3D
func (x VkOffset3D) X() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.x)
	return *ptr
}

// WithX copies the provided value into C space and stores it
// at x on VkOffset3D
func (x *VkOffset3D) WithX(y int32) *VkOffset3D {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.x = *ptr
	return x
}

// Y returns the value of y from VkOffset3D
func (x VkOffset3D) Y() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.y)
	return *ptr
}

// WithY copies the provided value into C space and stores it
// at y on VkOffset3D
func (x *VkOffset3D) WithY(y int32) *VkOffset3D {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.y = *ptr
	return x
}

// Z returns the value of z from VkOffset3D
func (x VkOffset3D) Z() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.z)
	return *ptr
}

// WithZ copies the provided value into C space and stores it
// at z on VkOffset3D
func (x *VkOffset3D) WithZ(y int32) *VkOffset3D {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.z = *ptr
	return x
}

//VkViewport provides a go interface for VkViewport.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkViewport.html
type VkViewport C.struct_VkViewport

// NewVkViewport allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkViewport() *VkViewport {
	sz := unsafe.Sizeof(VkViewport{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkViewport)(ptr)
}

// Free releases the memory allocated by the NewVkViewport method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkViewport) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkViewport) AsPtr() *VkViewport { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkViewport) AsCPtr() *VkViewport {
	clone := newVkViewport()
	*clone = *x
	return clone
}

// X returns the value of x from VkViewport
func (x VkViewport) X() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.x)
	return *ptr
}

// WithX copies the provided value into C space and stores it
// at x on VkViewport
func (x *VkViewport) WithX(y float32) *VkViewport {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.x = *ptr
	return x
}

// Y returns the value of y from VkViewport
func (x VkViewport) Y() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.y)
	return *ptr
}

// WithY copies the provided value into C space and stores it
// at y on VkViewport
func (x *VkViewport) WithY(y float32) *VkViewport {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.y = *ptr
	return x
}

// Width returns the value of width from VkViewport
func (x VkViewport) Width() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.width)
	return *ptr
}

// WithWidth copies the provided value into C space and stores it
// at width on VkViewport
func (x *VkViewport) WithWidth(y float32) *VkViewport {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.width = *ptr
	return x
}

// Height returns the value of height from VkViewport
func (x VkViewport) Height() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.height)
	return *ptr
}

// WithHeight copies the provided value into C space and stores it
// at height on VkViewport
func (x *VkViewport) WithHeight(y float32) *VkViewport {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.height = *ptr
	return x
}

// MinDepth returns the value of minDepth from VkViewport
func (x VkViewport) MinDepth() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.minDepth)
	return *ptr
}

// WithMinDepth copies the provided value into C space and stores it
// at minDepth on VkViewport
func (x *VkViewport) WithMinDepth(y float32) *VkViewport {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.minDepth = *ptr
	return x
}

// MaxDepth returns the value of maxDepth from VkViewport
func (x VkViewport) MaxDepth() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.maxDepth)
	return *ptr
}

// WithMaxDepth copies the provided value into C space and stores it
// at maxDepth on VkViewport
func (x *VkViewport) WithMaxDepth(y float32) *VkViewport {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.maxDepth = *ptr
	return x
}

//VkOffset2D provides a go interface for VkOffset2D.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkOffset2D.html
type VkOffset2D C.struct_VkOffset2D

// NewVkOffset2D allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkOffset2D() *VkOffset2D {
	sz := unsafe.Sizeof(VkOffset2D{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkOffset2D)(ptr)
}

// Free releases the memory allocated by the NewVkOffset2D method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkOffset2D) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkOffset2D) AsPtr() *VkOffset2D { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkOffset2D) AsCPtr() *VkOffset2D {
	clone := newVkOffset2D()
	*clone = *x
	return clone
}

// X returns the value of x from VkOffset2D
func (x VkOffset2D) X() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.x)
	return *ptr
}

// WithX copies the provided value into C space and stores it
// at x on VkOffset2D
func (x *VkOffset2D) WithX(y int32) *VkOffset2D {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.x = *ptr
	return x
}

// Y returns the value of y from VkOffset2D
func (x VkOffset2D) Y() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.y)
	return *ptr
}

// WithY copies the provided value into C space and stores it
// at y on VkOffset2D
func (x *VkOffset2D) WithY(y int32) *VkOffset2D {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.y = *ptr
	return x
}

//VkExtent3D provides a go interface for VkExtent3D.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtent3D.html
type VkExtent3D C.struct_VkExtent3D

// NewVkExtent3D allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExtent3D() *VkExtent3D {
	sz := unsafe.Sizeof(VkExtent3D{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExtent3D)(ptr)
}

// Free releases the memory allocated by the NewVkExtent3D method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExtent3D) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExtent3D) AsPtr() *VkExtent3D { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExtent3D) AsCPtr() *VkExtent3D {
	clone := newVkExtent3D()
	*clone = *x
	return clone
}

// Width returns the value of width from VkExtent3D
func (x VkExtent3D) Width() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.width)
	return *ptr
}

// WithWidth copies the provided value into C space and stores it
// at width on VkExtent3D
func (x *VkExtent3D) WithWidth(y uint32) *VkExtent3D {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.width = *ptr
	return x
}

// Height returns the value of height from VkExtent3D
func (x VkExtent3D) Height() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.height)
	return *ptr
}

// WithHeight copies the provided value into C space and stores it
// at height on VkExtent3D
func (x *VkExtent3D) WithHeight(y uint32) *VkExtent3D {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.height = *ptr
	return x
}

// Depth returns the value of depth from VkExtent3D
func (x VkExtent3D) Depth() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.depth)
	return *ptr
}

// WithDepth copies the provided value into C space and stores it
// at depth on VkExtent3D
func (x *VkExtent3D) WithDepth(y uint32) *VkExtent3D {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.depth = *ptr
	return x
}

//VkExtent2D provides a go interface for VkExtent2D.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtent2D.html
type VkExtent2D C.struct_VkExtent2D

// NewVkExtent2D allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExtent2D() *VkExtent2D {
	sz := unsafe.Sizeof(VkExtent2D{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExtent2D)(ptr)
}

// Free releases the memory allocated by the NewVkExtent2D method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExtent2D) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExtent2D) AsPtr() *VkExtent2D { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExtent2D) AsCPtr() *VkExtent2D {
	clone := newVkExtent2D()
	*clone = *x
	return clone
}

// Width returns the value of width from VkExtent2D
func (x VkExtent2D) Width() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.width)
	return *ptr
}

// WithWidth copies the provided value into C space and stores it
// at width on VkExtent2D
func (x *VkExtent2D) WithWidth(y uint32) *VkExtent2D {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.width = *ptr
	return x
}

// Height returns the value of height from VkExtent2D
func (x VkExtent2D) Height() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.height)
	return *ptr
}

// WithHeight copies the provided value into C space and stores it
// at height on VkExtent2D
func (x *VkExtent2D) WithHeight(y uint32) *VkExtent2D {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.height = *ptr
	return x
}

//VkPipelineLayoutCreateInfo provides a go interface for VkPipelineLayoutCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineLayoutCreateInfo.html
type VkPipelineLayoutCreateInfo C.struct_VkPipelineLayoutCreateInfo

// NewVkPipelineLayoutCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineLayoutCreateInfo() *VkPipelineLayoutCreateInfo {
	sz := unsafe.Sizeof(VkPipelineLayoutCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineLayoutCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineLayoutCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineLayoutCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineLayoutCreateInfo) AsPtr() *VkPipelineLayoutCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineLayoutCreateInfo) AsCPtr() *VkPipelineLayoutCreateInfo {
	clone := newVkPipelineLayoutCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineLayoutCreateInfo
func (x VkPipelineLayoutCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineLayoutCreateInfo) WithDefaultSType() *VkPipelineLayoutCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineLayoutCreateInfo
func (x *VkPipelineLayoutCreateInfo) WithSType(y VkStructureType) *VkPipelineLayoutCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineLayoutCreateInfo
func (x VkPipelineLayoutCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineLayoutCreateInfo
func (x *VkPipelineLayoutCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineLayoutCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPipelineLayoutCreateInfo
func (x VkPipelineLayoutCreateInfo) Flags() VkPipelineLayoutCreateFlags {
	ptr := /* Identifier */ (*VkPipelineLayoutCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPipelineLayoutCreateInfo
func (x *VkPipelineLayoutCreateInfo) WithFlags(y VkPipelineLayoutCreateFlags) *VkPipelineLayoutCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineLayoutCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// SetLayoutCount returns the value of setLayoutCount from VkPipelineLayoutCreateInfo
func (x VkPipelineLayoutCreateInfo) SetLayoutCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.setLayoutCount)
	return *ptr
}

// WithSetLayoutCount copies the provided value into C space and stores it
// at setLayoutCount on VkPipelineLayoutCreateInfo
func (x *VkPipelineLayoutCreateInfo) WithSetLayoutCount(y uint32) *VkPipelineLayoutCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.setLayoutCount = *ptr
	return x
}

// PSetLayouts returns the value of pSetLayouts from VkPipelineLayoutCreateInfo
func (x VkPipelineLayoutCreateInfo) PSetLayouts() []VkDescriptorSetLayout {
	ptr := func(x **C.VkDescriptorSetLayout) *[]VkDescriptorSetLayout { /* Slice */
		slc := unsafe.Slice((*VkDescriptorSetLayout)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSetLayouts)
	return *ptr
}

// WithPSetLayouts copies the provided value into C space and stores it
// at pSetLayouts on VkPipelineLayoutCreateInfo
func (x *VkPipelineLayoutCreateInfo) WithPSetLayouts(y []VkDescriptorSetLayout) *VkPipelineLayoutCreateInfo {
	ptr := func(x *[]VkDescriptorSetLayout) **C.VkDescriptorSetLayout { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorSetLayout)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorSetLayout)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSetLayouts = *ptr
	return x
}

// PushConstantRangeCount returns the value of pushConstantRangeCount from VkPipelineLayoutCreateInfo
func (x VkPipelineLayoutCreateInfo) PushConstantRangeCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.pushConstantRangeCount)
	return *ptr
}

// WithPushConstantRangeCount copies the provided value into C space and stores it
// at pushConstantRangeCount on VkPipelineLayoutCreateInfo
func (x *VkPipelineLayoutCreateInfo) WithPushConstantRangeCount(y uint32) *VkPipelineLayoutCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.pushConstantRangeCount = *ptr
	return x
}

// PPushConstantRanges returns the value of pPushConstantRanges from VkPipelineLayoutCreateInfo
func (x VkPipelineLayoutCreateInfo) PPushConstantRanges() []VkPushConstantRange {
	ptr := func(x **C.VkPushConstantRange) *[]VkPushConstantRange { /* Slice */
		slc := unsafe.Slice((*VkPushConstantRange)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pPushConstantRanges)
	return *ptr
}

// WithPPushConstantRanges copies the provided value into C space and stores it
// at pPushConstantRanges on VkPipelineLayoutCreateInfo
func (x *VkPipelineLayoutCreateInfo) WithPPushConstantRanges(y []VkPushConstantRange) *VkPipelineLayoutCreateInfo {
	ptr := func(x *[]VkPushConstantRange) **C.VkPushConstantRange { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPushConstantRange)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPushConstantRange)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pPushConstantRanges = *ptr
	return x
}

//VkPushConstantRange provides a go interface for VkPushConstantRange.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPushConstantRange.html
type VkPushConstantRange C.struct_VkPushConstantRange

// NewVkPushConstantRange allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPushConstantRange() *VkPushConstantRange {
	sz := unsafe.Sizeof(VkPushConstantRange{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPushConstantRange)(ptr)
}

// Free releases the memory allocated by the NewVkPushConstantRange method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPushConstantRange) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPushConstantRange) AsPtr() *VkPushConstantRange { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPushConstantRange) AsCPtr() *VkPushConstantRange {
	clone := newVkPushConstantRange()
	*clone = *x
	return clone
}

// StageFlags returns the value of stageFlags from VkPushConstantRange
func (x VkPushConstantRange) StageFlags() VkShaderStageFlags {
	ptr := /* Identifier */ (*VkShaderStageFlags)(&x.stageFlags)
	return *ptr
}

// WithStageFlags copies the provided value into C space and stores it
// at stageFlags on VkPushConstantRange
func (x *VkPushConstantRange) WithStageFlags(y VkShaderStageFlags) *VkPushConstantRange {
	ptr := /* Identifier */ (*C.VkShaderStageFlags)(&y)
	x.stageFlags = *ptr
	return x
}

// Offset returns the value of offset from VkPushConstantRange
func (x VkPushConstantRange) Offset() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkPushConstantRange
func (x *VkPushConstantRange) WithOffset(y uint32) *VkPushConstantRange {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.offset = *ptr
	return x
}

// Size returns the value of size from VkPushConstantRange
func (x VkPushConstantRange) Size() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.size)
	return *ptr
}

// WithSize copies the provided value into C space and stores it
// at size on VkPushConstantRange
func (x *VkPushConstantRange) WithSize(y uint32) *VkPushConstantRange {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.size = *ptr
	return x
}

//VkDeviceQueueCreateInfo provides a go interface for VkDeviceQueueCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueCreateInfo.html
type VkDeviceQueueCreateInfo C.struct_VkDeviceQueueCreateInfo

// NewVkDeviceQueueCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceQueueCreateInfo() *VkDeviceQueueCreateInfo {
	sz := unsafe.Sizeof(VkDeviceQueueCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceQueueCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceQueueCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceQueueCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceQueueCreateInfo) AsPtr() *VkDeviceQueueCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceQueueCreateInfo) AsCPtr() *VkDeviceQueueCreateInfo {
	clone := newVkDeviceQueueCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceQueueCreateInfo
func (x VkDeviceQueueCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceQueueCreateInfo) WithDefaultSType() *VkDeviceQueueCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceQueueCreateInfo
func (x *VkDeviceQueueCreateInfo) WithSType(y VkStructureType) *VkDeviceQueueCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceQueueCreateInfo
func (x VkDeviceQueueCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceQueueCreateInfo
func (x *VkDeviceQueueCreateInfo) WithPNext(y unsafe.Pointer) *VkDeviceQueueCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDeviceQueueCreateInfo
func (x VkDeviceQueueCreateInfo) Flags() VkDeviceQueueCreateFlags {
	ptr := /* Identifier */ (*VkDeviceQueueCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDeviceQueueCreateInfo
func (x *VkDeviceQueueCreateInfo) WithFlags(y VkDeviceQueueCreateFlags) *VkDeviceQueueCreateInfo {
	ptr := /* Identifier */ (*C.VkDeviceQueueCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// QueueFamilyIndex returns the value of queueFamilyIndex from VkDeviceQueueCreateInfo
func (x VkDeviceQueueCreateInfo) QueueFamilyIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueFamilyIndex)
	return *ptr
}

// WithQueueFamilyIndex copies the provided value into C space and stores it
// at queueFamilyIndex on VkDeviceQueueCreateInfo
func (x *VkDeviceQueueCreateInfo) WithQueueFamilyIndex(y uint32) *VkDeviceQueueCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueFamilyIndex = *ptr
	return x
}

// QueueCount returns the value of queueCount from VkDeviceQueueCreateInfo
func (x VkDeviceQueueCreateInfo) QueueCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueCount)
	return *ptr
}

// WithQueueCount copies the provided value into C space and stores it
// at queueCount on VkDeviceQueueCreateInfo
func (x *VkDeviceQueueCreateInfo) WithQueueCount(y uint32) *VkDeviceQueueCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueCount = *ptr
	return x
}

// PQueuePriorities returns the value of pQueuePriorities from VkDeviceQueueCreateInfo
func (x VkDeviceQueueCreateInfo) PQueuePriorities() []float32 {
	ptr := func(x **C.float) *[]float32 { /* Slice */
		slc := unsafe.Slice((*float32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pQueuePriorities)
	return *ptr
}

// WithPQueuePriorities copies the provided value into C space and stores it
// at pQueuePriorities on VkDeviceQueueCreateInfo
func (x *VkDeviceQueueCreateInfo) WithPQueuePriorities(y []float32) *VkDeviceQueueCreateInfo {
	ptr := func(x *[]float32) **C.float { /* Slice */
		if len(*x) > 0 {
			slc := (*C.float)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.float)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pQueuePriorities = *ptr
	return x
}

type VkClearColorValue C.union_VkClearColorValue

func (x VkClearColorValue) Float32() []float32 {
	return *(*[]float32)(unsafe.Pointer(&x[0]))
}
func (x VkClearColorValue) SetFloat32(y []float32) {
	*(*[]float32)(unsafe.Pointer(&x[0])) = y
}

func (x VkClearColorValue) Int32() []int32 {
	return *(*[]int32)(unsafe.Pointer(&x[0]))
}
func (x VkClearColorValue) SetInt32(y []int32) {
	*(*[]int32)(unsafe.Pointer(&x[0])) = y
}

func (x VkClearColorValue) Uint32() []uint32 {
	return *(*[]uint32)(unsafe.Pointer(&x[0]))
}
func (x VkClearColorValue) SetUint32(y []uint32) {
	*(*[]uint32)(unsafe.Pointer(&x[0])) = y
}

type VkClearValue C.union_VkClearValue

func (x VkClearValue) Color() VkClearColorValue {
	return *(*VkClearColorValue)(unsafe.Pointer(&x[0]))
}
func (x VkClearValue) SetColor(y VkClearColorValue) {
	*(*VkClearColorValue)(unsafe.Pointer(&x[0])) = y
}

func (x VkClearValue) DepthStencil() VkClearDepthStencilValue {
	return *(*VkClearDepthStencilValue)(unsafe.Pointer(&x[0]))
}
func (x VkClearValue) SetDepthStencil(y VkClearDepthStencilValue) {
	*(*VkClearDepthStencilValue)(unsafe.Pointer(&x[0])) = y
}

func VkDestroySampler(device VkDevice, sampler VkSampler, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSampler) *C.VkSampler { /* Handle */ return (*C.VkSampler)(unsafe.Pointer(x)) }(&sampler)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroySampler(*p0, *p1, *p2)
}

func VkDestroyDescriptorPool(device VkDevice, descriptorPool VkDescriptorPool, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDescriptorPool) *C.VkDescriptorPool { /* Handle */
		return (*C.VkDescriptorPool)(unsafe.Pointer(x))
	}(&descriptorPool)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyDescriptorPool(*p0, *p1, *p2)
}

func VkResetDescriptorPool(device VkDevice, descriptorPool VkDescriptorPool, flags VkDescriptorPoolResetFlags) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDescriptorPool) *C.VkDescriptorPool { /* Handle */
		return (*C.VkDescriptorPool)(unsafe.Pointer(x))
	}(&descriptorPool)
	p2 := /* Identifier */ (*C.VkDescriptorPoolResetFlags)(&flags)
	ret := C.vkResetDescriptorPool(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkAllocateDescriptorSets(device VkDevice, pAllocateInfo *VkDescriptorSetAllocateInfo, pDescriptorSets []VkDescriptorSet) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDescriptorSetAllocateInfo) **C.VkDescriptorSetAllocateInfo { /* Pointer */
		return (**C.VkDescriptorSetAllocateInfo)(unsafe.Pointer(x))
	}(&pAllocateInfo)
	p2 := func(x *[]VkDescriptorSet) **C.VkDescriptorSet { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorSet)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorSet)(unsafe.Pointer((&ptr)))
	}(&pDescriptorSets)
	ret := C.vkAllocateDescriptorSets(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkFreeDescriptorSets(device VkDevice, descriptorPool VkDescriptorPool, descriptorSetCount uint32, pDescriptorSets []VkDescriptorSet) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDescriptorPool) *C.VkDescriptorPool { /* Handle */
		return (*C.VkDescriptorPool)(unsafe.Pointer(x))
	}(&descriptorPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&descriptorSetCount)
	p3 := func(x *[]VkDescriptorSet) **C.VkDescriptorSet { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorSet)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorSet)(unsafe.Pointer((&ptr)))
	}(&pDescriptorSets)
	ret := C.vkFreeDescriptorSets(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkUpdateDescriptorSets(device VkDevice, descriptorWriteCount uint32, pDescriptorWrites []VkWriteDescriptorSet, descriptorCopyCount uint32, pDescriptorCopies []VkCopyDescriptorSet) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&descriptorWriteCount)
	p2 := func(x *[]VkWriteDescriptorSet) **C.VkWriteDescriptorSet { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkWriteDescriptorSet)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkWriteDescriptorSet)(unsafe.Pointer((&ptr)))
	}(&pDescriptorWrites)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&descriptorCopyCount)
	p4 := func(x *[]VkCopyDescriptorSet) **C.VkCopyDescriptorSet { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkCopyDescriptorSet)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkCopyDescriptorSet)(unsafe.Pointer((&ptr)))
	}(&pDescriptorCopies)
	C.vkUpdateDescriptorSets(*p0, *p1, *p2, *p3, *p4)
}

func VkGetPipelineCacheData(device VkDevice, pipelineCache VkPipelineCache, pDataSize *uint32, pData unsafe.Pointer) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkPipelineCache) *C.VkPipelineCache { /* Handle */
		return (*C.VkPipelineCache)(unsafe.Pointer(x))
	}(&pipelineCache)
	p2 := func(x **uint32) **C.ulong { /* Pointer */ return (**C.ulong)(unsafe.Pointer(x)) }(&pDataSize)
	p3 := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&pData)
	ret := C.vkGetPipelineCacheData(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyPipelineCache(device VkDevice, pipelineCache VkPipelineCache, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkPipelineCache) *C.VkPipelineCache { /* Handle */
		return (*C.VkPipelineCache)(unsafe.Pointer(x))
	}(&pipelineCache)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyPipelineCache(*p0, *p1, *p2)
}

func VkCreatePipelineCache(device VkDevice, pCreateInfo *VkPipelineCacheCreateInfo, pAllocator *VkAllocationCallbacks, pPipelineCache *VkPipelineCache) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkPipelineCacheCreateInfo) **C.VkPipelineCacheCreateInfo { /* Pointer */
		return (**C.VkPipelineCacheCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkPipelineCache) **C.VkPipelineCache { /* Pointer */
		return (**C.VkPipelineCache)(unsafe.Pointer(x))
	}(&pPipelineCache)
	ret := C.vkCreatePipelineCache(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyShaderModule(device VkDevice, shaderModule VkShaderModule, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkShaderModule) *C.VkShaderModule { /* Handle */ return (*C.VkShaderModule)(unsafe.Pointer(x)) }(&shaderModule)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyShaderModule(*p0, *p1, *p2)
}

func VkCreateShaderModule(device VkDevice, pCreateInfo *VkShaderModuleCreateInfo, pAllocator *VkAllocationCallbacks, pShaderModule *VkShaderModule) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkShaderModuleCreateInfo) **C.VkShaderModuleCreateInfo { /* Pointer */
		return (**C.VkShaderModuleCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkShaderModule) **C.VkShaderModule { /* Pointer */
		return (**C.VkShaderModule)(unsafe.Pointer(x))
	}(&pShaderModule)
	ret := C.vkCreateShaderModule(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyImageView(device VkDevice, imageView VkImageView, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkImageView) *C.VkImageView { /* Handle */ return (*C.VkImageView)(unsafe.Pointer(x)) }(&imageView)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyImageView(*p0, *p1, *p2)
}

func VkCreateImageView(device VkDevice, pCreateInfo *VkImageViewCreateInfo, pAllocator *VkAllocationCallbacks, pView *VkImageView) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkImageViewCreateInfo) **C.VkImageViewCreateInfo { /* Pointer */
		return (**C.VkImageViewCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkImageView) **C.VkImageView { /* Pointer */ return (**C.VkImageView)(unsafe.Pointer(x)) }(&pView)
	ret := C.vkCreateImageView(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetImageSubresourceLayout(device VkDevice, image VkImage, pSubresource *VkImageSubresource, pLayout *VkSubresourceLayout) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&image)
	p2 := func(x **VkImageSubresource) **C.VkImageSubresource { /* Pointer */
		return (**C.VkImageSubresource)(unsafe.Pointer(x))
	}(&pSubresource)
	p3 := func(x **VkSubresourceLayout) **C.VkSubresourceLayout { /* Pointer */
		return (**C.VkSubresourceLayout)(unsafe.Pointer(x))
	}(&pLayout)
	C.vkGetImageSubresourceLayout(*p0, *p1, *p2, *p3)
}

func VkDestroyImage(device VkDevice, image VkImage, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&image)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyImage(*p0, *p1, *p2)
}

func VkCreateImage(device VkDevice, pCreateInfo *VkImageCreateInfo, pAllocator *VkAllocationCallbacks, pImage *VkImage) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkImageCreateInfo) **C.VkImageCreateInfo { /* Pointer */
		return (**C.VkImageCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkImage) **C.VkImage { /* Pointer */ return (**C.VkImage)(unsafe.Pointer(x)) }(&pImage)
	ret := C.vkCreateImage(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyBufferView(device VkDevice, bufferView VkBufferView, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkBufferView) *C.VkBufferView { /* Handle */ return (*C.VkBufferView)(unsafe.Pointer(x)) }(&bufferView)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyBufferView(*p0, *p1, *p2)
}

func VkCreateBufferView(device VkDevice, pCreateInfo *VkBufferViewCreateInfo, pAllocator *VkAllocationCallbacks, pView *VkBufferView) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkBufferViewCreateInfo) **C.VkBufferViewCreateInfo { /* Pointer */
		return (**C.VkBufferViewCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkBufferView) **C.VkBufferView { /* Pointer */ return (**C.VkBufferView)(unsafe.Pointer(x)) }(&pView)
	ret := C.vkCreateBufferView(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyBuffer(device VkDevice, buffer VkBuffer, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyBuffer(*p0, *p1, *p2)
}

func VkCreateBuffer(device VkDevice, pCreateInfo *VkBufferCreateInfo, pAllocator *VkAllocationCallbacks, pBuffer *VkBuffer) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkBufferCreateInfo) **C.VkBufferCreateInfo { /* Pointer */
		return (**C.VkBufferCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkBuffer) **C.VkBuffer { /* Pointer */ return (**C.VkBuffer)(unsafe.Pointer(x)) }(&pBuffer)
	ret := C.vkCreateBuffer(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetQueryPoolResults(device VkDevice, queryPool VkQueryPool, firstQuery uint32, queryCount uint32, dataSize uint32, pData unsafe.Pointer, stride VkDeviceSize, flags VkQueryResultFlags) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstQuery)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&queryCount)
	p4 := func(x *uint32) *C.ulong { /* Scalar */ return (*C.ulong)(unsafe.Pointer(x)) }(&dataSize)
	p5 := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&pData)
	p6 := /* Identifier */ (*C.VkDeviceSize)(&stride)
	p7 := /* Identifier */ (*C.VkQueryResultFlags)(&flags)
	ret := C.vkGetQueryPoolResults(*p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyQueryPool(device VkDevice, queryPool VkQueryPool, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyQueryPool(*p0, *p1, *p2)
}

func VkCreateQueryPool(device VkDevice, pCreateInfo *VkQueryPoolCreateInfo, pAllocator *VkAllocationCallbacks, pQueryPool *VkQueryPool) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkQueryPoolCreateInfo) **C.VkQueryPoolCreateInfo { /* Pointer */
		return (**C.VkQueryPoolCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkQueryPool) **C.VkQueryPool { /* Pointer */ return (**C.VkQueryPool)(unsafe.Pointer(x)) }(&pQueryPool)
	ret := C.vkCreateQueryPool(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkResetEvent(device VkDevice, event VkEvent) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkEvent) *C.VkEvent { /* Handle */ return (*C.VkEvent)(unsafe.Pointer(x)) }(&event)
	ret := C.vkResetEvent(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCreateFramebuffer(device VkDevice, pCreateInfo *VkFramebufferCreateInfo, pAllocator *VkAllocationCallbacks, pFramebuffer *VkFramebuffer) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkFramebufferCreateInfo) **C.VkFramebufferCreateInfo { /* Pointer */
		return (**C.VkFramebufferCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkFramebuffer) **C.VkFramebuffer { /* Pointer */ return (**C.VkFramebuffer)(unsafe.Pointer(x)) }(&pFramebuffer)
	ret := C.vkCreateFramebuffer(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyFramebuffer(device VkDevice, framebuffer VkFramebuffer, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkFramebuffer) *C.VkFramebuffer { /* Handle */ return (*C.VkFramebuffer)(unsafe.Pointer(x)) }(&framebuffer)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyFramebuffer(*p0, *p1, *p2)
}

func VkCreateRenderPass(device VkDevice, pCreateInfo *VkRenderPassCreateInfo, pAllocator *VkAllocationCallbacks, pRenderPass *VkRenderPass) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkRenderPassCreateInfo) **C.VkRenderPassCreateInfo { /* Pointer */
		return (**C.VkRenderPassCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkRenderPass) **C.VkRenderPass { /* Pointer */ return (**C.VkRenderPass)(unsafe.Pointer(x)) }(&pRenderPass)
	ret := C.vkCreateRenderPass(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyRenderPass(device VkDevice, renderPass VkRenderPass, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkRenderPass) *C.VkRenderPass { /* Handle */ return (*C.VkRenderPass)(unsafe.Pointer(x)) }(&renderPass)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyRenderPass(*p0, *p1, *p2)
}

func VkGetRenderAreaGranularity(device VkDevice, renderPass VkRenderPass, pGranularity *VkExtent2D) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkRenderPass) *C.VkRenderPass { /* Handle */ return (*C.VkRenderPass)(unsafe.Pointer(x)) }(&renderPass)
	p2 := func(x **VkExtent2D) **C.VkExtent2D { /* Pointer */ return (**C.VkExtent2D)(unsafe.Pointer(x)) }(&pGranularity)
	C.vkGetRenderAreaGranularity(*p0, *p1, *p2)
}

func VkSetEvent(device VkDevice, event VkEvent) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkEvent) *C.VkEvent { /* Handle */ return (*C.VkEvent)(unsafe.Pointer(x)) }(&event)
	ret := C.vkSetEvent(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetEventStatus(device VkDevice, event VkEvent) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkEvent) *C.VkEvent { /* Handle */ return (*C.VkEvent)(unsafe.Pointer(x)) }(&event)
	ret := C.vkGetEventStatus(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyEvent(device VkDevice, event VkEvent, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkEvent) *C.VkEvent { /* Handle */ return (*C.VkEvent)(unsafe.Pointer(x)) }(&event)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyEvent(*p0, *p1, *p2)
}

func VkCreateEvent(device VkDevice, pCreateInfo *VkEventCreateInfo, pAllocator *VkAllocationCallbacks, pEvent *VkEvent) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkEventCreateInfo) **C.VkEventCreateInfo { /* Pointer */
		return (**C.VkEventCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkEvent) **C.VkEvent { /* Pointer */ return (**C.VkEvent)(unsafe.Pointer(x)) }(&pEvent)
	ret := C.vkCreateEvent(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroySemaphore(device VkDevice, semaphore VkSemaphore, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSemaphore) *C.VkSemaphore { /* Handle */ return (*C.VkSemaphore)(unsafe.Pointer(x)) }(&semaphore)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroySemaphore(*p0, *p1, *p2)
}

func VkWaitForFences(device VkDevice, fenceCount uint32, pFences []VkFence, waitAll VkBool32, timeout uint64) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&fenceCount)
	p2 := func(x *[]VkFence) **C.VkFence { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkFence)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkFence)(unsafe.Pointer((&ptr)))
	}(&pFences)
	p3 := /* Identifier */ (*C.VkBool32)(&waitAll)
	p4 := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&timeout)
	ret := C.vkWaitForFences(*p0, *p1, *p2, *p3, *p4)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetFenceStatus(device VkDevice, fence VkFence) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkFence) *C.VkFence { /* Handle */ return (*C.VkFence)(unsafe.Pointer(x)) }(&fence)
	ret := C.vkGetFenceStatus(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkResetFences(device VkDevice, fenceCount uint32, pFences []VkFence) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&fenceCount)
	p2 := func(x *[]VkFence) **C.VkFence { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkFence)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkFence)(unsafe.Pointer((&ptr)))
	}(&pFences)
	ret := C.vkResetFences(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyFence(device VkDevice, fence VkFence, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkFence) *C.VkFence { /* Handle */ return (*C.VkFence)(unsafe.Pointer(x)) }(&fence)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyFence(*p0, *p1, *p2)
}

func VkCreateFence(device VkDevice, pCreateInfo *VkFenceCreateInfo, pAllocator *VkAllocationCallbacks, pFence *VkFence) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkFenceCreateInfo) **C.VkFenceCreateInfo { /* Pointer */
		return (**C.VkFenceCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkFence) **C.VkFence { /* Pointer */ return (**C.VkFence)(unsafe.Pointer(x)) }(&pFence)
	ret := C.vkCreateFence(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkQueueBindSparse(queue VkQueue, bindInfoCount uint32, pBindInfo []VkBindSparseInfo, fence VkFence) VkResult {
	p0 := func(x *VkQueue) *C.VkQueue { /* Handle */ return (*C.VkQueue)(unsafe.Pointer(x)) }(&queue)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&bindInfoCount)
	p2 := func(x *[]VkBindSparseInfo) **C.VkBindSparseInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBindSparseInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBindSparseInfo)(unsafe.Pointer((&ptr)))
	}(&pBindInfo)
	p3 := func(x *VkFence) *C.VkFence { /* Handle */ return (*C.VkFence)(unsafe.Pointer(x)) }(&fence)
	ret := C.vkQueueBindSparse(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice VkPhysicalDevice, format VkFormat, type_ VkImageType, samples VkSampleCountFlagBits, usage VkImageUsageFlags, tiling VkImageTiling, pPropertyCount *uint32, pProperties []VkSparseImageFormatProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := /* Identifier */ (*C.VkFormat)(&format)
	p2 := /* Identifier */ (*C.VkImageType)(&type_)
	p3 := /* Identifier */ (*C.VkSampleCountFlagBits)(&samples)
	p4 := /* Identifier */ (*C.VkImageUsageFlags)(&usage)
	p5 := /* Identifier */ (*C.VkImageTiling)(&tiling)
	p6 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p7 := func(x *[]VkSparseImageFormatProperties) **C.VkSparseImageFormatProperties { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseImageFormatProperties)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseImageFormatProperties)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	C.vkGetPhysicalDeviceSparseImageFormatProperties(*p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7)
}

func VkGetImageSparseMemoryRequirements(device VkDevice, image VkImage, pSparseMemoryRequirementCount *uint32, pSparseMemoryRequirements []VkSparseImageMemoryRequirements) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&image)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pSparseMemoryRequirementCount)
	p3 := func(x *[]VkSparseImageMemoryRequirements) **C.VkSparseImageMemoryRequirements { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseImageMemoryRequirements)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseImageMemoryRequirements)(unsafe.Pointer((&ptr)))
	}(&pSparseMemoryRequirements)
	C.vkGetImageSparseMemoryRequirements(*p0, *p1, *p2, *p3)
}

func VkGetImageMemoryRequirements(device VkDevice, image VkImage, pMemoryRequirements *VkMemoryRequirements) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&image)
	p2 := func(x **VkMemoryRequirements) **C.VkMemoryRequirements { /* Pointer */
		return (**C.VkMemoryRequirements)(unsafe.Pointer(x))
	}(&pMemoryRequirements)
	C.vkGetImageMemoryRequirements(*p0, *p1, *p2)
}

func VkGetBufferMemoryRequirements(device VkDevice, buffer VkBuffer, pMemoryRequirements *VkMemoryRequirements) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := func(x **VkMemoryRequirements) **C.VkMemoryRequirements { /* Pointer */
		return (**C.VkMemoryRequirements)(unsafe.Pointer(x))
	}(&pMemoryRequirements)
	C.vkGetBufferMemoryRequirements(*p0, *p1, *p2)
}

func VkBindImageMemory(device VkDevice, image VkImage, memory VkDeviceMemory, memoryOffset VkDeviceSize) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&image)
	p2 := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&memory)
	p3 := /* Identifier */ (*C.VkDeviceSize)(&memoryOffset)
	ret := C.vkBindImageMemory(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkBindBufferMemory(device VkDevice, buffer VkBuffer, memory VkDeviceMemory, memoryOffset VkDeviceSize) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&memory)
	p3 := /* Identifier */ (*C.VkDeviceSize)(&memoryOffset)
	ret := C.vkBindBufferMemory(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDeviceMemoryCommitment(device VkDevice, memory VkDeviceMemory, pCommittedMemoryInBytes *VkDeviceSize) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&memory)
	p2 := func(x **VkDeviceSize) **C.VkDeviceSize { /* Pointer */ return (**C.VkDeviceSize)(unsafe.Pointer(x)) }(&pCommittedMemoryInBytes)
	C.vkGetDeviceMemoryCommitment(*p0, *p1, *p2)
}

func VkInvalidateMappedMemoryRanges(device VkDevice, memoryRangeCount uint32, pMemoryRanges []VkMappedMemoryRange) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&memoryRangeCount)
	p2 := func(x *[]VkMappedMemoryRange) **C.VkMappedMemoryRange { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkMappedMemoryRange)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkMappedMemoryRange)(unsafe.Pointer((&ptr)))
	}(&pMemoryRanges)
	ret := C.vkInvalidateMappedMemoryRanges(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkFlushMappedMemoryRanges(device VkDevice, memoryRangeCount uint32, pMemoryRanges []VkMappedMemoryRange) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&memoryRangeCount)
	p2 := func(x *[]VkMappedMemoryRange) **C.VkMappedMemoryRange { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkMappedMemoryRange)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkMappedMemoryRange)(unsafe.Pointer((&ptr)))
	}(&pMemoryRanges)
	ret := C.vkFlushMappedMemoryRanges(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkUnmapMemory(device VkDevice, memory VkDeviceMemory) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&memory)
	C.vkUnmapMemory(*p0, *p1)
}

func VkMapMemory(device VkDevice, memory VkDeviceMemory, offset VkDeviceSize, size VkDeviceSize, flags VkMemoryMapFlags, ppData *unsafe.Pointer) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&memory)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&offset)
	p3 := /* Identifier */ (*C.VkDeviceSize)(&size)
	p4 := /* Identifier */ (*C.VkMemoryMapFlags)(&flags)
	p5 := func(x **unsafe.Pointer) **unsafe.Pointer { /* Pointer */ return (**unsafe.Pointer)(unsafe.Pointer(x)) }(&ppData)
	ret := C.vkMapMemory(*p0, *p1, *p2, *p3, *p4, *p5)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkFreeMemory(device VkDevice, memory VkDeviceMemory, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&memory)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkFreeMemory(*p0, *p1, *p2)
}

func VkCreateCommandPool(device VkDevice, pCreateInfo *VkCommandPoolCreateInfo, pAllocator *VkAllocationCallbacks, pCommandPool *VkCommandPool) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkCommandPoolCreateInfo) **C.VkCommandPoolCreateInfo { /* Pointer */
		return (**C.VkCommandPoolCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkCommandPool) **C.VkCommandPool { /* Pointer */ return (**C.VkCommandPool)(unsafe.Pointer(x)) }(&pCommandPool)
	ret := C.vkCreateCommandPool(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyCommandPool(device VkDevice, commandPool VkCommandPool, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkCommandPool) *C.VkCommandPool { /* Handle */ return (*C.VkCommandPool)(unsafe.Pointer(x)) }(&commandPool)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyCommandPool(*p0, *p1, *p2)
}

func VkResetCommandPool(device VkDevice, commandPool VkCommandPool, flags VkCommandPoolResetFlags) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkCommandPool) *C.VkCommandPool { /* Handle */ return (*C.VkCommandPool)(unsafe.Pointer(x)) }(&commandPool)
	p2 := /* Identifier */ (*C.VkCommandPoolResetFlags)(&flags)
	ret := C.vkResetCommandPool(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkAllocateMemory(device VkDevice, pAllocateInfo *VkMemoryAllocateInfo, pAllocator *VkAllocationCallbacks, pMemory *VkDeviceMemory) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkMemoryAllocateInfo) **C.VkMemoryAllocateInfo { /* Pointer */
		return (**C.VkMemoryAllocateInfo)(unsafe.Pointer(x))
	}(&pAllocateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkDeviceMemory) **C.VkDeviceMemory { /* Pointer */
		return (**C.VkDeviceMemory)(unsafe.Pointer(x))
	}(&pMemory)
	ret := C.vkAllocateMemory(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDeviceWaitIdle(device VkDevice) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	ret := C.vkDeviceWaitIdle(*p0)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkQueueWaitIdle(queue VkQueue) VkResult {
	p0 := func(x *VkQueue) *C.VkQueue { /* Handle */ return (*C.VkQueue)(unsafe.Pointer(x)) }(&queue)
	ret := C.vkQueueWaitIdle(*p0)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkQueueSubmit(queue VkQueue, submitCount uint32, pSubmits []VkSubmitInfo, fence VkFence) VkResult {
	p0 := func(x *VkQueue) *C.VkQueue { /* Handle */ return (*C.VkQueue)(unsafe.Pointer(x)) }(&queue)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&submitCount)
	p2 := func(x *[]VkSubmitInfo) **C.VkSubmitInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSubmitInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSubmitInfo)(unsafe.Pointer((&ptr)))
	}(&pSubmits)
	p3 := func(x *VkFence) *C.VkFence { /* Handle */ return (*C.VkFence)(unsafe.Pointer(x)) }(&fence)
	ret := C.vkQueueSubmit(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDeviceQueue(device VkDevice, queueFamilyIndex uint32, queueIndex uint32, pQueue *VkQueue) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&queueFamilyIndex)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&queueIndex)
	p3 := func(x **VkQueue) **C.VkQueue { /* Pointer */ return (**C.VkQueue)(unsafe.Pointer(x)) }(&pQueue)
	C.vkGetDeviceQueue(*p0, *p1, *p2, *p3)
}

func VkEnumerateDeviceLayerProperties(physicalDevice VkPhysicalDevice, pPropertyCount *uint32, pProperties []VkLayerProperties) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p2 := func(x *[]VkLayerProperties) **C.VkLayerProperties { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkLayerProperties)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkLayerProperties)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	ret := C.vkEnumerateDeviceLayerProperties(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkAllocateCommandBuffers(device VkDevice, pAllocateInfo *VkCommandBufferAllocateInfo, pCommandBuffers []VkCommandBuffer) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkCommandBufferAllocateInfo) **C.VkCommandBufferAllocateInfo { /* Pointer */
		return (**C.VkCommandBufferAllocateInfo)(unsafe.Pointer(x))
	}(&pAllocateInfo)
	p2 := func(x *[]VkCommandBuffer) **C.VkCommandBuffer { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkCommandBuffer)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkCommandBuffer)(unsafe.Pointer((&ptr)))
	}(&pCommandBuffers)
	ret := C.vkAllocateCommandBuffers(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkFreeCommandBuffers(device VkDevice, commandPool VkCommandPool, commandBufferCount uint32, pCommandBuffers []VkCommandBuffer) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkCommandPool) *C.VkCommandPool { /* Handle */ return (*C.VkCommandPool)(unsafe.Pointer(x)) }(&commandPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&commandBufferCount)
	p3 := func(x *[]VkCommandBuffer) **C.VkCommandBuffer { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkCommandBuffer)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkCommandBuffer)(unsafe.Pointer((&ptr)))
	}(&pCommandBuffers)
	C.vkFreeCommandBuffers(*p0, *p1, *p2, *p3)
}

func VkBeginCommandBuffer(commandBuffer VkCommandBuffer, pBeginInfo *VkCommandBufferBeginInfo) VkResult {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x **VkCommandBufferBeginInfo) **C.VkCommandBufferBeginInfo { /* Pointer */
		return (**C.VkCommandBufferBeginInfo)(unsafe.Pointer(x))
	}(&pBeginInfo)
	ret := C.vkBeginCommandBuffer(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkEndCommandBuffer(commandBuffer VkCommandBuffer) VkResult {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	ret := C.vkEndCommandBuffer(*p0)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkResetCommandBuffer(commandBuffer VkCommandBuffer, flags VkCommandBufferResetFlags) VkResult {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkCommandBufferResetFlags)(&flags)
	ret := C.vkResetCommandBuffer(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkEnumerateInstanceLayerProperties(pPropertyCount *uint32, pProperties []VkLayerProperties) VkResult {
	p0 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p1 := func(x *[]VkLayerProperties) **C.VkLayerProperties { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkLayerProperties)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkLayerProperties)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	ret := C.vkEnumerateInstanceLayerProperties(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkEnumerateDeviceExtensionProperties(physicalDevice VkPhysicalDevice, pLayerName *byte, pPropertyCount *uint32, pProperties []VkExtensionProperties) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **byte) **C.char { /* Pointer */ return (**C.char)(unsafe.Pointer(x)) }(&pLayerName)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p3 := func(x *[]VkExtensionProperties) **C.VkExtensionProperties { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkExtensionProperties)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkExtensionProperties)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	ret := C.vkEnumerateDeviceExtensionProperties(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkEnumerateInstanceExtensionProperties(pLayerName *byte, pPropertyCount *uint32, pProperties []VkExtensionProperties) VkResult {
	p0 := func(x **byte) **C.char { /* Pointer */ return (**C.char)(unsafe.Pointer(x)) }(&pLayerName)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p2 := func(x *[]VkExtensionProperties) **C.VkExtensionProperties { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkExtensionProperties)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkExtensionProperties)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	ret := C.vkEnumerateInstanceExtensionProperties(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceImageFormatProperties(physicalDevice VkPhysicalDevice, format VkFormat, type_ VkImageType, tiling VkImageTiling, usage VkImageUsageFlags, flags VkImageCreateFlags, pImageFormatProperties *VkImageFormatProperties) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := /* Identifier */ (*C.VkFormat)(&format)
	p2 := /* Identifier */ (*C.VkImageType)(&type_)
	p3 := /* Identifier */ (*C.VkImageTiling)(&tiling)
	p4 := /* Identifier */ (*C.VkImageUsageFlags)(&usage)
	p5 := /* Identifier */ (*C.VkImageCreateFlags)(&flags)
	p6 := func(x **VkImageFormatProperties) **C.VkImageFormatProperties { /* Pointer */
		return (**C.VkImageFormatProperties)(unsafe.Pointer(x))
	}(&pImageFormatProperties)
	ret := C.vkGetPhysicalDeviceImageFormatProperties(*p0, *p1, *p2, *p3, *p4, *p5, *p6)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyDevice(device VkDevice, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyDevice(*p0, *p1)
}

func VkCreateDevice(physicalDevice VkPhysicalDevice, pCreateInfo *VkDeviceCreateInfo, pAllocator *VkAllocationCallbacks, pDevice *VkDevice) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkDeviceCreateInfo) **C.VkDeviceCreateInfo { /* Pointer */
		return (**C.VkDeviceCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkDevice) **C.VkDevice { /* Pointer */ return (**C.VkDevice)(unsafe.Pointer(x)) }(&pDevice)
	ret := C.vkCreateDevice(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDeviceProcAddr(device VkDevice, pName *byte) PFN_vkVoidFunction {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **byte) **C.char { /* Pointer */ return (**C.char)(unsafe.Pointer(x)) }(&pName)
	ret := C.vkGetDeviceProcAddr(*p0, *p1)
	retPtr := /* Identifier */ (*PFN_vkVoidFunction)(&ret)
	return *retPtr
}

func VkGetInstanceProcAddr(instance VkInstance, pName *byte) PFN_vkVoidFunction {
	p0 := func(x *VkInstance) *C.VkInstance { /* Handle */ return (*C.VkInstance)(unsafe.Pointer(x)) }(&instance)
	p1 := func(x **byte) **C.char { /* Pointer */ return (**C.char)(unsafe.Pointer(x)) }(&pName)
	ret := C.vkGetInstanceProcAddr(*p0, *p1)
	retPtr := /* Identifier */ (*PFN_vkVoidFunction)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceMemoryProperties(physicalDevice VkPhysicalDevice, pMemoryProperties *VkPhysicalDeviceMemoryProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceMemoryProperties) **C.VkPhysicalDeviceMemoryProperties { /* Pointer */
		return (**C.VkPhysicalDeviceMemoryProperties)(unsafe.Pointer(x))
	}(&pMemoryProperties)
	C.vkGetPhysicalDeviceMemoryProperties(*p0, *p1)
}

func VkGetPhysicalDeviceQueueFamilyProperties(physicalDevice VkPhysicalDevice, pQueueFamilyPropertyCount *uint32, pQueueFamilyProperties []VkQueueFamilyProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pQueueFamilyPropertyCount)
	p2 := func(x *[]VkQueueFamilyProperties) **C.VkQueueFamilyProperties { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkQueueFamilyProperties)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkQueueFamilyProperties)(unsafe.Pointer((&ptr)))
	}(&pQueueFamilyProperties)
	C.vkGetPhysicalDeviceQueueFamilyProperties(*p0, *p1, *p2)
}

func VkGetPhysicalDeviceProperties(physicalDevice VkPhysicalDevice, pProperties *VkPhysicalDeviceProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceProperties) **C.VkPhysicalDeviceProperties { /* Pointer */
		return (**C.VkPhysicalDeviceProperties)(unsafe.Pointer(x))
	}(&pProperties)
	C.vkGetPhysicalDeviceProperties(*p0, *p1)
}

func VkCmdBindPipeline(commandBuffer VkCommandBuffer, pipelineBindPoint VkPipelineBindPoint, pipeline VkPipeline) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkPipelineBindPoint)(&pipelineBindPoint)
	p2 := func(x *VkPipeline) *C.VkPipeline { /* Handle */ return (*C.VkPipeline)(unsafe.Pointer(x)) }(&pipeline)
	C.vkCmdBindPipeline(*p0, *p1, *p2)
}

func VkCmdSetViewport(commandBuffer VkCommandBuffer, firstViewport uint32, viewportCount uint32, pViewports []VkViewport) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstViewport)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&viewportCount)
	p3 := func(x *[]VkViewport) **C.VkViewport { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkViewport)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkViewport)(unsafe.Pointer((&ptr)))
	}(&pViewports)
	C.vkCmdSetViewport(*p0, *p1, *p2, *p3)
}

func VkCmdSetScissor(commandBuffer VkCommandBuffer, firstScissor uint32, scissorCount uint32, pScissors []VkRect2D) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstScissor)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&scissorCount)
	p3 := func(x *[]VkRect2D) **C.VkRect2D { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkRect2D)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkRect2D)(unsafe.Pointer((&ptr)))
	}(&pScissors)
	C.vkCmdSetScissor(*p0, *p1, *p2, *p3)
}

func VkCmdSetLineWidth(commandBuffer VkCommandBuffer, lineWidth float32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&lineWidth)
	C.vkCmdSetLineWidth(*p0, *p1)
}

func VkGetPhysicalDeviceFormatProperties(physicalDevice VkPhysicalDevice, format VkFormat, pFormatProperties *VkFormatProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := /* Identifier */ (*C.VkFormat)(&format)
	p2 := func(x **VkFormatProperties) **C.VkFormatProperties { /* Pointer */
		return (**C.VkFormatProperties)(unsafe.Pointer(x))
	}(&pFormatProperties)
	C.vkGetPhysicalDeviceFormatProperties(*p0, *p1, *p2)
}

func VkCmdSetBlendConstants(commandBuffer VkCommandBuffer, blendConstants []float32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *[]float32) **C.float { /* Array */
		if *x != nil {
			slc := (*C.float)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.float)(unsafe.Pointer((&ptr)))
	}(&blendConstants)
	C.vkCmdSetBlendConstants(*p0, *p1)
}

func VkCmdSetDepthBounds(commandBuffer VkCommandBuffer, minDepthBounds float32, maxDepthBounds float32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&minDepthBounds)
	p2 := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&maxDepthBounds)
	C.vkCmdSetDepthBounds(*p0, *p1, *p2)
}

func VkCmdSetStencilCompareMask(commandBuffer VkCommandBuffer, faceMask VkStencilFaceFlags, compareMask uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkStencilFaceFlags)(&faceMask)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&compareMask)
	C.vkCmdSetStencilCompareMask(*p0, *p1, *p2)
}

func VkCmdSetStencilWriteMask(commandBuffer VkCommandBuffer, faceMask VkStencilFaceFlags, writeMask uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkStencilFaceFlags)(&faceMask)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&writeMask)
	C.vkCmdSetStencilWriteMask(*p0, *p1, *p2)
}

func VkCmdSetStencilReference(commandBuffer VkCommandBuffer, faceMask VkStencilFaceFlags, reference uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkStencilFaceFlags)(&faceMask)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&reference)
	C.vkCmdSetStencilReference(*p0, *p1, *p2)
}

func VkCmdBindDescriptorSets(commandBuffer VkCommandBuffer, pipelineBindPoint VkPipelineBindPoint, layout VkPipelineLayout, firstSet uint32, descriptorSetCount uint32, pDescriptorSets []VkDescriptorSet, dynamicOffsetCount uint32, pDynamicOffsets []uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkPipelineBindPoint)(&pipelineBindPoint)
	p2 := func(x *VkPipelineLayout) *C.VkPipelineLayout { /* Handle */
		return (*C.VkPipelineLayout)(unsafe.Pointer(x))
	}(&layout)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstSet)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&descriptorSetCount)
	p5 := func(x *[]VkDescriptorSet) **C.VkDescriptorSet { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorSet)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorSet)(unsafe.Pointer((&ptr)))
	}(&pDescriptorSets)
	p6 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&dynamicOffsetCount)
	p7 := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&pDynamicOffsets)
	C.vkCmdBindDescriptorSets(*p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7)
}

func VkCmdBindIndexBuffer(commandBuffer VkCommandBuffer, buffer VkBuffer, offset VkDeviceSize, indexType VkIndexType) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&offset)
	p3 := /* Identifier */ (*C.VkIndexType)(&indexType)
	C.vkCmdBindIndexBuffer(*p0, *p1, *p2, *p3)
}

func VkCmdBindVertexBuffers(commandBuffer VkCommandBuffer, firstBinding uint32, bindingCount uint32, pBuffers []VkBuffer, pOffsets []VkDeviceSize) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstBinding)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&bindingCount)
	p3 := func(x *[]VkBuffer) **C.VkBuffer { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBuffer)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBuffer)(unsafe.Pointer((&ptr)))
	}(&pBuffers)
	p4 := func(x *[]VkDeviceSize) **C.VkDeviceSize { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDeviceSize)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDeviceSize)(unsafe.Pointer((&ptr)))
	}(&pOffsets)
	C.vkCmdBindVertexBuffers(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdDraw(commandBuffer VkCommandBuffer, vertexCount uint32, instanceCount uint32, firstVertex uint32, firstInstance uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&vertexCount)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&instanceCount)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstVertex)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstInstance)
	C.vkCmdDraw(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdDrawIndexed(commandBuffer VkCommandBuffer, indexCount uint32, instanceCount uint32, firstIndex uint32, vertexOffset int32, firstInstance uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&indexCount)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&instanceCount)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstIndex)
	p4 := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&vertexOffset)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstInstance)
	C.vkCmdDrawIndexed(*p0, *p1, *p2, *p3, *p4, *p5)
}

func VkCmdDrawIndirect(commandBuffer VkCommandBuffer, buffer VkBuffer, offset VkDeviceSize, drawCount uint32, stride uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&offset)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&drawCount)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&stride)
	C.vkCmdDrawIndirect(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdDrawIndexedIndirect(commandBuffer VkCommandBuffer, buffer VkBuffer, offset VkDeviceSize, drawCount uint32, stride uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&offset)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&drawCount)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&stride)
	C.vkCmdDrawIndexedIndirect(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdDispatch(commandBuffer VkCommandBuffer, groupCountX uint32, groupCountY uint32, groupCountZ uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&groupCountX)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&groupCountY)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&groupCountZ)
	C.vkCmdDispatch(*p0, *p1, *p2, *p3)
}

func VkCmdDispatchIndirect(commandBuffer VkCommandBuffer, buffer VkBuffer, offset VkDeviceSize) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&offset)
	C.vkCmdDispatchIndirect(*p0, *p1, *p2)
}

func VkCmdCopyBuffer(commandBuffer VkCommandBuffer, srcBuffer VkBuffer, dstBuffer VkBuffer, regionCount uint32, pRegions []VkBufferCopy) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&srcBuffer)
	p2 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&dstBuffer)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&regionCount)
	p4 := func(x *[]VkBufferCopy) **C.VkBufferCopy { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBufferCopy)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBufferCopy)(unsafe.Pointer((&ptr)))
	}(&pRegions)
	C.vkCmdCopyBuffer(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdCopyImage(commandBuffer VkCommandBuffer, srcImage VkImage, srcImageLayout VkImageLayout, dstImage VkImage, dstImageLayout VkImageLayout, regionCount uint32, pRegions []VkImageCopy) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&srcImage)
	p2 := /* Identifier */ (*C.VkImageLayout)(&srcImageLayout)
	p3 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&dstImage)
	p4 := /* Identifier */ (*C.VkImageLayout)(&dstImageLayout)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&regionCount)
	p6 := func(x *[]VkImageCopy) **C.VkImageCopy { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageCopy)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageCopy)(unsafe.Pointer((&ptr)))
	}(&pRegions)
	C.vkCmdCopyImage(*p0, *p1, *p2, *p3, *p4, *p5, *p6)
}

func VkCmdBlitImage(commandBuffer VkCommandBuffer, srcImage VkImage, srcImageLayout VkImageLayout, dstImage VkImage, dstImageLayout VkImageLayout, regionCount uint32, pRegions []VkImageBlit, filter VkFilter) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&srcImage)
	p2 := /* Identifier */ (*C.VkImageLayout)(&srcImageLayout)
	p3 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&dstImage)
	p4 := /* Identifier */ (*C.VkImageLayout)(&dstImageLayout)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&regionCount)
	p6 := func(x *[]VkImageBlit) **C.VkImageBlit { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageBlit)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageBlit)(unsafe.Pointer((&ptr)))
	}(&pRegions)
	p7 := /* Identifier */ (*C.VkFilter)(&filter)
	C.vkCmdBlitImage(*p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7)
}

func VkCmdCopyBufferToImage(commandBuffer VkCommandBuffer, srcBuffer VkBuffer, dstImage VkImage, dstImageLayout VkImageLayout, regionCount uint32, pRegions []VkBufferImageCopy) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&srcBuffer)
	p2 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&dstImage)
	p3 := /* Identifier */ (*C.VkImageLayout)(&dstImageLayout)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&regionCount)
	p5 := func(x *[]VkBufferImageCopy) **C.VkBufferImageCopy { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBufferImageCopy)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBufferImageCopy)(unsafe.Pointer((&ptr)))
	}(&pRegions)
	C.vkCmdCopyBufferToImage(*p0, *p1, *p2, *p3, *p4, *p5)
}

func VkCmdCopyImageToBuffer(commandBuffer VkCommandBuffer, srcImage VkImage, srcImageLayout VkImageLayout, dstBuffer VkBuffer, regionCount uint32, pRegions []VkBufferImageCopy) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&srcImage)
	p2 := /* Identifier */ (*C.VkImageLayout)(&srcImageLayout)
	p3 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&dstBuffer)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&regionCount)
	p5 := func(x *[]VkBufferImageCopy) **C.VkBufferImageCopy { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBufferImageCopy)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBufferImageCopy)(unsafe.Pointer((&ptr)))
	}(&pRegions)
	C.vkCmdCopyImageToBuffer(*p0, *p1, *p2, *p3, *p4, *p5)
}

func VkCmdUpdateBuffer(commandBuffer VkCommandBuffer, dstBuffer VkBuffer, dstOffset VkDeviceSize, dataSize VkDeviceSize, pData unsafe.Pointer) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&dstBuffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&dstOffset)
	p3 := /* Identifier */ (*C.VkDeviceSize)(&dataSize)
	p4 := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&pData)
	C.vkCmdUpdateBuffer(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdFillBuffer(commandBuffer VkCommandBuffer, dstBuffer VkBuffer, dstOffset VkDeviceSize, size VkDeviceSize, data uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&dstBuffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&dstOffset)
	p3 := /* Identifier */ (*C.VkDeviceSize)(&size)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&data)
	C.vkCmdFillBuffer(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdClearColorImage(commandBuffer VkCommandBuffer, image VkImage, imageLayout VkImageLayout, pColor *VkClearColorValue, rangeCount uint32, pRanges []VkImageSubresourceRange) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&image)
	p2 := /* Identifier */ (*C.VkImageLayout)(&imageLayout)
	p3 := func(x **VkClearColorValue) **C.VkClearColorValue { /* Pointer */
		return (**C.VkClearColorValue)(unsafe.Pointer(x))
	}(&pColor)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&rangeCount)
	p5 := func(x *[]VkImageSubresourceRange) **C.VkImageSubresourceRange { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageSubresourceRange)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageSubresourceRange)(unsafe.Pointer((&ptr)))
	}(&pRanges)
	C.vkCmdClearColorImage(*p0, *p1, *p2, *p3, *p4, *p5)
}

func VkCmdClearDepthStencilImage(commandBuffer VkCommandBuffer, image VkImage, imageLayout VkImageLayout, pDepthStencil *VkClearDepthStencilValue, rangeCount uint32, pRanges []VkImageSubresourceRange) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&image)
	p2 := /* Identifier */ (*C.VkImageLayout)(&imageLayout)
	p3 := func(x **VkClearDepthStencilValue) **C.VkClearDepthStencilValue { /* Pointer */
		return (**C.VkClearDepthStencilValue)(unsafe.Pointer(x))
	}(&pDepthStencil)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&rangeCount)
	p5 := func(x *[]VkImageSubresourceRange) **C.VkImageSubresourceRange { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageSubresourceRange)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageSubresourceRange)(unsafe.Pointer((&ptr)))
	}(&pRanges)
	C.vkCmdClearDepthStencilImage(*p0, *p1, *p2, *p3, *p4, *p5)
}

func VkCmdClearAttachments(commandBuffer VkCommandBuffer, attachmentCount uint32, pAttachments []VkClearAttachment, rectCount uint32, pRects []VkClearRect) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&attachmentCount)
	p2 := func(x *[]VkClearAttachment) **C.VkClearAttachment { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkClearAttachment)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkClearAttachment)(unsafe.Pointer((&ptr)))
	}(&pAttachments)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&rectCount)
	p4 := func(x *[]VkClearRect) **C.VkClearRect { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkClearRect)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkClearRect)(unsafe.Pointer((&ptr)))
	}(&pRects)
	C.vkCmdClearAttachments(*p0, *p1, *p2, *p3, *p4)
}

func VkCmdResolveImage(commandBuffer VkCommandBuffer, srcImage VkImage, srcImageLayout VkImageLayout, dstImage VkImage, dstImageLayout VkImageLayout, regionCount uint32, pRegions []VkImageResolve) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&srcImage)
	p2 := /* Identifier */ (*C.VkImageLayout)(&srcImageLayout)
	p3 := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&dstImage)
	p4 := /* Identifier */ (*C.VkImageLayout)(&dstImageLayout)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&regionCount)
	p6 := func(x *[]VkImageResolve) **C.VkImageResolve { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageResolve)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageResolve)(unsafe.Pointer((&ptr)))
	}(&pRegions)
	C.vkCmdResolveImage(*p0, *p1, *p2, *p3, *p4, *p5, *p6)
}

func VkCmdSetEvent(commandBuffer VkCommandBuffer, event VkEvent, stageMask VkPipelineStageFlags) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkEvent) *C.VkEvent { /* Handle */ return (*C.VkEvent)(unsafe.Pointer(x)) }(&event)
	p2 := /* Identifier */ (*C.VkPipelineStageFlags)(&stageMask)
	C.vkCmdSetEvent(*p0, *p1, *p2)
}

func VkCmdResetEvent(commandBuffer VkCommandBuffer, event VkEvent, stageMask VkPipelineStageFlags) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkEvent) *C.VkEvent { /* Handle */ return (*C.VkEvent)(unsafe.Pointer(x)) }(&event)
	p2 := /* Identifier */ (*C.VkPipelineStageFlags)(&stageMask)
	C.vkCmdResetEvent(*p0, *p1, *p2)
}

func VkCmdWaitEvents(commandBuffer VkCommandBuffer, eventCount uint32, pEvents []VkEvent, srcStageMask VkPipelineStageFlags, dstStageMask VkPipelineStageFlags, memoryBarrierCount uint32, pMemoryBarriers []VkMemoryBarrier, bufferMemoryBarrierCount uint32, pBufferMemoryBarriers []VkBufferMemoryBarrier, imageMemoryBarrierCount uint32, pImageMemoryBarriers []VkImageMemoryBarrier) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&eventCount)
	p2 := func(x *[]VkEvent) **C.VkEvent { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkEvent)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkEvent)(unsafe.Pointer((&ptr)))
	}(&pEvents)
	p3 := /* Identifier */ (*C.VkPipelineStageFlags)(&srcStageMask)
	p4 := /* Identifier */ (*C.VkPipelineStageFlags)(&dstStageMask)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&memoryBarrierCount)
	p6 := func(x *[]VkMemoryBarrier) **C.VkMemoryBarrier { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkMemoryBarrier)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkMemoryBarrier)(unsafe.Pointer((&ptr)))
	}(&pMemoryBarriers)
	p7 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&bufferMemoryBarrierCount)
	p8 := func(x *[]VkBufferMemoryBarrier) **C.VkBufferMemoryBarrier { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBufferMemoryBarrier)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBufferMemoryBarrier)(unsafe.Pointer((&ptr)))
	}(&pBufferMemoryBarriers)
	p9 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&imageMemoryBarrierCount)
	p10 := func(x *[]VkImageMemoryBarrier) **C.VkImageMemoryBarrier { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageMemoryBarrier)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageMemoryBarrier)(unsafe.Pointer((&ptr)))
	}(&pImageMemoryBarriers)
	C.vkCmdWaitEvents(*p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7, *p8, *p9, *p10)
}

func VkCmdPipelineBarrier(commandBuffer VkCommandBuffer, srcStageMask VkPipelineStageFlags, dstStageMask VkPipelineStageFlags, dependencyFlags VkDependencyFlags, memoryBarrierCount uint32, pMemoryBarriers []VkMemoryBarrier, bufferMemoryBarrierCount uint32, pBufferMemoryBarriers []VkBufferMemoryBarrier, imageMemoryBarrierCount uint32, pImageMemoryBarriers []VkImageMemoryBarrier) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkPipelineStageFlags)(&srcStageMask)
	p2 := /* Identifier */ (*C.VkPipelineStageFlags)(&dstStageMask)
	p3 := /* Identifier */ (*C.VkDependencyFlags)(&dependencyFlags)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&memoryBarrierCount)
	p5 := func(x *[]VkMemoryBarrier) **C.VkMemoryBarrier { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkMemoryBarrier)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkMemoryBarrier)(unsafe.Pointer((&ptr)))
	}(&pMemoryBarriers)
	p6 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&bufferMemoryBarrierCount)
	p7 := func(x *[]VkBufferMemoryBarrier) **C.VkBufferMemoryBarrier { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBufferMemoryBarrier)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBufferMemoryBarrier)(unsafe.Pointer((&ptr)))
	}(&pBufferMemoryBarriers)
	p8 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&imageMemoryBarrierCount)
	p9 := func(x *[]VkImageMemoryBarrier) **C.VkImageMemoryBarrier { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageMemoryBarrier)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageMemoryBarrier)(unsafe.Pointer((&ptr)))
	}(&pImageMemoryBarriers)
	C.vkCmdPipelineBarrier(*p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7, *p8, *p9)
}

func VkCmdBeginQuery(commandBuffer VkCommandBuffer, queryPool VkQueryPool, query uint32, flags VkQueryControlFlags) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&query)
	p3 := /* Identifier */ (*C.VkQueryControlFlags)(&flags)
	C.vkCmdBeginQuery(*p0, *p1, *p2, *p3)
}

func VkCmdEndQuery(commandBuffer VkCommandBuffer, queryPool VkQueryPool, query uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&query)
	C.vkCmdEndQuery(*p0, *p1, *p2)
}

func VkCmdResetQueryPool(commandBuffer VkCommandBuffer, queryPool VkQueryPool, firstQuery uint32, queryCount uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstQuery)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&queryCount)
	C.vkCmdResetQueryPool(*p0, *p1, *p2, *p3)
}

func VkCmdWriteTimestamp(commandBuffer VkCommandBuffer, pipelineStage VkPipelineStageFlagBits, queryPool VkQueryPool, query uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkPipelineStageFlagBits)(&pipelineStage)
	p2 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&query)
	C.vkCmdWriteTimestamp(*p0, *p1, *p2, *p3)
}

func VkCmdCopyQueryPoolResults(commandBuffer VkCommandBuffer, queryPool VkQueryPool, firstQuery uint32, queryCount uint32, dstBuffer VkBuffer, dstOffset VkDeviceSize, stride VkDeviceSize, flags VkQueryResultFlags) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstQuery)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&queryCount)
	p4 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&dstBuffer)
	p5 := /* Identifier */ (*C.VkDeviceSize)(&dstOffset)
	p6 := /* Identifier */ (*C.VkDeviceSize)(&stride)
	p7 := /* Identifier */ (*C.VkQueryResultFlags)(&flags)
	C.vkCmdCopyQueryPoolResults(*p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7)
}

func VkCmdPushConstants(commandBuffer VkCommandBuffer, layout VkPipelineLayout, stageFlags VkShaderStageFlags, offset uint32, size uint32, pValues unsafe.Pointer) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkPipelineLayout) *C.VkPipelineLayout { /* Handle */
		return (*C.VkPipelineLayout)(unsafe.Pointer(x))
	}(&layout)
	p2 := /* Identifier */ (*C.VkShaderStageFlags)(&stageFlags)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&offset)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&size)
	p5 := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&pValues)
	C.vkCmdPushConstants(*p0, *p1, *p2, *p3, *p4, *p5)
}

func VkCmdBeginRenderPass(commandBuffer VkCommandBuffer, pRenderPassBegin *VkRenderPassBeginInfo, contents VkSubpassContents) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x **VkRenderPassBeginInfo) **C.VkRenderPassBeginInfo { /* Pointer */
		return (**C.VkRenderPassBeginInfo)(unsafe.Pointer(x))
	}(&pRenderPassBegin)
	p2 := /* Identifier */ (*C.VkSubpassContents)(&contents)
	C.vkCmdBeginRenderPass(*p0, *p1, *p2)
}

func VkCmdNextSubpass(commandBuffer VkCommandBuffer, contents VkSubpassContents) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := /* Identifier */ (*C.VkSubpassContents)(&contents)
	C.vkCmdNextSubpass(*p0, *p1)
}

func VkCmdEndRenderPass(commandBuffer VkCommandBuffer) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	C.vkCmdEndRenderPass(*p0)
}

func VkCmdExecuteCommands(commandBuffer VkCommandBuffer, commandBufferCount uint32, pCommandBuffers []VkCommandBuffer) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&commandBufferCount)
	p2 := func(x *[]VkCommandBuffer) **C.VkCommandBuffer { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkCommandBuffer)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkCommandBuffer)(unsafe.Pointer((&ptr)))
	}(&pCommandBuffers)
	C.vkCmdExecuteCommands(*p0, *p1, *p2)
}

func VkGetPhysicalDeviceFeatures(physicalDevice VkPhysicalDevice, pFeatures *VkPhysicalDeviceFeatures) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceFeatures) **C.VkPhysicalDeviceFeatures { /* Pointer */
		return (**C.VkPhysicalDeviceFeatures)(unsafe.Pointer(x))
	}(&pFeatures)
	C.vkGetPhysicalDeviceFeatures(*p0, *p1)
}

func VkEnumeratePhysicalDevices(instance VkInstance, pPhysicalDeviceCount *uint32, pPhysicalDevices []VkPhysicalDevice) VkResult {
	p0 := func(x *VkInstance) *C.VkInstance { /* Handle */ return (*C.VkInstance)(unsafe.Pointer(x)) }(&instance)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPhysicalDeviceCount)
	p2 := func(x *[]VkPhysicalDevice) **C.VkPhysicalDevice { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPhysicalDevice)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPhysicalDevice)(unsafe.Pointer((&ptr)))
	}(&pPhysicalDevices)
	ret := C.vkEnumeratePhysicalDevices(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyInstance(instance VkInstance, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkInstance) *C.VkInstance { /* Handle */ return (*C.VkInstance)(unsafe.Pointer(x)) }(&instance)
	p1 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyInstance(*p0, *p1)
}

func VkCreateDescriptorPool(device VkDevice, pCreateInfo *VkDescriptorPoolCreateInfo, pAllocator *VkAllocationCallbacks, pDescriptorPool *VkDescriptorPool) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDescriptorPoolCreateInfo) **C.VkDescriptorPoolCreateInfo { /* Pointer */
		return (**C.VkDescriptorPoolCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkDescriptorPool) **C.VkDescriptorPool { /* Pointer */
		return (**C.VkDescriptorPool)(unsafe.Pointer(x))
	}(&pDescriptorPool)
	ret := C.vkCreateDescriptorPool(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCreateInstance(pCreateInfo *VkInstanceCreateInfo, pAllocator *VkAllocationCallbacks, pInstance *VkInstance) VkResult {
	p0 := func(x **VkInstanceCreateInfo) **C.VkInstanceCreateInfo { /* Pointer */
		return (**C.VkInstanceCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p1 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p2 := func(x **VkInstance) **C.VkInstance { /* Pointer */ return (**C.VkInstance)(unsafe.Pointer(x)) }(&pInstance)
	ret := C.vkCreateInstance(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyDescriptorSetLayout(device VkDevice, descriptorSetLayout VkDescriptorSetLayout, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDescriptorSetLayout) *C.VkDescriptorSetLayout { /* Handle */
		return (*C.VkDescriptorSetLayout)(unsafe.Pointer(x))
	}(&descriptorSetLayout)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyDescriptorSetLayout(*p0, *p1, *p2)
}

func VkCreateDescriptorSetLayout(device VkDevice, pCreateInfo *VkDescriptorSetLayoutCreateInfo, pAllocator *VkAllocationCallbacks, pSetLayout *VkDescriptorSetLayout) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDescriptorSetLayoutCreateInfo) **C.VkDescriptorSetLayoutCreateInfo { /* Pointer */
		return (**C.VkDescriptorSetLayoutCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkDescriptorSetLayout) **C.VkDescriptorSetLayout { /* Pointer */
		return (**C.VkDescriptorSetLayout)(unsafe.Pointer(x))
	}(&pSetLayout)
	ret := C.vkCreateDescriptorSetLayout(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkMergePipelineCaches(device VkDevice, dstCache VkPipelineCache, srcCacheCount uint32, pSrcCaches []VkPipelineCache) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkPipelineCache) *C.VkPipelineCache { /* Handle */
		return (*C.VkPipelineCache)(unsafe.Pointer(x))
	}(&dstCache)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&srcCacheCount)
	p3 := func(x *[]VkPipelineCache) **C.VkPipelineCache { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPipelineCache)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPipelineCache)(unsafe.Pointer((&ptr)))
	}(&pSrcCaches)
	ret := C.vkMergePipelineCaches(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCreateGraphicsPipelines(device VkDevice, pipelineCache VkPipelineCache, createInfoCount uint32, pCreateInfos []VkGraphicsPipelineCreateInfo, pAllocator *VkAllocationCallbacks, pPipelines []VkPipeline) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkPipelineCache) *C.VkPipelineCache { /* Handle */
		return (*C.VkPipelineCache)(unsafe.Pointer(x))
	}(&pipelineCache)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&createInfoCount)
	p3 := func(x *[]VkGraphicsPipelineCreateInfo) **C.VkGraphicsPipelineCreateInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkGraphicsPipelineCreateInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkGraphicsPipelineCreateInfo)(unsafe.Pointer((&ptr)))
	}(&pCreateInfos)
	p4 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p5 := func(x *[]VkPipeline) **C.VkPipeline { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPipeline)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPipeline)(unsafe.Pointer((&ptr)))
	}(&pPipelines)
	ret := C.vkCreateGraphicsPipelines(*p0, *p1, *p2, *p3, *p4, *p5)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCreateComputePipelines(device VkDevice, pipelineCache VkPipelineCache, createInfoCount uint32, pCreateInfos []VkComputePipelineCreateInfo, pAllocator *VkAllocationCallbacks, pPipelines []VkPipeline) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkPipelineCache) *C.VkPipelineCache { /* Handle */
		return (*C.VkPipelineCache)(unsafe.Pointer(x))
	}(&pipelineCache)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&createInfoCount)
	p3 := func(x *[]VkComputePipelineCreateInfo) **C.VkComputePipelineCreateInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkComputePipelineCreateInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkComputePipelineCreateInfo)(unsafe.Pointer((&ptr)))
	}(&pCreateInfos)
	p4 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p5 := func(x *[]VkPipeline) **C.VkPipeline { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPipeline)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPipeline)(unsafe.Pointer((&ptr)))
	}(&pPipelines)
	ret := C.vkCreateComputePipelines(*p0, *p1, *p2, *p3, *p4, *p5)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyPipeline(device VkDevice, pipeline VkPipeline, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkPipeline) *C.VkPipeline { /* Handle */ return (*C.VkPipeline)(unsafe.Pointer(x)) }(&pipeline)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyPipeline(*p0, *p1, *p2)
}

func VkCreateSemaphore(device VkDevice, pCreateInfo *VkSemaphoreCreateInfo, pAllocator *VkAllocationCallbacks, pSemaphore *VkSemaphore) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkSemaphoreCreateInfo) **C.VkSemaphoreCreateInfo { /* Pointer */
		return (**C.VkSemaphoreCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkSemaphore) **C.VkSemaphore { /* Pointer */ return (**C.VkSemaphore)(unsafe.Pointer(x)) }(&pSemaphore)
	ret := C.vkCreateSemaphore(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCreatePipelineLayout(device VkDevice, pCreateInfo *VkPipelineLayoutCreateInfo, pAllocator *VkAllocationCallbacks, pPipelineLayout *VkPipelineLayout) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkPipelineLayoutCreateInfo) **C.VkPipelineLayoutCreateInfo { /* Pointer */
		return (**C.VkPipelineLayoutCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkPipelineLayout) **C.VkPipelineLayout { /* Pointer */
		return (**C.VkPipelineLayout)(unsafe.Pointer(x))
	}(&pPipelineLayout)
	ret := C.vkCreatePipelineLayout(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroyPipelineLayout(device VkDevice, pipelineLayout VkPipelineLayout, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkPipelineLayout) *C.VkPipelineLayout { /* Handle */
		return (*C.VkPipelineLayout)(unsafe.Pointer(x))
	}(&pipelineLayout)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyPipelineLayout(*p0, *p1, *p2)
}

func VkCreateSampler(device VkDevice, pCreateInfo *VkSamplerCreateInfo, pAllocator *VkAllocationCallbacks, pSampler *VkSampler) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkSamplerCreateInfo) **C.VkSamplerCreateInfo { /* Pointer */
		return (**C.VkSamplerCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkSampler) **C.VkSampler { /* Pointer */ return (**C.VkSampler)(unsafe.Pointer(x)) }(&pSampler)
	ret := C.vkCreateSampler(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCmdSetDepthBias(commandBuffer VkCommandBuffer, depthBiasConstantFactor float32, depthBiasClamp float32, depthBiasSlopeFactor float32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&depthBiasConstantFactor)
	p2 := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&depthBiasClamp)
	p3 := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&depthBiasSlopeFactor)
	C.vkCmdSetDepthBias(*p0, *p1, *p2, *p3)
}

// VkDescriptorUpdateTemplate is a Handle to a vulkan resource.
type VkDescriptorUpdateTemplate C.VkDescriptorUpdateTemplate

// VkSamplerYcbcrConversion is a Handle to a vulkan resource.
type VkSamplerYcbcrConversion C.VkSamplerYcbcrConversion

type VkExternalFenceHandleTypeFlagBits uint32

const (
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT        VkExternalFenceHandleTypeFlagBits = (1 << 0)
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT     VkExternalFenceHandleTypeFlagBits = (1 << 1)
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT VkExternalFenceHandleTypeFlagBits = (1 << 2)
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT          VkExternalFenceHandleTypeFlagBits = (1 << 3)
)

var (
	reverseVkExternalFenceHandleTypeFlagBits map[VkExternalFenceHandleTypeFlagBits]string = map[VkExternalFenceHandleTypeFlagBits]string{
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT:        "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT",
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT:     "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
		VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT:          "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT",
	}
)

func (x VkExternalFenceHandleTypeFlagBits) String() string {
	if s, ok := reverseVkExternalFenceHandleTypeFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkExternalFenceHandleTypeFlagBits=%d", x)
}

type VkSubgroupFeatureFlagBits uint32

const (
	VK_SUBGROUP_FEATURE_BASIC_BIT            VkSubgroupFeatureFlagBits = (1 << 0)
	VK_SUBGROUP_FEATURE_VOTE_BIT             VkSubgroupFeatureFlagBits = (1 << 1)
	VK_SUBGROUP_FEATURE_ARITHMETIC_BIT       VkSubgroupFeatureFlagBits = (1 << 2)
	VK_SUBGROUP_FEATURE_BALLOT_BIT           VkSubgroupFeatureFlagBits = (1 << 3)
	VK_SUBGROUP_FEATURE_SHUFFLE_BIT          VkSubgroupFeatureFlagBits = (1 << 4)
	VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT VkSubgroupFeatureFlagBits = (1 << 5)
	VK_SUBGROUP_FEATURE_CLUSTERED_BIT        VkSubgroupFeatureFlagBits = (1 << 6)
	VK_SUBGROUP_FEATURE_QUAD_BIT             VkSubgroupFeatureFlagBits = (1 << 7)
)

var (
	reverseVkSubgroupFeatureFlagBits map[VkSubgroupFeatureFlagBits]string = map[VkSubgroupFeatureFlagBits]string{
		VK_SUBGROUP_FEATURE_BASIC_BIT:            "VK_SUBGROUP_FEATURE_BASIC_BIT",
		VK_SUBGROUP_FEATURE_VOTE_BIT:             "VK_SUBGROUP_FEATURE_VOTE_BIT",
		VK_SUBGROUP_FEATURE_ARITHMETIC_BIT:       "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT",
		VK_SUBGROUP_FEATURE_BALLOT_BIT:           "VK_SUBGROUP_FEATURE_BALLOT_BIT",
		VK_SUBGROUP_FEATURE_SHUFFLE_BIT:          "VK_SUBGROUP_FEATURE_SHUFFLE_BIT",
		VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT",
		VK_SUBGROUP_FEATURE_CLUSTERED_BIT:        "VK_SUBGROUP_FEATURE_CLUSTERED_BIT",
		VK_SUBGROUP_FEATURE_QUAD_BIT:             "VK_SUBGROUP_FEATURE_QUAD_BIT",
	}
)

func (x VkSubgroupFeatureFlagBits) String() string {
	if s, ok := reverseVkSubgroupFeatureFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSubgroupFeatureFlagBits=%d", x)
}

type VkExternalMemoryHandleTypeFlagBits uint32

const (
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT         VkExternalMemoryHandleTypeFlagBits = (1 << 0)
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT      VkExternalMemoryHandleTypeFlagBits = (1 << 1)
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT  VkExternalMemoryHandleTypeFlagBits = (1 << 2)
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT     VkExternalMemoryHandleTypeFlagBits = (1 << 3)
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT VkExternalMemoryHandleTypeFlagBits = (1 << 4)
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT        VkExternalMemoryHandleTypeFlagBits = (1 << 5)
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT    VkExternalMemoryHandleTypeFlagBits = (1 << 6)
)

var (
	reverseVkExternalMemoryHandleTypeFlagBits map[VkExternalMemoryHandleTypeFlagBits]string = map[VkExternalMemoryHandleTypeFlagBits]string{
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT:         "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT",
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT:      "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT",
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:  "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT:     "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT",
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT",
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT:        "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT",
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT:    "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT",
	}
)

func (x VkExternalMemoryHandleTypeFlagBits) String() string {
	if s, ok := reverseVkExternalMemoryHandleTypeFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkExternalMemoryHandleTypeFlagBits=%d", x)
}

type VkExternalFenceFeatureFlagBits uint32

const (
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT VkExternalFenceFeatureFlagBits = (1 << 0)
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT VkExternalFenceFeatureFlagBits = (1 << 1)
)

var (
	reverseVkExternalFenceFeatureFlagBits map[VkExternalFenceFeatureFlagBits]string = map[VkExternalFenceFeatureFlagBits]string{
		VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT",
		VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT",
	}
)

func (x VkExternalFenceFeatureFlagBits) String() string {
	if s, ok := reverseVkExternalFenceFeatureFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkExternalFenceFeatureFlagBits=%d", x)
}

type VkDescriptorUpdateTemplateType uint32

const (
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET VkDescriptorUpdateTemplateType = 0
)

var (
	reverseVkDescriptorUpdateTemplateType map[VkDescriptorUpdateTemplateType]string = map[VkDescriptorUpdateTemplateType]string{
		VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET",
	}
)

func (x VkDescriptorUpdateTemplateType) String() string {
	if s, ok := reverseVkDescriptorUpdateTemplateType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDescriptorUpdateTemplateType=%d", x)
}

type VkSamplerYcbcrRange uint32

const (
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL   VkSamplerYcbcrRange = 0
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW VkSamplerYcbcrRange = 1
)

var (
	reverseVkSamplerYcbcrRange map[VkSamplerYcbcrRange]string = map[VkSamplerYcbcrRange]string{
		VK_SAMPLER_YCBCR_RANGE_ITU_FULL:   "VK_SAMPLER_YCBCR_RANGE_ITU_FULL",
		VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW",
	}
)

func (x VkSamplerYcbcrRange) String() string {
	if s, ok := reverseVkSamplerYcbcrRange[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSamplerYcbcrRange=%d", x)
}

type VkExternalSemaphoreHandleTypeFlagBits uint32

const (
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT        VkExternalSemaphoreHandleTypeFlagBits = (1 << 0)
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT     VkExternalSemaphoreHandleTypeFlagBits = (1 << 1)
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT VkExternalSemaphoreHandleTypeFlagBits = (1 << 2)
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT      VkExternalSemaphoreHandleTypeFlagBits = (1 << 3)
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT      VkExternalSemaphoreHandleTypeFlagBits = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT          VkExternalSemaphoreHandleTypeFlagBits = (1 << 4)
)

var (
	reverseVkExternalSemaphoreHandleTypeFlagBits map[VkExternalSemaphoreHandleTypeFlagBits]string = map[VkExternalSemaphoreHandleTypeFlagBits]string{
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT:        "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT",
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT:     "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT:      "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT",
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT:          "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT",
	}
)

func (x VkExternalSemaphoreHandleTypeFlagBits) String() string {
	if s, ok := reverseVkExternalSemaphoreHandleTypeFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkExternalSemaphoreHandleTypeFlagBits=%d", x)
}

type VkChromaLocation uint32

const (
	VK_CHROMA_LOCATION_COSITED_EVEN VkChromaLocation = 0
	VK_CHROMA_LOCATION_MIDPOINT     VkChromaLocation = 1
)

var (
	reverseVkChromaLocation map[VkChromaLocation]string = map[VkChromaLocation]string{
		VK_CHROMA_LOCATION_COSITED_EVEN: "VK_CHROMA_LOCATION_COSITED_EVEN",
		VK_CHROMA_LOCATION_MIDPOINT:     "VK_CHROMA_LOCATION_MIDPOINT",
	}
)

func (x VkChromaLocation) String() string {
	if s, ok := reverseVkChromaLocation[x]; ok {
		return s
	}
	return fmt.Sprintf("VkChromaLocation=%d", x)
}

type VkSamplerYcbcrModelConversion uint32

const (
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY   VkSamplerYcbcrModelConversion = 0
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY VkSamplerYcbcrModelConversion = 1
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709      VkSamplerYcbcrModelConversion = 2
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601      VkSamplerYcbcrModelConversion = 3
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020     VkSamplerYcbcrModelConversion = 4
)

var (
	reverseVkSamplerYcbcrModelConversion map[VkSamplerYcbcrModelConversion]string = map[VkSamplerYcbcrModelConversion]string{
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:   "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY",
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY",
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:      "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709",
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:      "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601",
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:     "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020",
	}
)

func (x VkSamplerYcbcrModelConversion) String() string {
	if s, ok := reverseVkSamplerYcbcrModelConversion[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSamplerYcbcrModelConversion=%d", x)
}

type VkFenceImportFlagBits uint32

const (
	VK_FENCE_IMPORT_TEMPORARY_BIT VkFenceImportFlagBits = (1 << 0)
)

var (
	reverseVkFenceImportFlagBits map[VkFenceImportFlagBits]string = map[VkFenceImportFlagBits]string{
		VK_FENCE_IMPORT_TEMPORARY_BIT: "VK_FENCE_IMPORT_TEMPORARY_BIT",
	}
)

func (x VkFenceImportFlagBits) String() string {
	if s, ok := reverseVkFenceImportFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkFenceImportFlagBits=%d", x)
}

type VkPointClippingBehavior uint32

const (
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES       VkPointClippingBehavior = 0
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY VkPointClippingBehavior = 1
)

var (
	reverseVkPointClippingBehavior map[VkPointClippingBehavior]string = map[VkPointClippingBehavior]string{
		VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES:       "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES",
		VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY",
	}
)

func (x VkPointClippingBehavior) String() string {
	if s, ok := reverseVkPointClippingBehavior[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPointClippingBehavior=%d", x)
}

type VkExternalSemaphoreFeatureFlagBits uint32

const (
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT VkExternalSemaphoreFeatureFlagBits = (1 << 0)
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT VkExternalSemaphoreFeatureFlagBits = (1 << 1)
)

var (
	reverseVkExternalSemaphoreFeatureFlagBits map[VkExternalSemaphoreFeatureFlagBits]string = map[VkExternalSemaphoreFeatureFlagBits]string{
		VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT",
		VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT",
	}
)

func (x VkExternalSemaphoreFeatureFlagBits) String() string {
	if s, ok := reverseVkExternalSemaphoreFeatureFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkExternalSemaphoreFeatureFlagBits=%d", x)
}

type VkTessellationDomainOrigin uint32

const (
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT VkTessellationDomainOrigin = 0
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT VkTessellationDomainOrigin = 1
)

var (
	reverseVkTessellationDomainOrigin map[VkTessellationDomainOrigin]string = map[VkTessellationDomainOrigin]string{
		VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT",
		VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT",
	}
)

func (x VkTessellationDomainOrigin) String() string {
	if s, ok := reverseVkTessellationDomainOrigin[x]; ok {
		return s
	}
	return fmt.Sprintf("VkTessellationDomainOrigin=%d", x)
}

type VkExternalMemoryFeatureFlagBits uint32

const (
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT VkExternalMemoryFeatureFlagBits = (1 << 0)
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT     VkExternalMemoryFeatureFlagBits = (1 << 1)
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT     VkExternalMemoryFeatureFlagBits = (1 << 2)
)

var (
	reverseVkExternalMemoryFeatureFlagBits map[VkExternalMemoryFeatureFlagBits]string = map[VkExternalMemoryFeatureFlagBits]string{
		VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT",
		VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT:     "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT",
		VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT:     "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT",
	}
)

func (x VkExternalMemoryFeatureFlagBits) String() string {
	if s, ok := reverseVkExternalMemoryFeatureFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkExternalMemoryFeatureFlagBits=%d", x)
}

type VkPeerMemoryFeatureFlagBits uint32

const (
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT    VkPeerMemoryFeatureFlagBits = (1 << 0)
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT    VkPeerMemoryFeatureFlagBits = (1 << 1)
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT VkPeerMemoryFeatureFlagBits = (1 << 2)
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT VkPeerMemoryFeatureFlagBits = (1 << 3)
)

var (
	reverseVkPeerMemoryFeatureFlagBits map[VkPeerMemoryFeatureFlagBits]string = map[VkPeerMemoryFeatureFlagBits]string{
		VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT:    "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT",
		VK_PEER_MEMORY_FEATURE_COPY_DST_BIT:    "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT",
		VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT",
		VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT",
	}
)

func (x VkPeerMemoryFeatureFlagBits) String() string {
	if s, ok := reverseVkPeerMemoryFeatureFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPeerMemoryFeatureFlagBits=%d", x)
}

type VkMemoryAllocateFlagBits uint32

const (
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT                   VkMemoryAllocateFlagBits = (1 << 0)
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT                VkMemoryAllocateFlagBits = (1 << 1)
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT VkMemoryAllocateFlagBits = (1 << 2)
)

var (
	reverseVkMemoryAllocateFlagBits map[VkMemoryAllocateFlagBits]string = map[VkMemoryAllocateFlagBits]string{
		VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT:                   "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT",
		VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT:                "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT",
		VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
	}
)

func (x VkMemoryAllocateFlagBits) String() string {
	if s, ok := reverseVkMemoryAllocateFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkMemoryAllocateFlagBits=%d", x)
}

type VkSemaphoreImportFlagBits uint32

const (
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT VkSemaphoreImportFlagBits = (1 << 0)
)

var (
	reverseVkSemaphoreImportFlagBits map[VkSemaphoreImportFlagBits]string = map[VkSemaphoreImportFlagBits]string{
		VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT",
	}
)

func (x VkSemaphoreImportFlagBits) String() string {
	if s, ok := reverseVkSemaphoreImportFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSemaphoreImportFlagBits=%d", x)
}

type VkMemoryAllocateFlags VkFlags

type VkPeerMemoryFeatureFlags VkFlags

type VkExternalFenceHandleTypeFlags VkFlags

type VkCommandPoolTrimFlags VkFlags

type VkExternalFenceFeatureFlags VkFlags

type VkDescriptorUpdateTemplateCreateFlags VkFlags

type VkExternalSemaphoreFeatureFlags VkFlags

type VkExternalMemoryHandleTypeFlags VkFlags

type VkFenceImportFlags VkFlags

type VkSubgroupFeatureFlags VkFlags

type VkExternalSemaphoreHandleTypeFlags VkFlags

type VkExternalMemoryFeatureFlags VkFlags

type VkSemaphoreImportFlags VkFlags

//VkPhysicalDeviceMemoryProperties2 provides a go interface for VkPhysicalDeviceMemoryProperties2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMemoryProperties2.html
type VkPhysicalDeviceMemoryProperties2 C.struct_VkPhysicalDeviceMemoryProperties2

// NewVkPhysicalDeviceMemoryProperties2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceMemoryProperties2() *VkPhysicalDeviceMemoryProperties2 {
	sz := unsafe.Sizeof(VkPhysicalDeviceMemoryProperties2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceMemoryProperties2)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceMemoryProperties2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceMemoryProperties2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceMemoryProperties2) AsPtr() *VkPhysicalDeviceMemoryProperties2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceMemoryProperties2) AsCPtr() *VkPhysicalDeviceMemoryProperties2 {
	clone := newVkPhysicalDeviceMemoryProperties2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceMemoryProperties2
func (x VkPhysicalDeviceMemoryProperties2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceMemoryProperties2) WithDefaultSType() *VkPhysicalDeviceMemoryProperties2 {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceMemoryProperties2
func (x *VkPhysicalDeviceMemoryProperties2) WithSType(y VkStructureType) *VkPhysicalDeviceMemoryProperties2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceMemoryProperties2
func (x VkPhysicalDeviceMemoryProperties2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceMemoryProperties2
func (x *VkPhysicalDeviceMemoryProperties2) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceMemoryProperties2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MemoryProperties returns the value of memoryProperties from VkPhysicalDeviceMemoryProperties2
func (x VkPhysicalDeviceMemoryProperties2) MemoryProperties() VkPhysicalDeviceMemoryProperties {
	ptr := /* Identifier */ (*VkPhysicalDeviceMemoryProperties)(&x.memoryProperties)
	return *ptr
}

//VkImageMemoryRequirementsInfo2 provides a go interface for VkImageMemoryRequirementsInfo2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryRequirementsInfo2.html
type VkImageMemoryRequirementsInfo2 C.struct_VkImageMemoryRequirementsInfo2

// NewVkImageMemoryRequirementsInfo2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageMemoryRequirementsInfo2() *VkImageMemoryRequirementsInfo2 {
	sz := unsafe.Sizeof(VkImageMemoryRequirementsInfo2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageMemoryRequirementsInfo2)(ptr)
}

// Free releases the memory allocated by the NewVkImageMemoryRequirementsInfo2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageMemoryRequirementsInfo2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageMemoryRequirementsInfo2) AsPtr() *VkImageMemoryRequirementsInfo2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageMemoryRequirementsInfo2) AsCPtr() *VkImageMemoryRequirementsInfo2 {
	clone := newVkImageMemoryRequirementsInfo2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageMemoryRequirementsInfo2
func (x VkImageMemoryRequirementsInfo2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageMemoryRequirementsInfo2) WithDefaultSType() *VkImageMemoryRequirementsInfo2 {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageMemoryRequirementsInfo2
func (x *VkImageMemoryRequirementsInfo2) WithSType(y VkStructureType) *VkImageMemoryRequirementsInfo2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageMemoryRequirementsInfo2
func (x VkImageMemoryRequirementsInfo2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageMemoryRequirementsInfo2
func (x *VkImageMemoryRequirementsInfo2) WithPNext(y unsafe.Pointer) *VkImageMemoryRequirementsInfo2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Image returns the value of image from VkImageMemoryRequirementsInfo2
func (x VkImageMemoryRequirementsInfo2) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkImageMemoryRequirementsInfo2
func (x *VkImageMemoryRequirementsInfo2) WithImage(y VkImage) *VkImageMemoryRequirementsInfo2 {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

//VkImageSparseMemoryRequirementsInfo2 provides a go interface for VkImageSparseMemoryRequirementsInfo2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSparseMemoryRequirementsInfo2.html
type VkImageSparseMemoryRequirementsInfo2 C.struct_VkImageSparseMemoryRequirementsInfo2

// NewVkImageSparseMemoryRequirementsInfo2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageSparseMemoryRequirementsInfo2() *VkImageSparseMemoryRequirementsInfo2 {
	sz := unsafe.Sizeof(VkImageSparseMemoryRequirementsInfo2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageSparseMemoryRequirementsInfo2)(ptr)
}

// Free releases the memory allocated by the NewVkImageSparseMemoryRequirementsInfo2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageSparseMemoryRequirementsInfo2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageSparseMemoryRequirementsInfo2) AsPtr() *VkImageSparseMemoryRequirementsInfo2 {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageSparseMemoryRequirementsInfo2) AsCPtr() *VkImageSparseMemoryRequirementsInfo2 {
	clone := newVkImageSparseMemoryRequirementsInfo2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageSparseMemoryRequirementsInfo2
func (x VkImageSparseMemoryRequirementsInfo2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageSparseMemoryRequirementsInfo2) WithDefaultSType() *VkImageSparseMemoryRequirementsInfo2 {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageSparseMemoryRequirementsInfo2
func (x *VkImageSparseMemoryRequirementsInfo2) WithSType(y VkStructureType) *VkImageSparseMemoryRequirementsInfo2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageSparseMemoryRequirementsInfo2
func (x VkImageSparseMemoryRequirementsInfo2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageSparseMemoryRequirementsInfo2
func (x *VkImageSparseMemoryRequirementsInfo2) WithPNext(y unsafe.Pointer) *VkImageSparseMemoryRequirementsInfo2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Image returns the value of image from VkImageSparseMemoryRequirementsInfo2
func (x VkImageSparseMemoryRequirementsInfo2) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkImageSparseMemoryRequirementsInfo2
func (x *VkImageSparseMemoryRequirementsInfo2) WithImage(y VkImage) *VkImageSparseMemoryRequirementsInfo2 {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

//VkMemoryRequirements2 provides a go interface for VkMemoryRequirements2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryRequirements2.html
type VkMemoryRequirements2 C.struct_VkMemoryRequirements2

// NewVkMemoryRequirements2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryRequirements2() *VkMemoryRequirements2 {
	sz := unsafe.Sizeof(VkMemoryRequirements2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryRequirements2)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryRequirements2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryRequirements2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryRequirements2) AsPtr() *VkMemoryRequirements2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryRequirements2) AsCPtr() *VkMemoryRequirements2 {
	clone := newVkMemoryRequirements2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMemoryRequirements2
func (x VkMemoryRequirements2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMemoryRequirements2) WithDefaultSType() *VkMemoryRequirements2 {
	return x.WithSType(VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMemoryRequirements2
func (x *VkMemoryRequirements2) WithSType(y VkStructureType) *VkMemoryRequirements2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMemoryRequirements2
func (x VkMemoryRequirements2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMemoryRequirements2
func (x *VkMemoryRequirements2) WithPNext(y unsafe.Pointer) *VkMemoryRequirements2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MemoryRequirements returns the value of memoryRequirements from VkMemoryRequirements2
func (x VkMemoryRequirements2) MemoryRequirements() VkMemoryRequirements {
	ptr := /* Identifier */ (*VkMemoryRequirements)(&x.memoryRequirements)
	return *ptr
}

//VkSparseImageMemoryRequirements2 provides a go interface for VkSparseImageMemoryRequirements2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryRequirements2.html
type VkSparseImageMemoryRequirements2 C.struct_VkSparseImageMemoryRequirements2

// NewVkSparseImageMemoryRequirements2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseImageMemoryRequirements2() *VkSparseImageMemoryRequirements2 {
	sz := unsafe.Sizeof(VkSparseImageMemoryRequirements2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseImageMemoryRequirements2)(ptr)
}

// Free releases the memory allocated by the NewVkSparseImageMemoryRequirements2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseImageMemoryRequirements2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseImageMemoryRequirements2) AsPtr() *VkSparseImageMemoryRequirements2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseImageMemoryRequirements2) AsCPtr() *VkSparseImageMemoryRequirements2 {
	clone := newVkSparseImageMemoryRequirements2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSparseImageMemoryRequirements2
func (x VkSparseImageMemoryRequirements2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSparseImageMemoryRequirements2) WithDefaultSType() *VkSparseImageMemoryRequirements2 {
	return x.WithSType(VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSparseImageMemoryRequirements2
func (x *VkSparseImageMemoryRequirements2) WithSType(y VkStructureType) *VkSparseImageMemoryRequirements2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSparseImageMemoryRequirements2
func (x VkSparseImageMemoryRequirements2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSparseImageMemoryRequirements2
func (x *VkSparseImageMemoryRequirements2) WithPNext(y unsafe.Pointer) *VkSparseImageMemoryRequirements2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MemoryRequirements returns the value of memoryRequirements from VkSparseImageMemoryRequirements2
func (x VkSparseImageMemoryRequirements2) MemoryRequirements() VkSparseImageMemoryRequirements {
	ptr := /* Identifier */ (*VkSparseImageMemoryRequirements)(&x.memoryRequirements)
	return *ptr
}

//VkBufferMemoryRequirementsInfo2 provides a go interface for VkBufferMemoryRequirementsInfo2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryRequirementsInfo2.html
type VkBufferMemoryRequirementsInfo2 C.struct_VkBufferMemoryRequirementsInfo2

// NewVkBufferMemoryRequirementsInfo2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferMemoryRequirementsInfo2() *VkBufferMemoryRequirementsInfo2 {
	sz := unsafe.Sizeof(VkBufferMemoryRequirementsInfo2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferMemoryRequirementsInfo2)(ptr)
}

// Free releases the memory allocated by the NewVkBufferMemoryRequirementsInfo2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferMemoryRequirementsInfo2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferMemoryRequirementsInfo2) AsPtr() *VkBufferMemoryRequirementsInfo2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferMemoryRequirementsInfo2) AsCPtr() *VkBufferMemoryRequirementsInfo2 {
	clone := newVkBufferMemoryRequirementsInfo2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBufferMemoryRequirementsInfo2
func (x VkBufferMemoryRequirementsInfo2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBufferMemoryRequirementsInfo2) WithDefaultSType() *VkBufferMemoryRequirementsInfo2 {
	return x.WithSType(VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBufferMemoryRequirementsInfo2
func (x *VkBufferMemoryRequirementsInfo2) WithSType(y VkStructureType) *VkBufferMemoryRequirementsInfo2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBufferMemoryRequirementsInfo2
func (x VkBufferMemoryRequirementsInfo2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBufferMemoryRequirementsInfo2
func (x *VkBufferMemoryRequirementsInfo2) WithPNext(y unsafe.Pointer) *VkBufferMemoryRequirementsInfo2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Buffer returns the value of buffer from VkBufferMemoryRequirementsInfo2
func (x VkBufferMemoryRequirementsInfo2) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkBufferMemoryRequirementsInfo2
func (x *VkBufferMemoryRequirementsInfo2) WithBuffer(y VkBuffer) *VkBufferMemoryRequirementsInfo2 {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

//VkExportFenceCreateInfo provides a go interface for VkExportFenceCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportFenceCreateInfo.html
type VkExportFenceCreateInfo C.struct_VkExportFenceCreateInfo

// NewVkExportFenceCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExportFenceCreateInfo() *VkExportFenceCreateInfo {
	sz := unsafe.Sizeof(VkExportFenceCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExportFenceCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkExportFenceCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExportFenceCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExportFenceCreateInfo) AsPtr() *VkExportFenceCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExportFenceCreateInfo) AsCPtr() *VkExportFenceCreateInfo {
	clone := newVkExportFenceCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExportFenceCreateInfo
func (x VkExportFenceCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExportFenceCreateInfo) WithDefaultSType() *VkExportFenceCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExportFenceCreateInfo
func (x *VkExportFenceCreateInfo) WithSType(y VkStructureType) *VkExportFenceCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExportFenceCreateInfo
func (x VkExportFenceCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExportFenceCreateInfo
func (x *VkExportFenceCreateInfo) WithPNext(y unsafe.Pointer) *VkExportFenceCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleTypes returns the value of handleTypes from VkExportFenceCreateInfo
func (x VkExportFenceCreateInfo) HandleTypes() VkExternalFenceHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalFenceHandleTypeFlags)(&x.handleTypes)
	return *ptr
}

// WithHandleTypes copies the provided value into C space and stores it
// at handleTypes on VkExportFenceCreateInfo
func (x *VkExportFenceCreateInfo) WithHandleTypes(y VkExternalFenceHandleTypeFlags) *VkExportFenceCreateInfo {
	ptr := /* Identifier */ (*C.VkExternalFenceHandleTypeFlags)(&y)
	x.handleTypes = *ptr
	return x
}

//VkExportSemaphoreCreateInfo provides a go interface for VkExportSemaphoreCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportSemaphoreCreateInfo.html
type VkExportSemaphoreCreateInfo C.struct_VkExportSemaphoreCreateInfo

// NewVkExportSemaphoreCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExportSemaphoreCreateInfo() *VkExportSemaphoreCreateInfo {
	sz := unsafe.Sizeof(VkExportSemaphoreCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExportSemaphoreCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkExportSemaphoreCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExportSemaphoreCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExportSemaphoreCreateInfo) AsPtr() *VkExportSemaphoreCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExportSemaphoreCreateInfo) AsCPtr() *VkExportSemaphoreCreateInfo {
	clone := newVkExportSemaphoreCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExportSemaphoreCreateInfo
func (x VkExportSemaphoreCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExportSemaphoreCreateInfo) WithDefaultSType() *VkExportSemaphoreCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExportSemaphoreCreateInfo
func (x *VkExportSemaphoreCreateInfo) WithSType(y VkStructureType) *VkExportSemaphoreCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExportSemaphoreCreateInfo
func (x VkExportSemaphoreCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExportSemaphoreCreateInfo
func (x *VkExportSemaphoreCreateInfo) WithPNext(y unsafe.Pointer) *VkExportSemaphoreCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleTypes returns the value of handleTypes from VkExportSemaphoreCreateInfo
func (x VkExportSemaphoreCreateInfo) HandleTypes() VkExternalSemaphoreHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalSemaphoreHandleTypeFlags)(&x.handleTypes)
	return *ptr
}

// WithHandleTypes copies the provided value into C space and stores it
// at handleTypes on VkExportSemaphoreCreateInfo
func (x *VkExportSemaphoreCreateInfo) WithHandleTypes(y VkExternalSemaphoreHandleTypeFlags) *VkExportSemaphoreCreateInfo {
	ptr := /* Identifier */ (*C.VkExternalSemaphoreHandleTypeFlags)(&y)
	x.handleTypes = *ptr
	return x
}

//VkDeviceGroupDeviceCreateInfo provides a go interface for VkDeviceGroupDeviceCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupDeviceCreateInfo.html
type VkDeviceGroupDeviceCreateInfo C.struct_VkDeviceGroupDeviceCreateInfo

// NewVkDeviceGroupDeviceCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupDeviceCreateInfo() *VkDeviceGroupDeviceCreateInfo {
	sz := unsafe.Sizeof(VkDeviceGroupDeviceCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupDeviceCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupDeviceCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupDeviceCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupDeviceCreateInfo) AsPtr() *VkDeviceGroupDeviceCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupDeviceCreateInfo) AsCPtr() *VkDeviceGroupDeviceCreateInfo {
	clone := newVkDeviceGroupDeviceCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupDeviceCreateInfo
func (x VkDeviceGroupDeviceCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupDeviceCreateInfo) WithDefaultSType() *VkDeviceGroupDeviceCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupDeviceCreateInfo
func (x *VkDeviceGroupDeviceCreateInfo) WithSType(y VkStructureType) *VkDeviceGroupDeviceCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupDeviceCreateInfo
func (x VkDeviceGroupDeviceCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupDeviceCreateInfo
func (x *VkDeviceGroupDeviceCreateInfo) WithPNext(y unsafe.Pointer) *VkDeviceGroupDeviceCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PhysicalDeviceCount returns the value of physicalDeviceCount from VkDeviceGroupDeviceCreateInfo
func (x VkDeviceGroupDeviceCreateInfo) PhysicalDeviceCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.physicalDeviceCount)
	return *ptr
}

// WithPhysicalDeviceCount copies the provided value into C space and stores it
// at physicalDeviceCount on VkDeviceGroupDeviceCreateInfo
func (x *VkDeviceGroupDeviceCreateInfo) WithPhysicalDeviceCount(y uint32) *VkDeviceGroupDeviceCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.physicalDeviceCount = *ptr
	return x
}

// PPhysicalDevices returns the value of pPhysicalDevices from VkDeviceGroupDeviceCreateInfo
func (x VkDeviceGroupDeviceCreateInfo) PPhysicalDevices() []VkPhysicalDevice {
	ptr := func(x **C.VkPhysicalDevice) *[]VkPhysicalDevice { /* Slice */
		slc := unsafe.Slice((*VkPhysicalDevice)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pPhysicalDevices)
	return *ptr
}

// WithPPhysicalDevices copies the provided value into C space and stores it
// at pPhysicalDevices on VkDeviceGroupDeviceCreateInfo
func (x *VkDeviceGroupDeviceCreateInfo) WithPPhysicalDevices(y []VkPhysicalDevice) *VkDeviceGroupDeviceCreateInfo {
	ptr := func(x *[]VkPhysicalDevice) **C.VkPhysicalDevice { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPhysicalDevice)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPhysicalDevice)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pPhysicalDevices = *ptr
	return x
}

//VkExternalFenceProperties provides a go interface for VkExternalFenceProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalFenceProperties.html
type VkExternalFenceProperties C.struct_VkExternalFenceProperties

// NewVkExternalFenceProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExternalFenceProperties() *VkExternalFenceProperties {
	sz := unsafe.Sizeof(VkExternalFenceProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExternalFenceProperties)(ptr)
}

// Free releases the memory allocated by the NewVkExternalFenceProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExternalFenceProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExternalFenceProperties) AsPtr() *VkExternalFenceProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExternalFenceProperties) AsCPtr() *VkExternalFenceProperties {
	clone := newVkExternalFenceProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExternalFenceProperties
func (x VkExternalFenceProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExternalFenceProperties) WithDefaultSType() *VkExternalFenceProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExternalFenceProperties
func (x *VkExternalFenceProperties) WithSType(y VkStructureType) *VkExternalFenceProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExternalFenceProperties
func (x VkExternalFenceProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExternalFenceProperties
func (x *VkExternalFenceProperties) WithPNext(y unsafe.Pointer) *VkExternalFenceProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ExportFromImportedHandleTypes returns the value of exportFromImportedHandleTypes from VkExternalFenceProperties
func (x VkExternalFenceProperties) ExportFromImportedHandleTypes() VkExternalFenceHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalFenceHandleTypeFlags)(&x.exportFromImportedHandleTypes)
	return *ptr
}

// CompatibleHandleTypes returns the value of compatibleHandleTypes from VkExternalFenceProperties
func (x VkExternalFenceProperties) CompatibleHandleTypes() VkExternalFenceHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalFenceHandleTypeFlags)(&x.compatibleHandleTypes)
	return *ptr
}

// ExternalFenceFeatures returns the value of externalFenceFeatures from VkExternalFenceProperties
func (x VkExternalFenceProperties) ExternalFenceFeatures() VkExternalFenceFeatureFlags {
	ptr := /* Identifier */ (*VkExternalFenceFeatureFlags)(&x.externalFenceFeatures)
	return *ptr
}

//VkPhysicalDeviceExternalFenceInfo provides a go interface for VkPhysicalDeviceExternalFenceInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalFenceInfo.html
type VkPhysicalDeviceExternalFenceInfo C.struct_VkPhysicalDeviceExternalFenceInfo

// NewVkPhysicalDeviceExternalFenceInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceExternalFenceInfo() *VkPhysicalDeviceExternalFenceInfo {
	sz := unsafe.Sizeof(VkPhysicalDeviceExternalFenceInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceExternalFenceInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceExternalFenceInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceExternalFenceInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceExternalFenceInfo) AsPtr() *VkPhysicalDeviceExternalFenceInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceExternalFenceInfo) AsCPtr() *VkPhysicalDeviceExternalFenceInfo {
	clone := newVkPhysicalDeviceExternalFenceInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceExternalFenceInfo
func (x VkPhysicalDeviceExternalFenceInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceExternalFenceInfo) WithDefaultSType() *VkPhysicalDeviceExternalFenceInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceExternalFenceInfo
func (x *VkPhysicalDeviceExternalFenceInfo) WithSType(y VkStructureType) *VkPhysicalDeviceExternalFenceInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceExternalFenceInfo
func (x VkPhysicalDeviceExternalFenceInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceExternalFenceInfo
func (x *VkPhysicalDeviceExternalFenceInfo) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceExternalFenceInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleType returns the value of handleType from VkPhysicalDeviceExternalFenceInfo
func (x VkPhysicalDeviceExternalFenceInfo) HandleType() VkExternalFenceHandleTypeFlagBits {
	ptr := /* Identifier */ (*VkExternalFenceHandleTypeFlagBits)(&x.handleType)
	return *ptr
}

// WithHandleType copies the provided value into C space and stores it
// at handleType on VkPhysicalDeviceExternalFenceInfo
func (x *VkPhysicalDeviceExternalFenceInfo) WithHandleType(y VkExternalFenceHandleTypeFlagBits) *VkPhysicalDeviceExternalFenceInfo {
	ptr := /* Identifier */ (*C.VkExternalFenceHandleTypeFlagBits)(&y)
	x.handleType = *ptr
	return x
}

//VkPhysicalDeviceGroupProperties provides a go interface for VkPhysicalDeviceGroupProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceGroupProperties.html
type VkPhysicalDeviceGroupProperties C.struct_VkPhysicalDeviceGroupProperties

// NewVkPhysicalDeviceGroupProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceGroupProperties() *VkPhysicalDeviceGroupProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceGroupProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceGroupProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceGroupProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceGroupProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceGroupProperties) AsPtr() *VkPhysicalDeviceGroupProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceGroupProperties) AsCPtr() *VkPhysicalDeviceGroupProperties {
	clone := newVkPhysicalDeviceGroupProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceGroupProperties
func (x VkPhysicalDeviceGroupProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceGroupProperties) WithDefaultSType() *VkPhysicalDeviceGroupProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceGroupProperties
func (x *VkPhysicalDeviceGroupProperties) WithSType(y VkStructureType) *VkPhysicalDeviceGroupProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceGroupProperties
func (x VkPhysicalDeviceGroupProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceGroupProperties
func (x *VkPhysicalDeviceGroupProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceGroupProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PhysicalDeviceCount returns the value of physicalDeviceCount from VkPhysicalDeviceGroupProperties
func (x VkPhysicalDeviceGroupProperties) PhysicalDeviceCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.physicalDeviceCount)
	return *ptr
}

// PhysicalDevices returns the value of physicalDevices from VkPhysicalDeviceGroupProperties
func (x VkPhysicalDeviceGroupProperties) PhysicalDevices() []VkPhysicalDevice {
	ptr := func(x *[VK_MAX_DEVICE_GROUP_SIZE]C.VkPhysicalDevice) *[]VkPhysicalDevice { /* Array */
		slc := unsafe.Slice((*VkPhysicalDevice)(unsafe.Pointer(x)), VK_MAX_DEVICE_GROUP_SIZE)
		return &slc
	}(&x.physicalDevices)
	return *ptr
}

// SubsetAllocation returns the value of subsetAllocation from VkPhysicalDeviceGroupProperties
func (x VkPhysicalDeviceGroupProperties) SubsetAllocation() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.subsetAllocation)
	return *ptr
}

//VkPhysicalDeviceFeatures2 provides a go interface for VkPhysicalDeviceFeatures2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFeatures2.html
type VkPhysicalDeviceFeatures2 C.struct_VkPhysicalDeviceFeatures2

// NewVkPhysicalDeviceFeatures2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceFeatures2() *VkPhysicalDeviceFeatures2 {
	sz := unsafe.Sizeof(VkPhysicalDeviceFeatures2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceFeatures2)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceFeatures2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceFeatures2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceFeatures2) AsPtr() *VkPhysicalDeviceFeatures2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceFeatures2) AsCPtr() *VkPhysicalDeviceFeatures2 {
	clone := newVkPhysicalDeviceFeatures2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceFeatures2
func (x VkPhysicalDeviceFeatures2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceFeatures2) WithDefaultSType() *VkPhysicalDeviceFeatures2 {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceFeatures2
func (x *VkPhysicalDeviceFeatures2) WithSType(y VkStructureType) *VkPhysicalDeviceFeatures2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceFeatures2
func (x VkPhysicalDeviceFeatures2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceFeatures2
func (x *VkPhysicalDeviceFeatures2) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceFeatures2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Features returns the value of features from VkPhysicalDeviceFeatures2
func (x VkPhysicalDeviceFeatures2) Features() VkPhysicalDeviceFeatures {
	ptr := /* Identifier */ (*VkPhysicalDeviceFeatures)(&x.features)
	return *ptr
}

// WithFeatures copies the provided value into C space and stores it
// at features on VkPhysicalDeviceFeatures2
func (x *VkPhysicalDeviceFeatures2) WithFeatures(y VkPhysicalDeviceFeatures) *VkPhysicalDeviceFeatures2 {
	ptr := /* Identifier */ (*C.VkPhysicalDeviceFeatures)(&y)
	x.features = *ptr
	return x
}

//VkPhysicalDeviceProperties2 provides a go interface for VkPhysicalDeviceProperties2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProperties2.html
type VkPhysicalDeviceProperties2 C.struct_VkPhysicalDeviceProperties2

// NewVkPhysicalDeviceProperties2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceProperties2() *VkPhysicalDeviceProperties2 {
	sz := unsafe.Sizeof(VkPhysicalDeviceProperties2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceProperties2)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceProperties2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceProperties2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceProperties2) AsPtr() *VkPhysicalDeviceProperties2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceProperties2) AsCPtr() *VkPhysicalDeviceProperties2 {
	clone := newVkPhysicalDeviceProperties2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceProperties2
func (x VkPhysicalDeviceProperties2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceProperties2) WithDefaultSType() *VkPhysicalDeviceProperties2 {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceProperties2
func (x *VkPhysicalDeviceProperties2) WithSType(y VkStructureType) *VkPhysicalDeviceProperties2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceProperties2
func (x VkPhysicalDeviceProperties2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceProperties2
func (x *VkPhysicalDeviceProperties2) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceProperties2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Properties returns the value of properties from VkPhysicalDeviceProperties2
func (x VkPhysicalDeviceProperties2) Properties() VkPhysicalDeviceProperties {
	ptr := /* Identifier */ (*VkPhysicalDeviceProperties)(&x.properties)
	return *ptr
}

//VkFormatProperties2 provides a go interface for VkFormatProperties2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFormatProperties2.html
type VkFormatProperties2 C.struct_VkFormatProperties2

// NewVkFormatProperties2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkFormatProperties2() *VkFormatProperties2 {
	sz := unsafe.Sizeof(VkFormatProperties2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkFormatProperties2)(ptr)
}

// Free releases the memory allocated by the NewVkFormatProperties2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkFormatProperties2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkFormatProperties2) AsPtr() *VkFormatProperties2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkFormatProperties2) AsCPtr() *VkFormatProperties2 {
	clone := newVkFormatProperties2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkFormatProperties2
func (x VkFormatProperties2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkFormatProperties2) WithDefaultSType() *VkFormatProperties2 {
	return x.WithSType(VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkFormatProperties2
func (x *VkFormatProperties2) WithSType(y VkStructureType) *VkFormatProperties2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkFormatProperties2
func (x VkFormatProperties2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkFormatProperties2
func (x *VkFormatProperties2) WithPNext(y unsafe.Pointer) *VkFormatProperties2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// FormatProperties returns the value of formatProperties from VkFormatProperties2
func (x VkFormatProperties2) FormatProperties() VkFormatProperties {
	ptr := /* Identifier */ (*VkFormatProperties)(&x.formatProperties)
	return *ptr
}

//VkImageFormatProperties2 provides a go interface for VkImageFormatProperties2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageFormatProperties2.html
type VkImageFormatProperties2 C.struct_VkImageFormatProperties2

// NewVkImageFormatProperties2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageFormatProperties2() *VkImageFormatProperties2 {
	sz := unsafe.Sizeof(VkImageFormatProperties2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageFormatProperties2)(ptr)
}

// Free releases the memory allocated by the NewVkImageFormatProperties2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageFormatProperties2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageFormatProperties2) AsPtr() *VkImageFormatProperties2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageFormatProperties2) AsCPtr() *VkImageFormatProperties2 {
	clone := newVkImageFormatProperties2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageFormatProperties2
func (x VkImageFormatProperties2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageFormatProperties2) WithDefaultSType() *VkImageFormatProperties2 {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageFormatProperties2
func (x *VkImageFormatProperties2) WithSType(y VkStructureType) *VkImageFormatProperties2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageFormatProperties2
func (x VkImageFormatProperties2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageFormatProperties2
func (x *VkImageFormatProperties2) WithPNext(y unsafe.Pointer) *VkImageFormatProperties2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ImageFormatProperties returns the value of imageFormatProperties from VkImageFormatProperties2
func (x VkImageFormatProperties2) ImageFormatProperties() VkImageFormatProperties {
	ptr := /* Identifier */ (*VkImageFormatProperties)(&x.imageFormatProperties)
	return *ptr
}

//VkPhysicalDeviceImageFormatInfo2 provides a go interface for VkPhysicalDeviceImageFormatInfo2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageFormatInfo2.html
type VkPhysicalDeviceImageFormatInfo2 C.struct_VkPhysicalDeviceImageFormatInfo2

// NewVkPhysicalDeviceImageFormatInfo2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceImageFormatInfo2() *VkPhysicalDeviceImageFormatInfo2 {
	sz := unsafe.Sizeof(VkPhysicalDeviceImageFormatInfo2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceImageFormatInfo2)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceImageFormatInfo2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceImageFormatInfo2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceImageFormatInfo2) AsPtr() *VkPhysicalDeviceImageFormatInfo2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceImageFormatInfo2) AsCPtr() *VkPhysicalDeviceImageFormatInfo2 {
	clone := newVkPhysicalDeviceImageFormatInfo2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceImageFormatInfo2
func (x VkPhysicalDeviceImageFormatInfo2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceImageFormatInfo2) WithDefaultSType() *VkPhysicalDeviceImageFormatInfo2 {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceImageFormatInfo2
func (x *VkPhysicalDeviceImageFormatInfo2) WithSType(y VkStructureType) *VkPhysicalDeviceImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceImageFormatInfo2
func (x VkPhysicalDeviceImageFormatInfo2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceImageFormatInfo2
func (x *VkPhysicalDeviceImageFormatInfo2) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceImageFormatInfo2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Format returns the value of format from VkPhysicalDeviceImageFormatInfo2
func (x VkPhysicalDeviceImageFormatInfo2) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkPhysicalDeviceImageFormatInfo2
func (x *VkPhysicalDeviceImageFormatInfo2) WithFormat(y VkFormat) *VkPhysicalDeviceImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Type returns the value of type from VkPhysicalDeviceImageFormatInfo2
func (x VkPhysicalDeviceImageFormatInfo2) Type() VkImageType {
	ptr := /* Identifier */ (*VkImageType)(&x._type)
	return *ptr
}

// WithType copies the provided value into C space and stores it
// at type on VkPhysicalDeviceImageFormatInfo2
func (x *VkPhysicalDeviceImageFormatInfo2) WithType(y VkImageType) *VkPhysicalDeviceImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkImageType)(&y)
	x._type = *ptr
	return x
}

// Tiling returns the value of tiling from VkPhysicalDeviceImageFormatInfo2
func (x VkPhysicalDeviceImageFormatInfo2) Tiling() VkImageTiling {
	ptr := /* Identifier */ (*VkImageTiling)(&x.tiling)
	return *ptr
}

// WithTiling copies the provided value into C space and stores it
// at tiling on VkPhysicalDeviceImageFormatInfo2
func (x *VkPhysicalDeviceImageFormatInfo2) WithTiling(y VkImageTiling) *VkPhysicalDeviceImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkImageTiling)(&y)
	x.tiling = *ptr
	return x
}

// Usage returns the value of usage from VkPhysicalDeviceImageFormatInfo2
func (x VkPhysicalDeviceImageFormatInfo2) Usage() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.usage)
	return *ptr
}

// WithUsage copies the provided value into C space and stores it
// at usage on VkPhysicalDeviceImageFormatInfo2
func (x *VkPhysicalDeviceImageFormatInfo2) WithUsage(y VkImageUsageFlags) *VkPhysicalDeviceImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkImageUsageFlags)(&y)
	x.usage = *ptr
	return x
}

// Flags returns the value of flags from VkPhysicalDeviceImageFormatInfo2
func (x VkPhysicalDeviceImageFormatInfo2) Flags() VkImageCreateFlags {
	ptr := /* Identifier */ (*VkImageCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPhysicalDeviceImageFormatInfo2
func (x *VkPhysicalDeviceImageFormatInfo2) WithFlags(y VkImageCreateFlags) *VkPhysicalDeviceImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkImageCreateFlags)(&y)
	x.flags = *ptr
	return x
}

//VkQueueFamilyProperties2 provides a go interface for VkQueueFamilyProperties2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueueFamilyProperties2.html
type VkQueueFamilyProperties2 C.struct_VkQueueFamilyProperties2

// NewVkQueueFamilyProperties2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkQueueFamilyProperties2() *VkQueueFamilyProperties2 {
	sz := unsafe.Sizeof(VkQueueFamilyProperties2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkQueueFamilyProperties2)(ptr)
}

// Free releases the memory allocated by the NewVkQueueFamilyProperties2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkQueueFamilyProperties2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkQueueFamilyProperties2) AsPtr() *VkQueueFamilyProperties2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkQueueFamilyProperties2) AsCPtr() *VkQueueFamilyProperties2 {
	clone := newVkQueueFamilyProperties2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkQueueFamilyProperties2
func (x VkQueueFamilyProperties2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkQueueFamilyProperties2) WithDefaultSType() *VkQueueFamilyProperties2 {
	return x.WithSType(VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkQueueFamilyProperties2
func (x *VkQueueFamilyProperties2) WithSType(y VkStructureType) *VkQueueFamilyProperties2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkQueueFamilyProperties2
func (x VkQueueFamilyProperties2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkQueueFamilyProperties2
func (x *VkQueueFamilyProperties2) WithPNext(y unsafe.Pointer) *VkQueueFamilyProperties2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// QueueFamilyProperties returns the value of queueFamilyProperties from VkQueueFamilyProperties2
func (x VkQueueFamilyProperties2) QueueFamilyProperties() VkQueueFamilyProperties {
	ptr := /* Identifier */ (*VkQueueFamilyProperties)(&x.queueFamilyProperties)
	return *ptr
}

//VkBindImageMemoryDeviceGroupInfo provides a go interface for VkBindImageMemoryDeviceGroupInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemoryDeviceGroupInfo.html
type VkBindImageMemoryDeviceGroupInfo C.struct_VkBindImageMemoryDeviceGroupInfo

// NewVkBindImageMemoryDeviceGroupInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBindImageMemoryDeviceGroupInfo() *VkBindImageMemoryDeviceGroupInfo {
	sz := unsafe.Sizeof(VkBindImageMemoryDeviceGroupInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBindImageMemoryDeviceGroupInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBindImageMemoryDeviceGroupInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBindImageMemoryDeviceGroupInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBindImageMemoryDeviceGroupInfo) AsPtr() *VkBindImageMemoryDeviceGroupInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBindImageMemoryDeviceGroupInfo) AsCPtr() *VkBindImageMemoryDeviceGroupInfo {
	clone := newVkBindImageMemoryDeviceGroupInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBindImageMemoryDeviceGroupInfo
func (x VkBindImageMemoryDeviceGroupInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBindImageMemoryDeviceGroupInfo) WithDefaultSType() *VkBindImageMemoryDeviceGroupInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBindImageMemoryDeviceGroupInfo
func (x *VkBindImageMemoryDeviceGroupInfo) WithSType(y VkStructureType) *VkBindImageMemoryDeviceGroupInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBindImageMemoryDeviceGroupInfo
func (x VkBindImageMemoryDeviceGroupInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBindImageMemoryDeviceGroupInfo
func (x *VkBindImageMemoryDeviceGroupInfo) WithPNext(y unsafe.Pointer) *VkBindImageMemoryDeviceGroupInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DeviceIndexCount returns the value of deviceIndexCount from VkBindImageMemoryDeviceGroupInfo
func (x VkBindImageMemoryDeviceGroupInfo) DeviceIndexCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceIndexCount)
	return *ptr
}

// WithDeviceIndexCount copies the provided value into C space and stores it
// at deviceIndexCount on VkBindImageMemoryDeviceGroupInfo
func (x *VkBindImageMemoryDeviceGroupInfo) WithDeviceIndexCount(y uint32) *VkBindImageMemoryDeviceGroupInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceIndexCount = *ptr
	return x
}

// PDeviceIndices returns the value of pDeviceIndices from VkBindImageMemoryDeviceGroupInfo
func (x VkBindImageMemoryDeviceGroupInfo) PDeviceIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDeviceIndices)
	return *ptr
}

// WithPDeviceIndices copies the provided value into C space and stores it
// at pDeviceIndices on VkBindImageMemoryDeviceGroupInfo
func (x *VkBindImageMemoryDeviceGroupInfo) WithPDeviceIndices(y []uint32) *VkBindImageMemoryDeviceGroupInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDeviceIndices = *ptr
	return x
}

// SplitInstanceBindRegionCount returns the value of splitInstanceBindRegionCount from VkBindImageMemoryDeviceGroupInfo
func (x VkBindImageMemoryDeviceGroupInfo) SplitInstanceBindRegionCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.splitInstanceBindRegionCount)
	return *ptr
}

// WithSplitInstanceBindRegionCount copies the provided value into C space and stores it
// at splitInstanceBindRegionCount on VkBindImageMemoryDeviceGroupInfo
func (x *VkBindImageMemoryDeviceGroupInfo) WithSplitInstanceBindRegionCount(y uint32) *VkBindImageMemoryDeviceGroupInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.splitInstanceBindRegionCount = *ptr
	return x
}

// PSplitInstanceBindRegions returns the value of pSplitInstanceBindRegions from VkBindImageMemoryDeviceGroupInfo
func (x VkBindImageMemoryDeviceGroupInfo) PSplitInstanceBindRegions() []VkRect2D {
	ptr := func(x **C.VkRect2D) *[]VkRect2D { /* Slice */
		slc := unsafe.Slice((*VkRect2D)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSplitInstanceBindRegions)
	return *ptr
}

// WithPSplitInstanceBindRegions copies the provided value into C space and stores it
// at pSplitInstanceBindRegions on VkBindImageMemoryDeviceGroupInfo
func (x *VkBindImageMemoryDeviceGroupInfo) WithPSplitInstanceBindRegions(y []VkRect2D) *VkBindImageMemoryDeviceGroupInfo {
	ptr := func(x *[]VkRect2D) **C.VkRect2D { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkRect2D)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkRect2D)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSplitInstanceBindRegions = *ptr
	return x
}

//VkSparseImageFormatProperties2 provides a go interface for VkSparseImageFormatProperties2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageFormatProperties2.html
type VkSparseImageFormatProperties2 C.struct_VkSparseImageFormatProperties2

// NewVkSparseImageFormatProperties2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSparseImageFormatProperties2() *VkSparseImageFormatProperties2 {
	sz := unsafe.Sizeof(VkSparseImageFormatProperties2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSparseImageFormatProperties2)(ptr)
}

// Free releases the memory allocated by the NewVkSparseImageFormatProperties2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSparseImageFormatProperties2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSparseImageFormatProperties2) AsPtr() *VkSparseImageFormatProperties2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSparseImageFormatProperties2) AsCPtr() *VkSparseImageFormatProperties2 {
	clone := newVkSparseImageFormatProperties2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSparseImageFormatProperties2
func (x VkSparseImageFormatProperties2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSparseImageFormatProperties2) WithDefaultSType() *VkSparseImageFormatProperties2 {
	return x.WithSType(VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSparseImageFormatProperties2
func (x *VkSparseImageFormatProperties2) WithSType(y VkStructureType) *VkSparseImageFormatProperties2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSparseImageFormatProperties2
func (x VkSparseImageFormatProperties2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSparseImageFormatProperties2
func (x *VkSparseImageFormatProperties2) WithPNext(y unsafe.Pointer) *VkSparseImageFormatProperties2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Properties returns the value of properties from VkSparseImageFormatProperties2
func (x VkSparseImageFormatProperties2) Properties() VkSparseImageFormatProperties {
	ptr := /* Identifier */ (*VkSparseImageFormatProperties)(&x.properties)
	return *ptr
}

//VkPhysicalDeviceSparseImageFormatInfo2 provides a go interface for VkPhysicalDeviceSparseImageFormatInfo2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSparseImageFormatInfo2.html
type VkPhysicalDeviceSparseImageFormatInfo2 C.struct_VkPhysicalDeviceSparseImageFormatInfo2

// NewVkPhysicalDeviceSparseImageFormatInfo2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceSparseImageFormatInfo2() *VkPhysicalDeviceSparseImageFormatInfo2 {
	sz := unsafe.Sizeof(VkPhysicalDeviceSparseImageFormatInfo2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceSparseImageFormatInfo2)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceSparseImageFormatInfo2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceSparseImageFormatInfo2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceSparseImageFormatInfo2) AsPtr() *VkPhysicalDeviceSparseImageFormatInfo2 {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceSparseImageFormatInfo2) AsCPtr() *VkPhysicalDeviceSparseImageFormatInfo2 {
	clone := newVkPhysicalDeviceSparseImageFormatInfo2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceSparseImageFormatInfo2
func (x VkPhysicalDeviceSparseImageFormatInfo2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithDefaultSType() *VkPhysicalDeviceSparseImageFormatInfo2 {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceSparseImageFormatInfo2
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithSType(y VkStructureType) *VkPhysicalDeviceSparseImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceSparseImageFormatInfo2
func (x VkPhysicalDeviceSparseImageFormatInfo2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceSparseImageFormatInfo2
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceSparseImageFormatInfo2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Format returns the value of format from VkPhysicalDeviceSparseImageFormatInfo2
func (x VkPhysicalDeviceSparseImageFormatInfo2) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkPhysicalDeviceSparseImageFormatInfo2
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithFormat(y VkFormat) *VkPhysicalDeviceSparseImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Type returns the value of type from VkPhysicalDeviceSparseImageFormatInfo2
func (x VkPhysicalDeviceSparseImageFormatInfo2) Type() VkImageType {
	ptr := /* Identifier */ (*VkImageType)(&x._type)
	return *ptr
}

// WithType copies the provided value into C space and stores it
// at type on VkPhysicalDeviceSparseImageFormatInfo2
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithType(y VkImageType) *VkPhysicalDeviceSparseImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkImageType)(&y)
	x._type = *ptr
	return x
}

// Samples returns the value of samples from VkPhysicalDeviceSparseImageFormatInfo2
func (x VkPhysicalDeviceSparseImageFormatInfo2) Samples() VkSampleCountFlagBits {
	ptr := /* Identifier */ (*VkSampleCountFlagBits)(&x.samples)
	return *ptr
}

// WithSamples copies the provided value into C space and stores it
// at samples on VkPhysicalDeviceSparseImageFormatInfo2
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithSamples(y VkSampleCountFlagBits) *VkPhysicalDeviceSparseImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkSampleCountFlagBits)(&y)
	x.samples = *ptr
	return x
}

// Usage returns the value of usage from VkPhysicalDeviceSparseImageFormatInfo2
func (x VkPhysicalDeviceSparseImageFormatInfo2) Usage() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.usage)
	return *ptr
}

// WithUsage copies the provided value into C space and stores it
// at usage on VkPhysicalDeviceSparseImageFormatInfo2
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithUsage(y VkImageUsageFlags) *VkPhysicalDeviceSparseImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkImageUsageFlags)(&y)
	x.usage = *ptr
	return x
}

// Tiling returns the value of tiling from VkPhysicalDeviceSparseImageFormatInfo2
func (x VkPhysicalDeviceSparseImageFormatInfo2) Tiling() VkImageTiling {
	ptr := /* Identifier */ (*VkImageTiling)(&x.tiling)
	return *ptr
}

// WithTiling copies the provided value into C space and stores it
// at tiling on VkPhysicalDeviceSparseImageFormatInfo2
func (x *VkPhysicalDeviceSparseImageFormatInfo2) WithTiling(y VkImageTiling) *VkPhysicalDeviceSparseImageFormatInfo2 {
	ptr := /* Identifier */ (*C.VkImageTiling)(&y)
	x.tiling = *ptr
	return x
}

//VkBindBufferMemoryDeviceGroupInfo provides a go interface for VkBindBufferMemoryDeviceGroupInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindBufferMemoryDeviceGroupInfo.html
type VkBindBufferMemoryDeviceGroupInfo C.struct_VkBindBufferMemoryDeviceGroupInfo

// NewVkBindBufferMemoryDeviceGroupInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBindBufferMemoryDeviceGroupInfo() *VkBindBufferMemoryDeviceGroupInfo {
	sz := unsafe.Sizeof(VkBindBufferMemoryDeviceGroupInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBindBufferMemoryDeviceGroupInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBindBufferMemoryDeviceGroupInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBindBufferMemoryDeviceGroupInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBindBufferMemoryDeviceGroupInfo) AsPtr() *VkBindBufferMemoryDeviceGroupInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBindBufferMemoryDeviceGroupInfo) AsCPtr() *VkBindBufferMemoryDeviceGroupInfo {
	clone := newVkBindBufferMemoryDeviceGroupInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBindBufferMemoryDeviceGroupInfo
func (x VkBindBufferMemoryDeviceGroupInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBindBufferMemoryDeviceGroupInfo) WithDefaultSType() *VkBindBufferMemoryDeviceGroupInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBindBufferMemoryDeviceGroupInfo
func (x *VkBindBufferMemoryDeviceGroupInfo) WithSType(y VkStructureType) *VkBindBufferMemoryDeviceGroupInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBindBufferMemoryDeviceGroupInfo
func (x VkBindBufferMemoryDeviceGroupInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBindBufferMemoryDeviceGroupInfo
func (x *VkBindBufferMemoryDeviceGroupInfo) WithPNext(y unsafe.Pointer) *VkBindBufferMemoryDeviceGroupInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DeviceIndexCount returns the value of deviceIndexCount from VkBindBufferMemoryDeviceGroupInfo
func (x VkBindBufferMemoryDeviceGroupInfo) DeviceIndexCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceIndexCount)
	return *ptr
}

// WithDeviceIndexCount copies the provided value into C space and stores it
// at deviceIndexCount on VkBindBufferMemoryDeviceGroupInfo
func (x *VkBindBufferMemoryDeviceGroupInfo) WithDeviceIndexCount(y uint32) *VkBindBufferMemoryDeviceGroupInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceIndexCount = *ptr
	return x
}

// PDeviceIndices returns the value of pDeviceIndices from VkBindBufferMemoryDeviceGroupInfo
func (x VkBindBufferMemoryDeviceGroupInfo) PDeviceIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDeviceIndices)
	return *ptr
}

// WithPDeviceIndices copies the provided value into C space and stores it
// at pDeviceIndices on VkBindBufferMemoryDeviceGroupInfo
func (x *VkBindBufferMemoryDeviceGroupInfo) WithPDeviceIndices(y []uint32) *VkBindBufferMemoryDeviceGroupInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDeviceIndices = *ptr
	return x
}

//VkDeviceGroupBindSparseInfo provides a go interface for VkDeviceGroupBindSparseInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupBindSparseInfo.html
type VkDeviceGroupBindSparseInfo C.struct_VkDeviceGroupBindSparseInfo

// NewVkDeviceGroupBindSparseInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupBindSparseInfo() *VkDeviceGroupBindSparseInfo {
	sz := unsafe.Sizeof(VkDeviceGroupBindSparseInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupBindSparseInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupBindSparseInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupBindSparseInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupBindSparseInfo) AsPtr() *VkDeviceGroupBindSparseInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupBindSparseInfo) AsCPtr() *VkDeviceGroupBindSparseInfo {
	clone := newVkDeviceGroupBindSparseInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupBindSparseInfo
func (x VkDeviceGroupBindSparseInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupBindSparseInfo) WithDefaultSType() *VkDeviceGroupBindSparseInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupBindSparseInfo
func (x *VkDeviceGroupBindSparseInfo) WithSType(y VkStructureType) *VkDeviceGroupBindSparseInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupBindSparseInfo
func (x VkDeviceGroupBindSparseInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupBindSparseInfo
func (x *VkDeviceGroupBindSparseInfo) WithPNext(y unsafe.Pointer) *VkDeviceGroupBindSparseInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ResourceDeviceIndex returns the value of resourceDeviceIndex from VkDeviceGroupBindSparseInfo
func (x VkDeviceGroupBindSparseInfo) ResourceDeviceIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.resourceDeviceIndex)
	return *ptr
}

// WithResourceDeviceIndex copies the provided value into C space and stores it
// at resourceDeviceIndex on VkDeviceGroupBindSparseInfo
func (x *VkDeviceGroupBindSparseInfo) WithResourceDeviceIndex(y uint32) *VkDeviceGroupBindSparseInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.resourceDeviceIndex = *ptr
	return x
}

// MemoryDeviceIndex returns the value of memoryDeviceIndex from VkDeviceGroupBindSparseInfo
func (x VkDeviceGroupBindSparseInfo) MemoryDeviceIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.memoryDeviceIndex)
	return *ptr
}

// WithMemoryDeviceIndex copies the provided value into C space and stores it
// at memoryDeviceIndex on VkDeviceGroupBindSparseInfo
func (x *VkDeviceGroupBindSparseInfo) WithMemoryDeviceIndex(y uint32) *VkDeviceGroupBindSparseInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.memoryDeviceIndex = *ptr
	return x
}

//VkPhysicalDevicePointClippingProperties provides a go interface for VkPhysicalDevicePointClippingProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePointClippingProperties.html
type VkPhysicalDevicePointClippingProperties C.struct_VkPhysicalDevicePointClippingProperties

// NewVkPhysicalDevicePointClippingProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDevicePointClippingProperties() *VkPhysicalDevicePointClippingProperties {
	sz := unsafe.Sizeof(VkPhysicalDevicePointClippingProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDevicePointClippingProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDevicePointClippingProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDevicePointClippingProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDevicePointClippingProperties) AsPtr() *VkPhysicalDevicePointClippingProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDevicePointClippingProperties) AsCPtr() *VkPhysicalDevicePointClippingProperties {
	clone := newVkPhysicalDevicePointClippingProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDevicePointClippingProperties
func (x VkPhysicalDevicePointClippingProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDevicePointClippingProperties) WithDefaultSType() *VkPhysicalDevicePointClippingProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDevicePointClippingProperties
func (x *VkPhysicalDevicePointClippingProperties) WithSType(y VkStructureType) *VkPhysicalDevicePointClippingProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDevicePointClippingProperties
func (x VkPhysicalDevicePointClippingProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDevicePointClippingProperties
func (x *VkPhysicalDevicePointClippingProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDevicePointClippingProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PointClippingBehavior returns the value of pointClippingBehavior from VkPhysicalDevicePointClippingProperties
func (x VkPhysicalDevicePointClippingProperties) PointClippingBehavior() VkPointClippingBehavior {
	ptr := /* Identifier */ (*VkPointClippingBehavior)(&x.pointClippingBehavior)
	return *ptr
}

//VkDeviceGroupSubmitInfo provides a go interface for VkDeviceGroupSubmitInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupSubmitInfo.html
type VkDeviceGroupSubmitInfo C.struct_VkDeviceGroupSubmitInfo

// NewVkDeviceGroupSubmitInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupSubmitInfo() *VkDeviceGroupSubmitInfo {
	sz := unsafe.Sizeof(VkDeviceGroupSubmitInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupSubmitInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupSubmitInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupSubmitInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupSubmitInfo) AsPtr() *VkDeviceGroupSubmitInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupSubmitInfo) AsCPtr() *VkDeviceGroupSubmitInfo {
	clone := newVkDeviceGroupSubmitInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupSubmitInfo) WithDefaultSType() *VkDeviceGroupSubmitInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithSType(y VkStructureType) *VkDeviceGroupSubmitInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithPNext(y unsafe.Pointer) *VkDeviceGroupSubmitInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// WaitSemaphoreCount returns the value of waitSemaphoreCount from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) WaitSemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.waitSemaphoreCount)
	return *ptr
}

// WithWaitSemaphoreCount copies the provided value into C space and stores it
// at waitSemaphoreCount on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithWaitSemaphoreCount(y uint32) *VkDeviceGroupSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.waitSemaphoreCount = *ptr
	return x
}

// PWaitSemaphoreDeviceIndices returns the value of pWaitSemaphoreDeviceIndices from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) PWaitSemaphoreDeviceIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pWaitSemaphoreDeviceIndices)
	return *ptr
}

// WithPWaitSemaphoreDeviceIndices copies the provided value into C space and stores it
// at pWaitSemaphoreDeviceIndices on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithPWaitSemaphoreDeviceIndices(y []uint32) *VkDeviceGroupSubmitInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pWaitSemaphoreDeviceIndices = *ptr
	return x
}

// CommandBufferCount returns the value of commandBufferCount from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) CommandBufferCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.commandBufferCount)
	return *ptr
}

// WithCommandBufferCount copies the provided value into C space and stores it
// at commandBufferCount on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithCommandBufferCount(y uint32) *VkDeviceGroupSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.commandBufferCount = *ptr
	return x
}

// PCommandBufferDeviceMasks returns the value of pCommandBufferDeviceMasks from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) PCommandBufferDeviceMasks() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pCommandBufferDeviceMasks)
	return *ptr
}

// WithPCommandBufferDeviceMasks copies the provided value into C space and stores it
// at pCommandBufferDeviceMasks on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithPCommandBufferDeviceMasks(y []uint32) *VkDeviceGroupSubmitInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pCommandBufferDeviceMasks = *ptr
	return x
}

// SignalSemaphoreCount returns the value of signalSemaphoreCount from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) SignalSemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.signalSemaphoreCount)
	return *ptr
}

// WithSignalSemaphoreCount copies the provided value into C space and stores it
// at signalSemaphoreCount on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithSignalSemaphoreCount(y uint32) *VkDeviceGroupSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.signalSemaphoreCount = *ptr
	return x
}

// PSignalSemaphoreDeviceIndices returns the value of pSignalSemaphoreDeviceIndices from VkDeviceGroupSubmitInfo
func (x VkDeviceGroupSubmitInfo) PSignalSemaphoreDeviceIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSignalSemaphoreDeviceIndices)
	return *ptr
}

// WithPSignalSemaphoreDeviceIndices copies the provided value into C space and stores it
// at pSignalSemaphoreDeviceIndices on VkDeviceGroupSubmitInfo
func (x *VkDeviceGroupSubmitInfo) WithPSignalSemaphoreDeviceIndices(y []uint32) *VkDeviceGroupSubmitInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSignalSemaphoreDeviceIndices = *ptr
	return x
}

//VkRenderPassInputAttachmentAspectCreateInfo provides a go interface for VkRenderPassInputAttachmentAspectCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassInputAttachmentAspectCreateInfo.html
type VkRenderPassInputAttachmentAspectCreateInfo C.struct_VkRenderPassInputAttachmentAspectCreateInfo

// NewVkRenderPassInputAttachmentAspectCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkRenderPassInputAttachmentAspectCreateInfo() *VkRenderPassInputAttachmentAspectCreateInfo {
	sz := unsafe.Sizeof(VkRenderPassInputAttachmentAspectCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkRenderPassInputAttachmentAspectCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkRenderPassInputAttachmentAspectCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkRenderPassInputAttachmentAspectCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkRenderPassInputAttachmentAspectCreateInfo) AsPtr() *VkRenderPassInputAttachmentAspectCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkRenderPassInputAttachmentAspectCreateInfo) AsCPtr() *VkRenderPassInputAttachmentAspectCreateInfo {
	clone := newVkRenderPassInputAttachmentAspectCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkRenderPassInputAttachmentAspectCreateInfo
func (x VkRenderPassInputAttachmentAspectCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkRenderPassInputAttachmentAspectCreateInfo) WithDefaultSType() *VkRenderPassInputAttachmentAspectCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkRenderPassInputAttachmentAspectCreateInfo
func (x *VkRenderPassInputAttachmentAspectCreateInfo) WithSType(y VkStructureType) *VkRenderPassInputAttachmentAspectCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkRenderPassInputAttachmentAspectCreateInfo
func (x VkRenderPassInputAttachmentAspectCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkRenderPassInputAttachmentAspectCreateInfo
func (x *VkRenderPassInputAttachmentAspectCreateInfo) WithPNext(y unsafe.Pointer) *VkRenderPassInputAttachmentAspectCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// AspectReferenceCount returns the value of aspectReferenceCount from VkRenderPassInputAttachmentAspectCreateInfo
func (x VkRenderPassInputAttachmentAspectCreateInfo) AspectReferenceCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.aspectReferenceCount)
	return *ptr
}

// WithAspectReferenceCount copies the provided value into C space and stores it
// at aspectReferenceCount on VkRenderPassInputAttachmentAspectCreateInfo
func (x *VkRenderPassInputAttachmentAspectCreateInfo) WithAspectReferenceCount(y uint32) *VkRenderPassInputAttachmentAspectCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.aspectReferenceCount = *ptr
	return x
}

// PAspectReferences returns the value of pAspectReferences from VkRenderPassInputAttachmentAspectCreateInfo
func (x VkRenderPassInputAttachmentAspectCreateInfo) PAspectReferences() []VkInputAttachmentAspectReference {
	ptr := func(x **C.VkInputAttachmentAspectReference) *[]VkInputAttachmentAspectReference { /* Slice */
		slc := unsafe.Slice((*VkInputAttachmentAspectReference)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pAspectReferences)
	return *ptr
}

// WithPAspectReferences copies the provided value into C space and stores it
// at pAspectReferences on VkRenderPassInputAttachmentAspectCreateInfo
func (x *VkRenderPassInputAttachmentAspectCreateInfo) WithPAspectReferences(y []VkInputAttachmentAspectReference) *VkRenderPassInputAttachmentAspectCreateInfo {
	ptr := func(x *[]VkInputAttachmentAspectReference) **C.VkInputAttachmentAspectReference { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkInputAttachmentAspectReference)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkInputAttachmentAspectReference)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pAspectReferences = *ptr
	return x
}

//VkInputAttachmentAspectReference provides a go interface for VkInputAttachmentAspectReference.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInputAttachmentAspectReference.html
type VkInputAttachmentAspectReference C.struct_VkInputAttachmentAspectReference

// NewVkInputAttachmentAspectReference allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkInputAttachmentAspectReference() *VkInputAttachmentAspectReference {
	sz := unsafe.Sizeof(VkInputAttachmentAspectReference{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkInputAttachmentAspectReference)(ptr)
}

// Free releases the memory allocated by the NewVkInputAttachmentAspectReference method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkInputAttachmentAspectReference) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkInputAttachmentAspectReference) AsPtr() *VkInputAttachmentAspectReference { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkInputAttachmentAspectReference) AsCPtr() *VkInputAttachmentAspectReference {
	clone := newVkInputAttachmentAspectReference()
	*clone = *x
	return clone
}

// Subpass returns the value of subpass from VkInputAttachmentAspectReference
func (x VkInputAttachmentAspectReference) Subpass() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subpass)
	return *ptr
}

// WithSubpass copies the provided value into C space and stores it
// at subpass on VkInputAttachmentAspectReference
func (x *VkInputAttachmentAspectReference) WithSubpass(y uint32) *VkInputAttachmentAspectReference {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.subpass = *ptr
	return x
}

// InputAttachmentIndex returns the value of inputAttachmentIndex from VkInputAttachmentAspectReference
func (x VkInputAttachmentAspectReference) InputAttachmentIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.inputAttachmentIndex)
	return *ptr
}

// WithInputAttachmentIndex copies the provided value into C space and stores it
// at inputAttachmentIndex on VkInputAttachmentAspectReference
func (x *VkInputAttachmentAspectReference) WithInputAttachmentIndex(y uint32) *VkInputAttachmentAspectReference {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.inputAttachmentIndex = *ptr
	return x
}

// AspectMask returns the value of aspectMask from VkInputAttachmentAspectReference
func (x VkInputAttachmentAspectReference) AspectMask() VkImageAspectFlags {
	ptr := /* Identifier */ (*VkImageAspectFlags)(&x.aspectMask)
	return *ptr
}

// WithAspectMask copies the provided value into C space and stores it
// at aspectMask on VkInputAttachmentAspectReference
func (x *VkInputAttachmentAspectReference) WithAspectMask(y VkImageAspectFlags) *VkInputAttachmentAspectReference {
	ptr := /* Identifier */ (*C.VkImageAspectFlags)(&y)
	x.aspectMask = *ptr
	return x
}

//VkImageViewUsageCreateInfo provides a go interface for VkImageViewUsageCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewUsageCreateInfo.html
type VkImageViewUsageCreateInfo C.struct_VkImageViewUsageCreateInfo

// NewVkImageViewUsageCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageViewUsageCreateInfo() *VkImageViewUsageCreateInfo {
	sz := unsafe.Sizeof(VkImageViewUsageCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageViewUsageCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkImageViewUsageCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageViewUsageCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageViewUsageCreateInfo) AsPtr() *VkImageViewUsageCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageViewUsageCreateInfo) AsCPtr() *VkImageViewUsageCreateInfo {
	clone := newVkImageViewUsageCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageViewUsageCreateInfo
func (x VkImageViewUsageCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageViewUsageCreateInfo) WithDefaultSType() *VkImageViewUsageCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageViewUsageCreateInfo
func (x *VkImageViewUsageCreateInfo) WithSType(y VkStructureType) *VkImageViewUsageCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageViewUsageCreateInfo
func (x VkImageViewUsageCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageViewUsageCreateInfo
func (x *VkImageViewUsageCreateInfo) WithPNext(y unsafe.Pointer) *VkImageViewUsageCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Usage returns the value of usage from VkImageViewUsageCreateInfo
func (x VkImageViewUsageCreateInfo) Usage() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.usage)
	return *ptr
}

// WithUsage copies the provided value into C space and stores it
// at usage on VkImageViewUsageCreateInfo
func (x *VkImageViewUsageCreateInfo) WithUsage(y VkImageUsageFlags) *VkImageViewUsageCreateInfo {
	ptr := /* Identifier */ (*C.VkImageUsageFlags)(&y)
	x.usage = *ptr
	return x
}

//VkDeviceGroupCommandBufferBeginInfo provides a go interface for VkDeviceGroupCommandBufferBeginInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupCommandBufferBeginInfo.html
type VkDeviceGroupCommandBufferBeginInfo C.struct_VkDeviceGroupCommandBufferBeginInfo

// NewVkDeviceGroupCommandBufferBeginInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupCommandBufferBeginInfo() *VkDeviceGroupCommandBufferBeginInfo {
	sz := unsafe.Sizeof(VkDeviceGroupCommandBufferBeginInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupCommandBufferBeginInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupCommandBufferBeginInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupCommandBufferBeginInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupCommandBufferBeginInfo) AsPtr() *VkDeviceGroupCommandBufferBeginInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupCommandBufferBeginInfo) AsCPtr() *VkDeviceGroupCommandBufferBeginInfo {
	clone := newVkDeviceGroupCommandBufferBeginInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupCommandBufferBeginInfo
func (x VkDeviceGroupCommandBufferBeginInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupCommandBufferBeginInfo) WithDefaultSType() *VkDeviceGroupCommandBufferBeginInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupCommandBufferBeginInfo
func (x *VkDeviceGroupCommandBufferBeginInfo) WithSType(y VkStructureType) *VkDeviceGroupCommandBufferBeginInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupCommandBufferBeginInfo
func (x VkDeviceGroupCommandBufferBeginInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupCommandBufferBeginInfo
func (x *VkDeviceGroupCommandBufferBeginInfo) WithPNext(y unsafe.Pointer) *VkDeviceGroupCommandBufferBeginInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DeviceMask returns the value of deviceMask from VkDeviceGroupCommandBufferBeginInfo
func (x VkDeviceGroupCommandBufferBeginInfo) DeviceMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceMask)
	return *ptr
}

// WithDeviceMask copies the provided value into C space and stores it
// at deviceMask on VkDeviceGroupCommandBufferBeginInfo
func (x *VkDeviceGroupCommandBufferBeginInfo) WithDeviceMask(y uint32) *VkDeviceGroupCommandBufferBeginInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceMask = *ptr
	return x
}

//VkPipelineTessellationDomainOriginStateCreateInfo provides a go interface for VkPipelineTessellationDomainOriginStateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineTessellationDomainOriginStateCreateInfo.html
type VkPipelineTessellationDomainOriginStateCreateInfo C.struct_VkPipelineTessellationDomainOriginStateCreateInfo

// NewVkPipelineTessellationDomainOriginStateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPipelineTessellationDomainOriginStateCreateInfo() *VkPipelineTessellationDomainOriginStateCreateInfo {
	sz := unsafe.Sizeof(VkPipelineTessellationDomainOriginStateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPipelineTessellationDomainOriginStateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPipelineTessellationDomainOriginStateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPipelineTessellationDomainOriginStateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPipelineTessellationDomainOriginStateCreateInfo) AsPtr() *VkPipelineTessellationDomainOriginStateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPipelineTessellationDomainOriginStateCreateInfo) AsCPtr() *VkPipelineTessellationDomainOriginStateCreateInfo {
	clone := newVkPipelineTessellationDomainOriginStateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPipelineTessellationDomainOriginStateCreateInfo
func (x VkPipelineTessellationDomainOriginStateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPipelineTessellationDomainOriginStateCreateInfo) WithDefaultSType() *VkPipelineTessellationDomainOriginStateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPipelineTessellationDomainOriginStateCreateInfo
func (x *VkPipelineTessellationDomainOriginStateCreateInfo) WithSType(y VkStructureType) *VkPipelineTessellationDomainOriginStateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPipelineTessellationDomainOriginStateCreateInfo
func (x VkPipelineTessellationDomainOriginStateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPipelineTessellationDomainOriginStateCreateInfo
func (x *VkPipelineTessellationDomainOriginStateCreateInfo) WithPNext(y unsafe.Pointer) *VkPipelineTessellationDomainOriginStateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DomainOrigin returns the value of domainOrigin from VkPipelineTessellationDomainOriginStateCreateInfo
func (x VkPipelineTessellationDomainOriginStateCreateInfo) DomainOrigin() VkTessellationDomainOrigin {
	ptr := /* Identifier */ (*VkTessellationDomainOrigin)(&x.domainOrigin)
	return *ptr
}

// WithDomainOrigin copies the provided value into C space and stores it
// at domainOrigin on VkPipelineTessellationDomainOriginStateCreateInfo
func (x *VkPipelineTessellationDomainOriginStateCreateInfo) WithDomainOrigin(y VkTessellationDomainOrigin) *VkPipelineTessellationDomainOriginStateCreateInfo {
	ptr := /* Identifier */ (*C.VkTessellationDomainOrigin)(&y)
	x.domainOrigin = *ptr
	return x
}

//VkRenderPassMultiviewCreateInfo provides a go interface for VkRenderPassMultiviewCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassMultiviewCreateInfo.html
type VkRenderPassMultiviewCreateInfo C.struct_VkRenderPassMultiviewCreateInfo

// NewVkRenderPassMultiviewCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkRenderPassMultiviewCreateInfo() *VkRenderPassMultiviewCreateInfo {
	sz := unsafe.Sizeof(VkRenderPassMultiviewCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkRenderPassMultiviewCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkRenderPassMultiviewCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkRenderPassMultiviewCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkRenderPassMultiviewCreateInfo) AsPtr() *VkRenderPassMultiviewCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkRenderPassMultiviewCreateInfo) AsCPtr() *VkRenderPassMultiviewCreateInfo {
	clone := newVkRenderPassMultiviewCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkRenderPassMultiviewCreateInfo) WithDefaultSType() *VkRenderPassMultiviewCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithSType(y VkStructureType) *VkRenderPassMultiviewCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithPNext(y unsafe.Pointer) *VkRenderPassMultiviewCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SubpassCount returns the value of subpassCount from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) SubpassCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subpassCount)
	return *ptr
}

// WithSubpassCount copies the provided value into C space and stores it
// at subpassCount on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithSubpassCount(y uint32) *VkRenderPassMultiviewCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.subpassCount = *ptr
	return x
}

// PViewMasks returns the value of pViewMasks from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) PViewMasks() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pViewMasks)
	return *ptr
}

// WithPViewMasks copies the provided value into C space and stores it
// at pViewMasks on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithPViewMasks(y []uint32) *VkRenderPassMultiviewCreateInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pViewMasks = *ptr
	return x
}

// DependencyCount returns the value of dependencyCount from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) DependencyCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dependencyCount)
	return *ptr
}

// WithDependencyCount copies the provided value into C space and stores it
// at dependencyCount on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithDependencyCount(y uint32) *VkRenderPassMultiviewCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dependencyCount = *ptr
	return x
}

// PViewOffsets returns the value of pViewOffsets from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) PViewOffsets() []int32 {
	ptr := func(x **C.int) *[]int32 { /* Slice */
		slc := unsafe.Slice((*int32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pViewOffsets)
	return *ptr
}

// WithPViewOffsets copies the provided value into C space and stores it
// at pViewOffsets on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithPViewOffsets(y []int32) *VkRenderPassMultiviewCreateInfo {
	ptr := func(x *[]int32) **C.int { /* Slice */
		if len(*x) > 0 {
			slc := (*C.int)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.int)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pViewOffsets = *ptr
	return x
}

// CorrelationMaskCount returns the value of correlationMaskCount from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) CorrelationMaskCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.correlationMaskCount)
	return *ptr
}

// WithCorrelationMaskCount copies the provided value into C space and stores it
// at correlationMaskCount on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithCorrelationMaskCount(y uint32) *VkRenderPassMultiviewCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.correlationMaskCount = *ptr
	return x
}

// PCorrelationMasks returns the value of pCorrelationMasks from VkRenderPassMultiviewCreateInfo
func (x VkRenderPassMultiviewCreateInfo) PCorrelationMasks() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pCorrelationMasks)
	return *ptr
}

// WithPCorrelationMasks copies the provided value into C space and stores it
// at pCorrelationMasks on VkRenderPassMultiviewCreateInfo
func (x *VkRenderPassMultiviewCreateInfo) WithPCorrelationMasks(y []uint32) *VkRenderPassMultiviewCreateInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pCorrelationMasks = *ptr
	return x
}

//VkPhysicalDeviceMultiviewFeatures provides a go interface for VkPhysicalDeviceMultiviewFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMultiviewFeatures.html
type VkPhysicalDeviceMultiviewFeatures C.struct_VkPhysicalDeviceMultiviewFeatures

// NewVkPhysicalDeviceMultiviewFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceMultiviewFeatures() *VkPhysicalDeviceMultiviewFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceMultiviewFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceMultiviewFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceMultiviewFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceMultiviewFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceMultiviewFeatures) AsPtr() *VkPhysicalDeviceMultiviewFeatures { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceMultiviewFeatures) AsCPtr() *VkPhysicalDeviceMultiviewFeatures {
	clone := newVkPhysicalDeviceMultiviewFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceMultiviewFeatures
func (x VkPhysicalDeviceMultiviewFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceMultiviewFeatures) WithDefaultSType() *VkPhysicalDeviceMultiviewFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceMultiviewFeatures
func (x *VkPhysicalDeviceMultiviewFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceMultiviewFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceMultiviewFeatures
func (x VkPhysicalDeviceMultiviewFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceMultiviewFeatures
func (x *VkPhysicalDeviceMultiviewFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceMultiviewFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Multiview returns the value of multiview from VkPhysicalDeviceMultiviewFeatures
func (x VkPhysicalDeviceMultiviewFeatures) Multiview() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiview)
	return *ptr
}

// WithMultiview copies the provided value into C space and stores it
// at multiview on VkPhysicalDeviceMultiviewFeatures
func (x *VkPhysicalDeviceMultiviewFeatures) WithMultiview(y VkBool32) *VkPhysicalDeviceMultiviewFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiview = *ptr
	return x
}

// MultiviewGeometryShader returns the value of multiviewGeometryShader from VkPhysicalDeviceMultiviewFeatures
func (x VkPhysicalDeviceMultiviewFeatures) MultiviewGeometryShader() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiviewGeometryShader)
	return *ptr
}

// WithMultiviewGeometryShader copies the provided value into C space and stores it
// at multiviewGeometryShader on VkPhysicalDeviceMultiviewFeatures
func (x *VkPhysicalDeviceMultiviewFeatures) WithMultiviewGeometryShader(y VkBool32) *VkPhysicalDeviceMultiviewFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiviewGeometryShader = *ptr
	return x
}

// MultiviewTessellationShader returns the value of multiviewTessellationShader from VkPhysicalDeviceMultiviewFeatures
func (x VkPhysicalDeviceMultiviewFeatures) MultiviewTessellationShader() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiviewTessellationShader)
	return *ptr
}

// WithMultiviewTessellationShader copies the provided value into C space and stores it
// at multiviewTessellationShader on VkPhysicalDeviceMultiviewFeatures
func (x *VkPhysicalDeviceMultiviewFeatures) WithMultiviewTessellationShader(y VkBool32) *VkPhysicalDeviceMultiviewFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiviewTessellationShader = *ptr
	return x
}

//VkPhysicalDeviceMultiviewProperties provides a go interface for VkPhysicalDeviceMultiviewProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMultiviewProperties.html
type VkPhysicalDeviceMultiviewProperties C.struct_VkPhysicalDeviceMultiviewProperties

// NewVkPhysicalDeviceMultiviewProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceMultiviewProperties() *VkPhysicalDeviceMultiviewProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceMultiviewProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceMultiviewProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceMultiviewProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceMultiviewProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceMultiviewProperties) AsPtr() *VkPhysicalDeviceMultiviewProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceMultiviewProperties) AsCPtr() *VkPhysicalDeviceMultiviewProperties {
	clone := newVkPhysicalDeviceMultiviewProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceMultiviewProperties
func (x VkPhysicalDeviceMultiviewProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceMultiviewProperties) WithDefaultSType() *VkPhysicalDeviceMultiviewProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceMultiviewProperties
func (x *VkPhysicalDeviceMultiviewProperties) WithSType(y VkStructureType) *VkPhysicalDeviceMultiviewProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceMultiviewProperties
func (x VkPhysicalDeviceMultiviewProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceMultiviewProperties
func (x *VkPhysicalDeviceMultiviewProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceMultiviewProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MaxMultiviewViewCount returns the value of maxMultiviewViewCount from VkPhysicalDeviceMultiviewProperties
func (x VkPhysicalDeviceMultiviewProperties) MaxMultiviewViewCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxMultiviewViewCount)
	return *ptr
}

// MaxMultiviewInstanceIndex returns the value of maxMultiviewInstanceIndex from VkPhysicalDeviceMultiviewProperties
func (x VkPhysicalDeviceMultiviewProperties) MaxMultiviewInstanceIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxMultiviewInstanceIndex)
	return *ptr
}

//VkPhysicalDeviceVariablePointerFeatures provides a go interface for VkPhysicalDeviceVariablePointerFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVariablePointerFeatures.html
type VkPhysicalDeviceVariablePointerFeatures C.struct_VkPhysicalDeviceVariablePointerFeatures

// NewVkPhysicalDeviceVariablePointerFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceVariablePointerFeatures() *VkPhysicalDeviceVariablePointerFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceVariablePointerFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceVariablePointerFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceVariablePointerFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceVariablePointerFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceVariablePointerFeatures) AsPtr() *VkPhysicalDeviceVariablePointerFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceVariablePointerFeatures) AsCPtr() *VkPhysicalDeviceVariablePointerFeatures {
	clone := newVkPhysicalDeviceVariablePointerFeatures()
	*clone = *x
	return clone
}

//VkDeviceGroupRenderPassBeginInfo provides a go interface for VkDeviceGroupRenderPassBeginInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupRenderPassBeginInfo.html
type VkDeviceGroupRenderPassBeginInfo C.struct_VkDeviceGroupRenderPassBeginInfo

// NewVkDeviceGroupRenderPassBeginInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupRenderPassBeginInfo() *VkDeviceGroupRenderPassBeginInfo {
	sz := unsafe.Sizeof(VkDeviceGroupRenderPassBeginInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupRenderPassBeginInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupRenderPassBeginInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupRenderPassBeginInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupRenderPassBeginInfo) AsPtr() *VkDeviceGroupRenderPassBeginInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupRenderPassBeginInfo) AsCPtr() *VkDeviceGroupRenderPassBeginInfo {
	clone := newVkDeviceGroupRenderPassBeginInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupRenderPassBeginInfo
func (x VkDeviceGroupRenderPassBeginInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupRenderPassBeginInfo) WithDefaultSType() *VkDeviceGroupRenderPassBeginInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupRenderPassBeginInfo
func (x *VkDeviceGroupRenderPassBeginInfo) WithSType(y VkStructureType) *VkDeviceGroupRenderPassBeginInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupRenderPassBeginInfo
func (x VkDeviceGroupRenderPassBeginInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupRenderPassBeginInfo
func (x *VkDeviceGroupRenderPassBeginInfo) WithPNext(y unsafe.Pointer) *VkDeviceGroupRenderPassBeginInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DeviceMask returns the value of deviceMask from VkDeviceGroupRenderPassBeginInfo
func (x VkDeviceGroupRenderPassBeginInfo) DeviceMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceMask)
	return *ptr
}

// WithDeviceMask copies the provided value into C space and stores it
// at deviceMask on VkDeviceGroupRenderPassBeginInfo
func (x *VkDeviceGroupRenderPassBeginInfo) WithDeviceMask(y uint32) *VkDeviceGroupRenderPassBeginInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceMask = *ptr
	return x
}

// DeviceRenderAreaCount returns the value of deviceRenderAreaCount from VkDeviceGroupRenderPassBeginInfo
func (x VkDeviceGroupRenderPassBeginInfo) DeviceRenderAreaCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceRenderAreaCount)
	return *ptr
}

// WithDeviceRenderAreaCount copies the provided value into C space and stores it
// at deviceRenderAreaCount on VkDeviceGroupRenderPassBeginInfo
func (x *VkDeviceGroupRenderPassBeginInfo) WithDeviceRenderAreaCount(y uint32) *VkDeviceGroupRenderPassBeginInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceRenderAreaCount = *ptr
	return x
}

// PDeviceRenderAreas returns the value of pDeviceRenderAreas from VkDeviceGroupRenderPassBeginInfo
func (x VkDeviceGroupRenderPassBeginInfo) PDeviceRenderAreas() []VkRect2D {
	ptr := func(x **C.VkRect2D) *[]VkRect2D { /* Slice */
		slc := unsafe.Slice((*VkRect2D)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDeviceRenderAreas)
	return *ptr
}

// WithPDeviceRenderAreas copies the provided value into C space and stores it
// at pDeviceRenderAreas on VkDeviceGroupRenderPassBeginInfo
func (x *VkDeviceGroupRenderPassBeginInfo) WithPDeviceRenderAreas(y []VkRect2D) *VkDeviceGroupRenderPassBeginInfo {
	ptr := func(x *[]VkRect2D) **C.VkRect2D { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkRect2D)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkRect2D)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDeviceRenderAreas = *ptr
	return x
}

//VkMemoryAllocateFlagsInfo provides a go interface for VkMemoryAllocateFlagsInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryAllocateFlagsInfo.html
type VkMemoryAllocateFlagsInfo C.struct_VkMemoryAllocateFlagsInfo

// NewVkMemoryAllocateFlagsInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryAllocateFlagsInfo() *VkMemoryAllocateFlagsInfo {
	sz := unsafe.Sizeof(VkMemoryAllocateFlagsInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryAllocateFlagsInfo)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryAllocateFlagsInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryAllocateFlagsInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryAllocateFlagsInfo) AsPtr() *VkMemoryAllocateFlagsInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryAllocateFlagsInfo) AsCPtr() *VkMemoryAllocateFlagsInfo {
	clone := newVkMemoryAllocateFlagsInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMemoryAllocateFlagsInfo
func (x VkMemoryAllocateFlagsInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMemoryAllocateFlagsInfo) WithDefaultSType() *VkMemoryAllocateFlagsInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMemoryAllocateFlagsInfo
func (x *VkMemoryAllocateFlagsInfo) WithSType(y VkStructureType) *VkMemoryAllocateFlagsInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMemoryAllocateFlagsInfo
func (x VkMemoryAllocateFlagsInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMemoryAllocateFlagsInfo
func (x *VkMemoryAllocateFlagsInfo) WithPNext(y unsafe.Pointer) *VkMemoryAllocateFlagsInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkMemoryAllocateFlagsInfo
func (x VkMemoryAllocateFlagsInfo) Flags() VkMemoryAllocateFlags {
	ptr := /* Identifier */ (*VkMemoryAllocateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkMemoryAllocateFlagsInfo
func (x *VkMemoryAllocateFlagsInfo) WithFlags(y VkMemoryAllocateFlags) *VkMemoryAllocateFlagsInfo {
	ptr := /* Identifier */ (*C.VkMemoryAllocateFlags)(&y)
	x.flags = *ptr
	return x
}

// DeviceMask returns the value of deviceMask from VkMemoryAllocateFlagsInfo
func (x VkMemoryAllocateFlagsInfo) DeviceMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceMask)
	return *ptr
}

// WithDeviceMask copies the provided value into C space and stores it
// at deviceMask on VkMemoryAllocateFlagsInfo
func (x *VkMemoryAllocateFlagsInfo) WithDeviceMask(y uint32) *VkMemoryAllocateFlagsInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceMask = *ptr
	return x
}

//VkPhysicalDeviceProtectedMemoryFeatures provides a go interface for VkPhysicalDeviceProtectedMemoryFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProtectedMemoryFeatures.html
type VkPhysicalDeviceProtectedMemoryFeatures C.struct_VkPhysicalDeviceProtectedMemoryFeatures

// NewVkPhysicalDeviceProtectedMemoryFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceProtectedMemoryFeatures() *VkPhysicalDeviceProtectedMemoryFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceProtectedMemoryFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceProtectedMemoryFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceProtectedMemoryFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceProtectedMemoryFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceProtectedMemoryFeatures) AsPtr() *VkPhysicalDeviceProtectedMemoryFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceProtectedMemoryFeatures) AsCPtr() *VkPhysicalDeviceProtectedMemoryFeatures {
	clone := newVkPhysicalDeviceProtectedMemoryFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceProtectedMemoryFeatures
func (x VkPhysicalDeviceProtectedMemoryFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceProtectedMemoryFeatures) WithDefaultSType() *VkPhysicalDeviceProtectedMemoryFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceProtectedMemoryFeatures
func (x *VkPhysicalDeviceProtectedMemoryFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceProtectedMemoryFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceProtectedMemoryFeatures
func (x VkPhysicalDeviceProtectedMemoryFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceProtectedMemoryFeatures
func (x *VkPhysicalDeviceProtectedMemoryFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceProtectedMemoryFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ProtectedMemory returns the value of protectedMemory from VkPhysicalDeviceProtectedMemoryFeatures
func (x VkPhysicalDeviceProtectedMemoryFeatures) ProtectedMemory() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.protectedMemory)
	return *ptr
}

// WithProtectedMemory copies the provided value into C space and stores it
// at protectedMemory on VkPhysicalDeviceProtectedMemoryFeatures
func (x *VkPhysicalDeviceProtectedMemoryFeatures) WithProtectedMemory(y VkBool32) *VkPhysicalDeviceProtectedMemoryFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.protectedMemory = *ptr
	return x
}

//VkPhysicalDeviceProtectedMemoryProperties provides a go interface for VkPhysicalDeviceProtectedMemoryProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProtectedMemoryProperties.html
type VkPhysicalDeviceProtectedMemoryProperties C.struct_VkPhysicalDeviceProtectedMemoryProperties

// NewVkPhysicalDeviceProtectedMemoryProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceProtectedMemoryProperties() *VkPhysicalDeviceProtectedMemoryProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceProtectedMemoryProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceProtectedMemoryProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceProtectedMemoryProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceProtectedMemoryProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceProtectedMemoryProperties) AsPtr() *VkPhysicalDeviceProtectedMemoryProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceProtectedMemoryProperties) AsCPtr() *VkPhysicalDeviceProtectedMemoryProperties {
	clone := newVkPhysicalDeviceProtectedMemoryProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceProtectedMemoryProperties
func (x VkPhysicalDeviceProtectedMemoryProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceProtectedMemoryProperties) WithDefaultSType() *VkPhysicalDeviceProtectedMemoryProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceProtectedMemoryProperties
func (x *VkPhysicalDeviceProtectedMemoryProperties) WithSType(y VkStructureType) *VkPhysicalDeviceProtectedMemoryProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceProtectedMemoryProperties
func (x VkPhysicalDeviceProtectedMemoryProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceProtectedMemoryProperties
func (x *VkPhysicalDeviceProtectedMemoryProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceProtectedMemoryProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ProtectedNoFault returns the value of protectedNoFault from VkPhysicalDeviceProtectedMemoryProperties
func (x VkPhysicalDeviceProtectedMemoryProperties) ProtectedNoFault() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.protectedNoFault)
	return *ptr
}

//VkDeviceQueueInfo2 provides a go interface for VkDeviceQueueInfo2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueInfo2.html
type VkDeviceQueueInfo2 C.struct_VkDeviceQueueInfo2

// NewVkDeviceQueueInfo2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceQueueInfo2() *VkDeviceQueueInfo2 {
	sz := unsafe.Sizeof(VkDeviceQueueInfo2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceQueueInfo2)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceQueueInfo2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceQueueInfo2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceQueueInfo2) AsPtr() *VkDeviceQueueInfo2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceQueueInfo2) AsCPtr() *VkDeviceQueueInfo2 {
	clone := newVkDeviceQueueInfo2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceQueueInfo2
func (x VkDeviceQueueInfo2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceQueueInfo2) WithDefaultSType() *VkDeviceQueueInfo2 {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceQueueInfo2
func (x *VkDeviceQueueInfo2) WithSType(y VkStructureType) *VkDeviceQueueInfo2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceQueueInfo2
func (x VkDeviceQueueInfo2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceQueueInfo2
func (x *VkDeviceQueueInfo2) WithPNext(y unsafe.Pointer) *VkDeviceQueueInfo2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDeviceQueueInfo2
func (x VkDeviceQueueInfo2) Flags() VkDeviceQueueCreateFlags {
	ptr := /* Identifier */ (*VkDeviceQueueCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDeviceQueueInfo2
func (x *VkDeviceQueueInfo2) WithFlags(y VkDeviceQueueCreateFlags) *VkDeviceQueueInfo2 {
	ptr := /* Identifier */ (*C.VkDeviceQueueCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// QueueFamilyIndex returns the value of queueFamilyIndex from VkDeviceQueueInfo2
func (x VkDeviceQueueInfo2) QueueFamilyIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueFamilyIndex)
	return *ptr
}

// WithQueueFamilyIndex copies the provided value into C space and stores it
// at queueFamilyIndex on VkDeviceQueueInfo2
func (x *VkDeviceQueueInfo2) WithQueueFamilyIndex(y uint32) *VkDeviceQueueInfo2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueFamilyIndex = *ptr
	return x
}

// QueueIndex returns the value of queueIndex from VkDeviceQueueInfo2
func (x VkDeviceQueueInfo2) QueueIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueIndex)
	return *ptr
}

// WithQueueIndex copies the provided value into C space and stores it
// at queueIndex on VkDeviceQueueInfo2
func (x *VkDeviceQueueInfo2) WithQueueIndex(y uint32) *VkDeviceQueueInfo2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueIndex = *ptr
	return x
}

//VkProtectedSubmitInfo provides a go interface for VkProtectedSubmitInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkProtectedSubmitInfo.html
type VkProtectedSubmitInfo C.struct_VkProtectedSubmitInfo

// NewVkProtectedSubmitInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkProtectedSubmitInfo() *VkProtectedSubmitInfo {
	sz := unsafe.Sizeof(VkProtectedSubmitInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkProtectedSubmitInfo)(ptr)
}

// Free releases the memory allocated by the NewVkProtectedSubmitInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkProtectedSubmitInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkProtectedSubmitInfo) AsPtr() *VkProtectedSubmitInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkProtectedSubmitInfo) AsCPtr() *VkProtectedSubmitInfo {
	clone := newVkProtectedSubmitInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkProtectedSubmitInfo
func (x VkProtectedSubmitInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkProtectedSubmitInfo) WithDefaultSType() *VkProtectedSubmitInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkProtectedSubmitInfo
func (x *VkProtectedSubmitInfo) WithSType(y VkStructureType) *VkProtectedSubmitInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkProtectedSubmitInfo
func (x VkProtectedSubmitInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkProtectedSubmitInfo
func (x *VkProtectedSubmitInfo) WithPNext(y unsafe.Pointer) *VkProtectedSubmitInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ProtectedSubmit returns the value of protectedSubmit from VkProtectedSubmitInfo
func (x VkProtectedSubmitInfo) ProtectedSubmit() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.protectedSubmit)
	return *ptr
}

// WithProtectedSubmit copies the provided value into C space and stores it
// at protectedSubmit on VkProtectedSubmitInfo
func (x *VkProtectedSubmitInfo) WithProtectedSubmit(y VkBool32) *VkProtectedSubmitInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.protectedSubmit = *ptr
	return x
}

//VkPhysicalDeviceExternalSemaphoreInfo provides a go interface for VkPhysicalDeviceExternalSemaphoreInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalSemaphoreInfo.html
type VkPhysicalDeviceExternalSemaphoreInfo C.struct_VkPhysicalDeviceExternalSemaphoreInfo

// NewVkPhysicalDeviceExternalSemaphoreInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceExternalSemaphoreInfo() *VkPhysicalDeviceExternalSemaphoreInfo {
	sz := unsafe.Sizeof(VkPhysicalDeviceExternalSemaphoreInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceExternalSemaphoreInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceExternalSemaphoreInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceExternalSemaphoreInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceExternalSemaphoreInfo) AsPtr() *VkPhysicalDeviceExternalSemaphoreInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceExternalSemaphoreInfo) AsCPtr() *VkPhysicalDeviceExternalSemaphoreInfo {
	clone := newVkPhysicalDeviceExternalSemaphoreInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceExternalSemaphoreInfo
func (x VkPhysicalDeviceExternalSemaphoreInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceExternalSemaphoreInfo) WithDefaultSType() *VkPhysicalDeviceExternalSemaphoreInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceExternalSemaphoreInfo
func (x *VkPhysicalDeviceExternalSemaphoreInfo) WithSType(y VkStructureType) *VkPhysicalDeviceExternalSemaphoreInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceExternalSemaphoreInfo
func (x VkPhysicalDeviceExternalSemaphoreInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceExternalSemaphoreInfo
func (x *VkPhysicalDeviceExternalSemaphoreInfo) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceExternalSemaphoreInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleType returns the value of handleType from VkPhysicalDeviceExternalSemaphoreInfo
func (x VkPhysicalDeviceExternalSemaphoreInfo) HandleType() VkExternalSemaphoreHandleTypeFlagBits {
	ptr := /* Identifier */ (*VkExternalSemaphoreHandleTypeFlagBits)(&x.handleType)
	return *ptr
}

// WithHandleType copies the provided value into C space and stores it
// at handleType on VkPhysicalDeviceExternalSemaphoreInfo
func (x *VkPhysicalDeviceExternalSemaphoreInfo) WithHandleType(y VkExternalSemaphoreHandleTypeFlagBits) *VkPhysicalDeviceExternalSemaphoreInfo {
	ptr := /* Identifier */ (*C.VkExternalSemaphoreHandleTypeFlagBits)(&y)
	x.handleType = *ptr
	return x
}

//VkExportMemoryAllocateInfo provides a go interface for VkExportMemoryAllocateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryAllocateInfo.html
type VkExportMemoryAllocateInfo C.struct_VkExportMemoryAllocateInfo

// NewVkExportMemoryAllocateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExportMemoryAllocateInfo() *VkExportMemoryAllocateInfo {
	sz := unsafe.Sizeof(VkExportMemoryAllocateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExportMemoryAllocateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkExportMemoryAllocateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExportMemoryAllocateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExportMemoryAllocateInfo) AsPtr() *VkExportMemoryAllocateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExportMemoryAllocateInfo) AsCPtr() *VkExportMemoryAllocateInfo {
	clone := newVkExportMemoryAllocateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExportMemoryAllocateInfo
func (x VkExportMemoryAllocateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExportMemoryAllocateInfo) WithDefaultSType() *VkExportMemoryAllocateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExportMemoryAllocateInfo
func (x *VkExportMemoryAllocateInfo) WithSType(y VkStructureType) *VkExportMemoryAllocateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExportMemoryAllocateInfo
func (x VkExportMemoryAllocateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExportMemoryAllocateInfo
func (x *VkExportMemoryAllocateInfo) WithPNext(y unsafe.Pointer) *VkExportMemoryAllocateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleTypes returns the value of handleTypes from VkExportMemoryAllocateInfo
func (x VkExportMemoryAllocateInfo) HandleTypes() VkExternalMemoryHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalMemoryHandleTypeFlags)(&x.handleTypes)
	return *ptr
}

// WithHandleTypes copies the provided value into C space and stores it
// at handleTypes on VkExportMemoryAllocateInfo
func (x *VkExportMemoryAllocateInfo) WithHandleTypes(y VkExternalMemoryHandleTypeFlags) *VkExportMemoryAllocateInfo {
	ptr := /* Identifier */ (*C.VkExternalMemoryHandleTypeFlags)(&y)
	x.handleTypes = *ptr
	return x
}

//VkSamplerYcbcrConversionCreateInfo provides a go interface for VkSamplerYcbcrConversionCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionCreateInfo.html
type VkSamplerYcbcrConversionCreateInfo C.struct_VkSamplerYcbcrConversionCreateInfo

// NewVkSamplerYcbcrConversionCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSamplerYcbcrConversionCreateInfo() *VkSamplerYcbcrConversionCreateInfo {
	sz := unsafe.Sizeof(VkSamplerYcbcrConversionCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSamplerYcbcrConversionCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSamplerYcbcrConversionCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSamplerYcbcrConversionCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSamplerYcbcrConversionCreateInfo) AsPtr() *VkSamplerYcbcrConversionCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSamplerYcbcrConversionCreateInfo) AsCPtr() *VkSamplerYcbcrConversionCreateInfo {
	clone := newVkSamplerYcbcrConversionCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSamplerYcbcrConversionCreateInfo) WithDefaultSType() *VkSamplerYcbcrConversionCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithSType(y VkStructureType) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithPNext(y unsafe.Pointer) *VkSamplerYcbcrConversionCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Format returns the value of format from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithFormat(y VkFormat) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// YcbcrModel returns the value of ycbcrModel from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) YcbcrModel() VkSamplerYcbcrModelConversion {
	ptr := /* Identifier */ (*VkSamplerYcbcrModelConversion)(&x.ycbcrModel)
	return *ptr
}

// WithYcbcrModel copies the provided value into C space and stores it
// at ycbcrModel on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithYcbcrModel(y VkSamplerYcbcrModelConversion) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerYcbcrModelConversion)(&y)
	x.ycbcrModel = *ptr
	return x
}

// YcbcrRange returns the value of ycbcrRange from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) YcbcrRange() VkSamplerYcbcrRange {
	ptr := /* Identifier */ (*VkSamplerYcbcrRange)(&x.ycbcrRange)
	return *ptr
}

// WithYcbcrRange copies the provided value into C space and stores it
// at ycbcrRange on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithYcbcrRange(y VkSamplerYcbcrRange) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerYcbcrRange)(&y)
	x.ycbcrRange = *ptr
	return x
}

// Components returns the value of components from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) Components() VkComponentMapping {
	ptr := /* Identifier */ (*VkComponentMapping)(&x.components)
	return *ptr
}

// WithComponents copies the provided value into C space and stores it
// at components on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithComponents(y VkComponentMapping) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkComponentMapping)(&y)
	x.components = *ptr
	return x
}

// XChromaOffset returns the value of xChromaOffset from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) XChromaOffset() VkChromaLocation {
	ptr := /* Identifier */ (*VkChromaLocation)(&x.xChromaOffset)
	return *ptr
}

// WithXChromaOffset copies the provided value into C space and stores it
// at xChromaOffset on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithXChromaOffset(y VkChromaLocation) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkChromaLocation)(&y)
	x.xChromaOffset = *ptr
	return x
}

// YChromaOffset returns the value of yChromaOffset from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) YChromaOffset() VkChromaLocation {
	ptr := /* Identifier */ (*VkChromaLocation)(&x.yChromaOffset)
	return *ptr
}

// WithYChromaOffset copies the provided value into C space and stores it
// at yChromaOffset on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithYChromaOffset(y VkChromaLocation) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkChromaLocation)(&y)
	x.yChromaOffset = *ptr
	return x
}

// ChromaFilter returns the value of chromaFilter from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) ChromaFilter() VkFilter {
	ptr := /* Identifier */ (*VkFilter)(&x.chromaFilter)
	return *ptr
}

// WithChromaFilter copies the provided value into C space and stores it
// at chromaFilter on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithChromaFilter(y VkFilter) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkFilter)(&y)
	x.chromaFilter = *ptr
	return x
}

// ForceExplicitReconstruction returns the value of forceExplicitReconstruction from VkSamplerYcbcrConversionCreateInfo
func (x VkSamplerYcbcrConversionCreateInfo) ForceExplicitReconstruction() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.forceExplicitReconstruction)
	return *ptr
}

// WithForceExplicitReconstruction copies the provided value into C space and stores it
// at forceExplicitReconstruction on VkSamplerYcbcrConversionCreateInfo
func (x *VkSamplerYcbcrConversionCreateInfo) WithForceExplicitReconstruction(y VkBool32) *VkSamplerYcbcrConversionCreateInfo {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.forceExplicitReconstruction = *ptr
	return x
}

//VkSamplerYcbcrConversionInfo provides a go interface for VkSamplerYcbcrConversionInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionInfo.html
type VkSamplerYcbcrConversionInfo C.struct_VkSamplerYcbcrConversionInfo

// NewVkSamplerYcbcrConversionInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSamplerYcbcrConversionInfo() *VkSamplerYcbcrConversionInfo {
	sz := unsafe.Sizeof(VkSamplerYcbcrConversionInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSamplerYcbcrConversionInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSamplerYcbcrConversionInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSamplerYcbcrConversionInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSamplerYcbcrConversionInfo) AsPtr() *VkSamplerYcbcrConversionInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSamplerYcbcrConversionInfo) AsCPtr() *VkSamplerYcbcrConversionInfo {
	clone := newVkSamplerYcbcrConversionInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSamplerYcbcrConversionInfo
func (x VkSamplerYcbcrConversionInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSamplerYcbcrConversionInfo) WithDefaultSType() *VkSamplerYcbcrConversionInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSamplerYcbcrConversionInfo
func (x *VkSamplerYcbcrConversionInfo) WithSType(y VkStructureType) *VkSamplerYcbcrConversionInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSamplerYcbcrConversionInfo
func (x VkSamplerYcbcrConversionInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSamplerYcbcrConversionInfo
func (x *VkSamplerYcbcrConversionInfo) WithPNext(y unsafe.Pointer) *VkSamplerYcbcrConversionInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Conversion returns the value of conversion from VkSamplerYcbcrConversionInfo
func (x VkSamplerYcbcrConversionInfo) Conversion() VkSamplerYcbcrConversion {
	ptr := func(x *C.VkSamplerYcbcrConversion) *VkSamplerYcbcrConversion { /* Handle */
		return (*VkSamplerYcbcrConversion)(unsafe.Pointer(x))
	}(&x.conversion)
	return *ptr
}

// WithConversion copies the provided value into C space and stores it
// at conversion on VkSamplerYcbcrConversionInfo
func (x *VkSamplerYcbcrConversionInfo) WithConversion(y VkSamplerYcbcrConversion) *VkSamplerYcbcrConversionInfo {
	ptr := func(x *VkSamplerYcbcrConversion) *C.VkSamplerYcbcrConversion { /* Handle */
		return (*C.VkSamplerYcbcrConversion)(unsafe.Pointer(x))
	}(&y)
	x.conversion = *ptr
	return x
}

//VkBindImagePlaneMemoryInfo provides a go interface for VkBindImagePlaneMemoryInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImagePlaneMemoryInfo.html
type VkBindImagePlaneMemoryInfo C.struct_VkBindImagePlaneMemoryInfo

// NewVkBindImagePlaneMemoryInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBindImagePlaneMemoryInfo() *VkBindImagePlaneMemoryInfo {
	sz := unsafe.Sizeof(VkBindImagePlaneMemoryInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBindImagePlaneMemoryInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBindImagePlaneMemoryInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBindImagePlaneMemoryInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBindImagePlaneMemoryInfo) AsPtr() *VkBindImagePlaneMemoryInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBindImagePlaneMemoryInfo) AsCPtr() *VkBindImagePlaneMemoryInfo {
	clone := newVkBindImagePlaneMemoryInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBindImagePlaneMemoryInfo
func (x VkBindImagePlaneMemoryInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBindImagePlaneMemoryInfo) WithDefaultSType() *VkBindImagePlaneMemoryInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBindImagePlaneMemoryInfo
func (x *VkBindImagePlaneMemoryInfo) WithSType(y VkStructureType) *VkBindImagePlaneMemoryInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBindImagePlaneMemoryInfo
func (x VkBindImagePlaneMemoryInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBindImagePlaneMemoryInfo
func (x *VkBindImagePlaneMemoryInfo) WithPNext(y unsafe.Pointer) *VkBindImagePlaneMemoryInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PlaneAspect returns the value of planeAspect from VkBindImagePlaneMemoryInfo
func (x VkBindImagePlaneMemoryInfo) PlaneAspect() VkImageAspectFlagBits {
	ptr := /* Identifier */ (*VkImageAspectFlagBits)(&x.planeAspect)
	return *ptr
}

// WithPlaneAspect copies the provided value into C space and stores it
// at planeAspect on VkBindImagePlaneMemoryInfo
func (x *VkBindImagePlaneMemoryInfo) WithPlaneAspect(y VkImageAspectFlagBits) *VkBindImagePlaneMemoryInfo {
	ptr := /* Identifier */ (*C.VkImageAspectFlagBits)(&y)
	x.planeAspect = *ptr
	return x
}

//VkImagePlaneMemoryRequirementsInfo provides a go interface for VkImagePlaneMemoryRequirementsInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImagePlaneMemoryRequirementsInfo.html
type VkImagePlaneMemoryRequirementsInfo C.struct_VkImagePlaneMemoryRequirementsInfo

// NewVkImagePlaneMemoryRequirementsInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImagePlaneMemoryRequirementsInfo() *VkImagePlaneMemoryRequirementsInfo {
	sz := unsafe.Sizeof(VkImagePlaneMemoryRequirementsInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImagePlaneMemoryRequirementsInfo)(ptr)
}

// Free releases the memory allocated by the NewVkImagePlaneMemoryRequirementsInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImagePlaneMemoryRequirementsInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImagePlaneMemoryRequirementsInfo) AsPtr() *VkImagePlaneMemoryRequirementsInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImagePlaneMemoryRequirementsInfo) AsCPtr() *VkImagePlaneMemoryRequirementsInfo {
	clone := newVkImagePlaneMemoryRequirementsInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImagePlaneMemoryRequirementsInfo
func (x VkImagePlaneMemoryRequirementsInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImagePlaneMemoryRequirementsInfo) WithDefaultSType() *VkImagePlaneMemoryRequirementsInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImagePlaneMemoryRequirementsInfo
func (x *VkImagePlaneMemoryRequirementsInfo) WithSType(y VkStructureType) *VkImagePlaneMemoryRequirementsInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImagePlaneMemoryRequirementsInfo
func (x VkImagePlaneMemoryRequirementsInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImagePlaneMemoryRequirementsInfo
func (x *VkImagePlaneMemoryRequirementsInfo) WithPNext(y unsafe.Pointer) *VkImagePlaneMemoryRequirementsInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PlaneAspect returns the value of planeAspect from VkImagePlaneMemoryRequirementsInfo
func (x VkImagePlaneMemoryRequirementsInfo) PlaneAspect() VkImageAspectFlagBits {
	ptr := /* Identifier */ (*VkImageAspectFlagBits)(&x.planeAspect)
	return *ptr
}

// WithPlaneAspect copies the provided value into C space and stores it
// at planeAspect on VkImagePlaneMemoryRequirementsInfo
func (x *VkImagePlaneMemoryRequirementsInfo) WithPlaneAspect(y VkImageAspectFlagBits) *VkImagePlaneMemoryRequirementsInfo {
	ptr := /* Identifier */ (*C.VkImageAspectFlagBits)(&y)
	x.planeAspect = *ptr
	return x
}

//VkPhysicalDeviceSamplerYcbcrConversionFeatures provides a go interface for VkPhysicalDeviceSamplerYcbcrConversionFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSamplerYcbcrConversionFeatures.html
type VkPhysicalDeviceSamplerYcbcrConversionFeatures C.struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures

// NewVkPhysicalDeviceSamplerYcbcrConversionFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceSamplerYcbcrConversionFeatures() *VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceSamplerYcbcrConversionFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceSamplerYcbcrConversionFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceSamplerYcbcrConversionFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceSamplerYcbcrConversionFeatures) AsPtr() *VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceSamplerYcbcrConversionFeatures) AsCPtr() *VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	clone := newVkPhysicalDeviceSamplerYcbcrConversionFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceSamplerYcbcrConversionFeatures
func (x VkPhysicalDeviceSamplerYcbcrConversionFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceSamplerYcbcrConversionFeatures) WithDefaultSType() *VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceSamplerYcbcrConversionFeatures
func (x *VkPhysicalDeviceSamplerYcbcrConversionFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceSamplerYcbcrConversionFeatures
func (x VkPhysicalDeviceSamplerYcbcrConversionFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceSamplerYcbcrConversionFeatures
func (x *VkPhysicalDeviceSamplerYcbcrConversionFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SamplerYcbcrConversion returns the value of samplerYcbcrConversion from VkPhysicalDeviceSamplerYcbcrConversionFeatures
func (x VkPhysicalDeviceSamplerYcbcrConversionFeatures) SamplerYcbcrConversion() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.samplerYcbcrConversion)
	return *ptr
}

// WithSamplerYcbcrConversion copies the provided value into C space and stores it
// at samplerYcbcrConversion on VkPhysicalDeviceSamplerYcbcrConversionFeatures
func (x *VkPhysicalDeviceSamplerYcbcrConversionFeatures) WithSamplerYcbcrConversion(y VkBool32) *VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.samplerYcbcrConversion = *ptr
	return x
}

//VkSamplerYcbcrConversionImageFormatProperties provides a go interface for VkSamplerYcbcrConversionImageFormatProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionImageFormatProperties.html
type VkSamplerYcbcrConversionImageFormatProperties C.struct_VkSamplerYcbcrConversionImageFormatProperties

// NewVkSamplerYcbcrConversionImageFormatProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSamplerYcbcrConversionImageFormatProperties() *VkSamplerYcbcrConversionImageFormatProperties {
	sz := unsafe.Sizeof(VkSamplerYcbcrConversionImageFormatProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSamplerYcbcrConversionImageFormatProperties)(ptr)
}

// Free releases the memory allocated by the NewVkSamplerYcbcrConversionImageFormatProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSamplerYcbcrConversionImageFormatProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSamplerYcbcrConversionImageFormatProperties) AsPtr() *VkSamplerYcbcrConversionImageFormatProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSamplerYcbcrConversionImageFormatProperties) AsCPtr() *VkSamplerYcbcrConversionImageFormatProperties {
	clone := newVkSamplerYcbcrConversionImageFormatProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSamplerYcbcrConversionImageFormatProperties
func (x VkSamplerYcbcrConversionImageFormatProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSamplerYcbcrConversionImageFormatProperties) WithDefaultSType() *VkSamplerYcbcrConversionImageFormatProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSamplerYcbcrConversionImageFormatProperties
func (x *VkSamplerYcbcrConversionImageFormatProperties) WithSType(y VkStructureType) *VkSamplerYcbcrConversionImageFormatProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSamplerYcbcrConversionImageFormatProperties
func (x VkSamplerYcbcrConversionImageFormatProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSamplerYcbcrConversionImageFormatProperties
func (x *VkSamplerYcbcrConversionImageFormatProperties) WithPNext(y unsafe.Pointer) *VkSamplerYcbcrConversionImageFormatProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// CombinedImageSamplerDescriptorCount returns the value of combinedImageSamplerDescriptorCount from VkSamplerYcbcrConversionImageFormatProperties
func (x VkSamplerYcbcrConversionImageFormatProperties) CombinedImageSamplerDescriptorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.combinedImageSamplerDescriptorCount)
	return *ptr
}

//VkExternalSemaphoreProperties provides a go interface for VkExternalSemaphoreProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalSemaphoreProperties.html
type VkExternalSemaphoreProperties C.struct_VkExternalSemaphoreProperties

// NewVkExternalSemaphoreProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExternalSemaphoreProperties() *VkExternalSemaphoreProperties {
	sz := unsafe.Sizeof(VkExternalSemaphoreProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExternalSemaphoreProperties)(ptr)
}

// Free releases the memory allocated by the NewVkExternalSemaphoreProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExternalSemaphoreProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExternalSemaphoreProperties) AsPtr() *VkExternalSemaphoreProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExternalSemaphoreProperties) AsCPtr() *VkExternalSemaphoreProperties {
	clone := newVkExternalSemaphoreProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExternalSemaphoreProperties
func (x VkExternalSemaphoreProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExternalSemaphoreProperties) WithDefaultSType() *VkExternalSemaphoreProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExternalSemaphoreProperties
func (x *VkExternalSemaphoreProperties) WithSType(y VkStructureType) *VkExternalSemaphoreProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExternalSemaphoreProperties
func (x VkExternalSemaphoreProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExternalSemaphoreProperties
func (x *VkExternalSemaphoreProperties) WithPNext(y unsafe.Pointer) *VkExternalSemaphoreProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ExportFromImportedHandleTypes returns the value of exportFromImportedHandleTypes from VkExternalSemaphoreProperties
func (x VkExternalSemaphoreProperties) ExportFromImportedHandleTypes() VkExternalSemaphoreHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalSemaphoreHandleTypeFlags)(&x.exportFromImportedHandleTypes)
	return *ptr
}

// CompatibleHandleTypes returns the value of compatibleHandleTypes from VkExternalSemaphoreProperties
func (x VkExternalSemaphoreProperties) CompatibleHandleTypes() VkExternalSemaphoreHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalSemaphoreHandleTypeFlags)(&x.compatibleHandleTypes)
	return *ptr
}

// ExternalSemaphoreFeatures returns the value of externalSemaphoreFeatures from VkExternalSemaphoreProperties
func (x VkExternalSemaphoreProperties) ExternalSemaphoreFeatures() VkExternalSemaphoreFeatureFlags {
	ptr := /* Identifier */ (*VkExternalSemaphoreFeatureFlags)(&x.externalSemaphoreFeatures)
	return *ptr
}

//VkMemoryDedicatedAllocateInfo provides a go interface for VkMemoryDedicatedAllocateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryDedicatedAllocateInfo.html
type VkMemoryDedicatedAllocateInfo C.struct_VkMemoryDedicatedAllocateInfo

// NewVkMemoryDedicatedAllocateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryDedicatedAllocateInfo() *VkMemoryDedicatedAllocateInfo {
	sz := unsafe.Sizeof(VkMemoryDedicatedAllocateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryDedicatedAllocateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryDedicatedAllocateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryDedicatedAllocateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryDedicatedAllocateInfo) AsPtr() *VkMemoryDedicatedAllocateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryDedicatedAllocateInfo) AsCPtr() *VkMemoryDedicatedAllocateInfo {
	clone := newVkMemoryDedicatedAllocateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMemoryDedicatedAllocateInfo
func (x VkMemoryDedicatedAllocateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMemoryDedicatedAllocateInfo) WithDefaultSType() *VkMemoryDedicatedAllocateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMemoryDedicatedAllocateInfo
func (x *VkMemoryDedicatedAllocateInfo) WithSType(y VkStructureType) *VkMemoryDedicatedAllocateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMemoryDedicatedAllocateInfo
func (x VkMemoryDedicatedAllocateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMemoryDedicatedAllocateInfo
func (x *VkMemoryDedicatedAllocateInfo) WithPNext(y unsafe.Pointer) *VkMemoryDedicatedAllocateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Image returns the value of image from VkMemoryDedicatedAllocateInfo
func (x VkMemoryDedicatedAllocateInfo) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkMemoryDedicatedAllocateInfo
func (x *VkMemoryDedicatedAllocateInfo) WithImage(y VkImage) *VkMemoryDedicatedAllocateInfo {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

// Buffer returns the value of buffer from VkMemoryDedicatedAllocateInfo
func (x VkMemoryDedicatedAllocateInfo) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkMemoryDedicatedAllocateInfo
func (x *VkMemoryDedicatedAllocateInfo) WithBuffer(y VkBuffer) *VkMemoryDedicatedAllocateInfo {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

//VkPhysicalDeviceVariablePointersFeatures provides a go interface for VkPhysicalDeviceVariablePointersFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVariablePointersFeatures.html
type VkPhysicalDeviceVariablePointersFeatures C.struct_VkPhysicalDeviceVariablePointersFeatures

// NewVkPhysicalDeviceVariablePointersFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceVariablePointersFeatures() *VkPhysicalDeviceVariablePointersFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceVariablePointersFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceVariablePointersFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceVariablePointersFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceVariablePointersFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceVariablePointersFeatures) AsPtr() *VkPhysicalDeviceVariablePointersFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceVariablePointersFeatures) AsCPtr() *VkPhysicalDeviceVariablePointersFeatures {
	clone := newVkPhysicalDeviceVariablePointersFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceVariablePointersFeatures
func (x VkPhysicalDeviceVariablePointersFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceVariablePointersFeatures) WithDefaultSType() *VkPhysicalDeviceVariablePointersFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceVariablePointersFeatures
func (x *VkPhysicalDeviceVariablePointersFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceVariablePointersFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceVariablePointersFeatures
func (x VkPhysicalDeviceVariablePointersFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceVariablePointersFeatures
func (x *VkPhysicalDeviceVariablePointersFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceVariablePointersFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// VariablePointersStorageBuffer returns the value of variablePointersStorageBuffer from VkPhysicalDeviceVariablePointersFeatures
func (x VkPhysicalDeviceVariablePointersFeatures) VariablePointersStorageBuffer() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.variablePointersStorageBuffer)
	return *ptr
}

// WithVariablePointersStorageBuffer copies the provided value into C space and stores it
// at variablePointersStorageBuffer on VkPhysicalDeviceVariablePointersFeatures
func (x *VkPhysicalDeviceVariablePointersFeatures) WithVariablePointersStorageBuffer(y VkBool32) *VkPhysicalDeviceVariablePointersFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.variablePointersStorageBuffer = *ptr
	return x
}

// VariablePointers returns the value of variablePointers from VkPhysicalDeviceVariablePointersFeatures
func (x VkPhysicalDeviceVariablePointersFeatures) VariablePointers() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.variablePointers)
	return *ptr
}

// WithVariablePointers copies the provided value into C space and stores it
// at variablePointers on VkPhysicalDeviceVariablePointersFeatures
func (x *VkPhysicalDeviceVariablePointersFeatures) WithVariablePointers(y VkBool32) *VkPhysicalDeviceVariablePointersFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.variablePointers = *ptr
	return x
}

//VkMemoryDedicatedRequirements provides a go interface for VkMemoryDedicatedRequirements.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryDedicatedRequirements.html
type VkMemoryDedicatedRequirements C.struct_VkMemoryDedicatedRequirements

// NewVkMemoryDedicatedRequirements allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryDedicatedRequirements() *VkMemoryDedicatedRequirements {
	sz := unsafe.Sizeof(VkMemoryDedicatedRequirements{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryDedicatedRequirements)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryDedicatedRequirements method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryDedicatedRequirements) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryDedicatedRequirements) AsPtr() *VkMemoryDedicatedRequirements { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryDedicatedRequirements) AsCPtr() *VkMemoryDedicatedRequirements {
	clone := newVkMemoryDedicatedRequirements()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMemoryDedicatedRequirements
func (x VkMemoryDedicatedRequirements) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMemoryDedicatedRequirements) WithDefaultSType() *VkMemoryDedicatedRequirements {
	return x.WithSType(VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMemoryDedicatedRequirements
func (x *VkMemoryDedicatedRequirements) WithSType(y VkStructureType) *VkMemoryDedicatedRequirements {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMemoryDedicatedRequirements
func (x VkMemoryDedicatedRequirements) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMemoryDedicatedRequirements
func (x *VkMemoryDedicatedRequirements) WithPNext(y unsafe.Pointer) *VkMemoryDedicatedRequirements {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PrefersDedicatedAllocation returns the value of prefersDedicatedAllocation from VkMemoryDedicatedRequirements
func (x VkMemoryDedicatedRequirements) PrefersDedicatedAllocation() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.prefersDedicatedAllocation)
	return *ptr
}

// RequiresDedicatedAllocation returns the value of requiresDedicatedAllocation from VkMemoryDedicatedRequirements
func (x VkMemoryDedicatedRequirements) RequiresDedicatedAllocation() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.requiresDedicatedAllocation)
	return *ptr
}

//VkExternalMemoryBufferCreateInfo provides a go interface for VkExternalMemoryBufferCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryBufferCreateInfo.html
type VkExternalMemoryBufferCreateInfo C.struct_VkExternalMemoryBufferCreateInfo

// NewVkExternalMemoryBufferCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExternalMemoryBufferCreateInfo() *VkExternalMemoryBufferCreateInfo {
	sz := unsafe.Sizeof(VkExternalMemoryBufferCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExternalMemoryBufferCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkExternalMemoryBufferCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExternalMemoryBufferCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExternalMemoryBufferCreateInfo) AsPtr() *VkExternalMemoryBufferCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExternalMemoryBufferCreateInfo) AsCPtr() *VkExternalMemoryBufferCreateInfo {
	clone := newVkExternalMemoryBufferCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExternalMemoryBufferCreateInfo
func (x VkExternalMemoryBufferCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExternalMemoryBufferCreateInfo) WithDefaultSType() *VkExternalMemoryBufferCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExternalMemoryBufferCreateInfo
func (x *VkExternalMemoryBufferCreateInfo) WithSType(y VkStructureType) *VkExternalMemoryBufferCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExternalMemoryBufferCreateInfo
func (x VkExternalMemoryBufferCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExternalMemoryBufferCreateInfo
func (x *VkExternalMemoryBufferCreateInfo) WithPNext(y unsafe.Pointer) *VkExternalMemoryBufferCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleTypes returns the value of handleTypes from VkExternalMemoryBufferCreateInfo
func (x VkExternalMemoryBufferCreateInfo) HandleTypes() VkExternalMemoryHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalMemoryHandleTypeFlags)(&x.handleTypes)
	return *ptr
}

// WithHandleTypes copies the provided value into C space and stores it
// at handleTypes on VkExternalMemoryBufferCreateInfo
func (x *VkExternalMemoryBufferCreateInfo) WithHandleTypes(y VkExternalMemoryHandleTypeFlags) *VkExternalMemoryBufferCreateInfo {
	ptr := /* Identifier */ (*C.VkExternalMemoryHandleTypeFlags)(&y)
	x.handleTypes = *ptr
	return x
}

//VkExternalMemoryImageCreateInfo provides a go interface for VkExternalMemoryImageCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryImageCreateInfo.html
type VkExternalMemoryImageCreateInfo C.struct_VkExternalMemoryImageCreateInfo

// NewVkExternalMemoryImageCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExternalMemoryImageCreateInfo() *VkExternalMemoryImageCreateInfo {
	sz := unsafe.Sizeof(VkExternalMemoryImageCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExternalMemoryImageCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkExternalMemoryImageCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExternalMemoryImageCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExternalMemoryImageCreateInfo) AsPtr() *VkExternalMemoryImageCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExternalMemoryImageCreateInfo) AsCPtr() *VkExternalMemoryImageCreateInfo {
	clone := newVkExternalMemoryImageCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExternalMemoryImageCreateInfo
func (x VkExternalMemoryImageCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExternalMemoryImageCreateInfo) WithDefaultSType() *VkExternalMemoryImageCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExternalMemoryImageCreateInfo
func (x *VkExternalMemoryImageCreateInfo) WithSType(y VkStructureType) *VkExternalMemoryImageCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExternalMemoryImageCreateInfo
func (x VkExternalMemoryImageCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExternalMemoryImageCreateInfo
func (x *VkExternalMemoryImageCreateInfo) WithPNext(y unsafe.Pointer) *VkExternalMemoryImageCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleTypes returns the value of handleTypes from VkExternalMemoryImageCreateInfo
func (x VkExternalMemoryImageCreateInfo) HandleTypes() VkExternalMemoryHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalMemoryHandleTypeFlags)(&x.handleTypes)
	return *ptr
}

// WithHandleTypes copies the provided value into C space and stores it
// at handleTypes on VkExternalMemoryImageCreateInfo
func (x *VkExternalMemoryImageCreateInfo) WithHandleTypes(y VkExternalMemoryHandleTypeFlags) *VkExternalMemoryImageCreateInfo {
	ptr := /* Identifier */ (*C.VkExternalMemoryHandleTypeFlags)(&y)
	x.handleTypes = *ptr
	return x
}

//VkPhysicalDeviceIDProperties provides a go interface for VkPhysicalDeviceIDProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceIDProperties.html
type VkPhysicalDeviceIDProperties C.struct_VkPhysicalDeviceIDProperties

// NewVkPhysicalDeviceIDProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceIDProperties() *VkPhysicalDeviceIDProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceIDProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceIDProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceIDProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceIDProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceIDProperties) AsPtr() *VkPhysicalDeviceIDProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceIDProperties) AsCPtr() *VkPhysicalDeviceIDProperties {
	clone := newVkPhysicalDeviceIDProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceIDProperties
func (x VkPhysicalDeviceIDProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceIDProperties) WithDefaultSType() *VkPhysicalDeviceIDProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceIDProperties
func (x *VkPhysicalDeviceIDProperties) WithSType(y VkStructureType) *VkPhysicalDeviceIDProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceIDProperties
func (x VkPhysicalDeviceIDProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceIDProperties
func (x *VkPhysicalDeviceIDProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceIDProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DeviceUUID returns the value of deviceUUID from VkPhysicalDeviceIDProperties
func (x VkPhysicalDeviceIDProperties) DeviceUUID() []byte {
	ptr := func(x *[VK_UUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_UUID_SIZE)
		return &slc
	}(&x.deviceUUID)
	return *ptr
}

// DriverUUID returns the value of driverUUID from VkPhysicalDeviceIDProperties
func (x VkPhysicalDeviceIDProperties) DriverUUID() []byte {
	ptr := func(x *[VK_UUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_UUID_SIZE)
		return &slc
	}(&x.driverUUID)
	return *ptr
}

// DeviceLUID returns the value of deviceLUID from VkPhysicalDeviceIDProperties
func (x VkPhysicalDeviceIDProperties) DeviceLUID() []byte {
	ptr := func(x *[VK_LUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_LUID_SIZE)
		return &slc
	}(&x.deviceLUID)
	return *ptr
}

// DeviceNodeMask returns the value of deviceNodeMask from VkPhysicalDeviceIDProperties
func (x VkPhysicalDeviceIDProperties) DeviceNodeMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceNodeMask)
	return *ptr
}

// DeviceLUIDValid returns the value of deviceLUIDValid from VkPhysicalDeviceIDProperties
func (x VkPhysicalDeviceIDProperties) DeviceLUIDValid() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.deviceLUIDValid)
	return *ptr
}

//VkPhysicalDevice16BitStorageFeatures provides a go interface for VkPhysicalDevice16BitStorageFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice16BitStorageFeatures.html
type VkPhysicalDevice16BitStorageFeatures C.struct_VkPhysicalDevice16BitStorageFeatures

// NewVkPhysicalDevice16BitStorageFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDevice16BitStorageFeatures() *VkPhysicalDevice16BitStorageFeatures {
	sz := unsafe.Sizeof(VkPhysicalDevice16BitStorageFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDevice16BitStorageFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDevice16BitStorageFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDevice16BitStorageFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDevice16BitStorageFeatures) AsPtr() *VkPhysicalDevice16BitStorageFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDevice16BitStorageFeatures) AsCPtr() *VkPhysicalDevice16BitStorageFeatures {
	clone := newVkPhysicalDevice16BitStorageFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDevice16BitStorageFeatures
func (x VkPhysicalDevice16BitStorageFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDevice16BitStorageFeatures) WithDefaultSType() *VkPhysicalDevice16BitStorageFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDevice16BitStorageFeatures
func (x *VkPhysicalDevice16BitStorageFeatures) WithSType(y VkStructureType) *VkPhysicalDevice16BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDevice16BitStorageFeatures
func (x VkPhysicalDevice16BitStorageFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDevice16BitStorageFeatures
func (x *VkPhysicalDevice16BitStorageFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDevice16BitStorageFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// StorageBuffer16BitAccess returns the value of storageBuffer16BitAccess from VkPhysicalDevice16BitStorageFeatures
func (x VkPhysicalDevice16BitStorageFeatures) StorageBuffer16BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storageBuffer16BitAccess)
	return *ptr
}

// WithStorageBuffer16BitAccess copies the provided value into C space and stores it
// at storageBuffer16BitAccess on VkPhysicalDevice16BitStorageFeatures
func (x *VkPhysicalDevice16BitStorageFeatures) WithStorageBuffer16BitAccess(y VkBool32) *VkPhysicalDevice16BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storageBuffer16BitAccess = *ptr
	return x
}

// UniformAndStorageBuffer16BitAccess returns the value of uniformAndStorageBuffer16BitAccess from VkPhysicalDevice16BitStorageFeatures
func (x VkPhysicalDevice16BitStorageFeatures) UniformAndStorageBuffer16BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.uniformAndStorageBuffer16BitAccess)
	return *ptr
}

// WithUniformAndStorageBuffer16BitAccess copies the provided value into C space and stores it
// at uniformAndStorageBuffer16BitAccess on VkPhysicalDevice16BitStorageFeatures
func (x *VkPhysicalDevice16BitStorageFeatures) WithUniformAndStorageBuffer16BitAccess(y VkBool32) *VkPhysicalDevice16BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.uniformAndStorageBuffer16BitAccess = *ptr
	return x
}

// StoragePushConstant16 returns the value of storagePushConstant16 from VkPhysicalDevice16BitStorageFeatures
func (x VkPhysicalDevice16BitStorageFeatures) StoragePushConstant16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storagePushConstant16)
	return *ptr
}

// WithStoragePushConstant16 copies the provided value into C space and stores it
// at storagePushConstant16 on VkPhysicalDevice16BitStorageFeatures
func (x *VkPhysicalDevice16BitStorageFeatures) WithStoragePushConstant16(y VkBool32) *VkPhysicalDevice16BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storagePushConstant16 = *ptr
	return x
}

// StorageInputOutput16 returns the value of storageInputOutput16 from VkPhysicalDevice16BitStorageFeatures
func (x VkPhysicalDevice16BitStorageFeatures) StorageInputOutput16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storageInputOutput16)
	return *ptr
}

// WithStorageInputOutput16 copies the provided value into C space and stores it
// at storageInputOutput16 on VkPhysicalDevice16BitStorageFeatures
func (x *VkPhysicalDevice16BitStorageFeatures) WithStorageInputOutput16(y VkBool32) *VkPhysicalDevice16BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storageInputOutput16 = *ptr
	return x
}

//VkBindImageMemoryInfo provides a go interface for VkBindImageMemoryInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemoryInfo.html
type VkBindImageMemoryInfo C.struct_VkBindImageMemoryInfo

// NewVkBindImageMemoryInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBindImageMemoryInfo() *VkBindImageMemoryInfo {
	sz := unsafe.Sizeof(VkBindImageMemoryInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBindImageMemoryInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBindImageMemoryInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBindImageMemoryInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBindImageMemoryInfo) AsPtr() *VkBindImageMemoryInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBindImageMemoryInfo) AsCPtr() *VkBindImageMemoryInfo {
	clone := newVkBindImageMemoryInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBindImageMemoryInfo
func (x VkBindImageMemoryInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBindImageMemoryInfo) WithDefaultSType() *VkBindImageMemoryInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBindImageMemoryInfo
func (x *VkBindImageMemoryInfo) WithSType(y VkStructureType) *VkBindImageMemoryInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBindImageMemoryInfo
func (x VkBindImageMemoryInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBindImageMemoryInfo
func (x *VkBindImageMemoryInfo) WithPNext(y unsafe.Pointer) *VkBindImageMemoryInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Image returns the value of image from VkBindImageMemoryInfo
func (x VkBindImageMemoryInfo) Image() VkImage {
	ptr := func(x *C.VkImage) *VkImage { /* Handle */ return (*VkImage)(unsafe.Pointer(x)) }(&x.image)
	return *ptr
}

// WithImage copies the provided value into C space and stores it
// at image on VkBindImageMemoryInfo
func (x *VkBindImageMemoryInfo) WithImage(y VkImage) *VkBindImageMemoryInfo {
	ptr := func(x *VkImage) *C.VkImage { /* Handle */ return (*C.VkImage)(unsafe.Pointer(x)) }(&y)
	x.image = *ptr
	return x
}

// Memory returns the value of memory from VkBindImageMemoryInfo
func (x VkBindImageMemoryInfo) Memory() VkDeviceMemory {
	ptr := func(x *C.VkDeviceMemory) *VkDeviceMemory { /* Handle */ return (*VkDeviceMemory)(unsafe.Pointer(x)) }(&x.memory)
	return *ptr
}

// WithMemory copies the provided value into C space and stores it
// at memory on VkBindImageMemoryInfo
func (x *VkBindImageMemoryInfo) WithMemory(y VkDeviceMemory) *VkBindImageMemoryInfo {
	ptr := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&y)
	x.memory = *ptr
	return x
}

// MemoryOffset returns the value of memoryOffset from VkBindImageMemoryInfo
func (x VkBindImageMemoryInfo) MemoryOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.memoryOffset)
	return *ptr
}

// WithMemoryOffset copies the provided value into C space and stores it
// at memoryOffset on VkBindImageMemoryInfo
func (x *VkBindImageMemoryInfo) WithMemoryOffset(y VkDeviceSize) *VkBindImageMemoryInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.memoryOffset = *ptr
	return x
}

//VkBindBufferMemoryInfo provides a go interface for VkBindBufferMemoryInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindBufferMemoryInfo.html
type VkBindBufferMemoryInfo C.struct_VkBindBufferMemoryInfo

// NewVkBindBufferMemoryInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBindBufferMemoryInfo() *VkBindBufferMemoryInfo {
	sz := unsafe.Sizeof(VkBindBufferMemoryInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBindBufferMemoryInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBindBufferMemoryInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBindBufferMemoryInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBindBufferMemoryInfo) AsPtr() *VkBindBufferMemoryInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBindBufferMemoryInfo) AsCPtr() *VkBindBufferMemoryInfo {
	clone := newVkBindBufferMemoryInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBindBufferMemoryInfo
func (x VkBindBufferMemoryInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBindBufferMemoryInfo) WithDefaultSType() *VkBindBufferMemoryInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBindBufferMemoryInfo
func (x *VkBindBufferMemoryInfo) WithSType(y VkStructureType) *VkBindBufferMemoryInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBindBufferMemoryInfo
func (x VkBindBufferMemoryInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBindBufferMemoryInfo
func (x *VkBindBufferMemoryInfo) WithPNext(y unsafe.Pointer) *VkBindBufferMemoryInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Buffer returns the value of buffer from VkBindBufferMemoryInfo
func (x VkBindBufferMemoryInfo) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkBindBufferMemoryInfo
func (x *VkBindBufferMemoryInfo) WithBuffer(y VkBuffer) *VkBindBufferMemoryInfo {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

// Memory returns the value of memory from VkBindBufferMemoryInfo
func (x VkBindBufferMemoryInfo) Memory() VkDeviceMemory {
	ptr := func(x *C.VkDeviceMemory) *VkDeviceMemory { /* Handle */ return (*VkDeviceMemory)(unsafe.Pointer(x)) }(&x.memory)
	return *ptr
}

// WithMemory copies the provided value into C space and stores it
// at memory on VkBindBufferMemoryInfo
func (x *VkBindBufferMemoryInfo) WithMemory(y VkDeviceMemory) *VkBindBufferMemoryInfo {
	ptr := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&y)
	x.memory = *ptr
	return x
}

// MemoryOffset returns the value of memoryOffset from VkBindBufferMemoryInfo
func (x VkBindBufferMemoryInfo) MemoryOffset() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.memoryOffset)
	return *ptr
}

// WithMemoryOffset copies the provided value into C space and stores it
// at memoryOffset on VkBindBufferMemoryInfo
func (x *VkBindBufferMemoryInfo) WithMemoryOffset(y VkDeviceSize) *VkBindBufferMemoryInfo {
	ptr := /* Identifier */ (*C.VkDeviceSize)(&y)
	x.memoryOffset = *ptr
	return x
}

//VkDescriptorUpdateTemplateEntry provides a go interface for VkDescriptorUpdateTemplateEntry.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorUpdateTemplateEntry.html
type VkDescriptorUpdateTemplateEntry C.struct_VkDescriptorUpdateTemplateEntry

// NewVkDescriptorUpdateTemplateEntry allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorUpdateTemplateEntry() *VkDescriptorUpdateTemplateEntry {
	sz := unsafe.Sizeof(VkDescriptorUpdateTemplateEntry{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorUpdateTemplateEntry)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorUpdateTemplateEntry method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorUpdateTemplateEntry) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorUpdateTemplateEntry) AsPtr() *VkDescriptorUpdateTemplateEntry { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorUpdateTemplateEntry) AsCPtr() *VkDescriptorUpdateTemplateEntry {
	clone := newVkDescriptorUpdateTemplateEntry()
	*clone = *x
	return clone
}

// DstBinding returns the value of dstBinding from VkDescriptorUpdateTemplateEntry
func (x VkDescriptorUpdateTemplateEntry) DstBinding() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstBinding)
	return *ptr
}

// WithDstBinding copies the provided value into C space and stores it
// at dstBinding on VkDescriptorUpdateTemplateEntry
func (x *VkDescriptorUpdateTemplateEntry) WithDstBinding(y uint32) *VkDescriptorUpdateTemplateEntry {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstBinding = *ptr
	return x
}

// DstArrayElement returns the value of dstArrayElement from VkDescriptorUpdateTemplateEntry
func (x VkDescriptorUpdateTemplateEntry) DstArrayElement() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstArrayElement)
	return *ptr
}

// WithDstArrayElement copies the provided value into C space and stores it
// at dstArrayElement on VkDescriptorUpdateTemplateEntry
func (x *VkDescriptorUpdateTemplateEntry) WithDstArrayElement(y uint32) *VkDescriptorUpdateTemplateEntry {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstArrayElement = *ptr
	return x
}

// DescriptorCount returns the value of descriptorCount from VkDescriptorUpdateTemplateEntry
func (x VkDescriptorUpdateTemplateEntry) DescriptorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorCount)
	return *ptr
}

// WithDescriptorCount copies the provided value into C space and stores it
// at descriptorCount on VkDescriptorUpdateTemplateEntry
func (x *VkDescriptorUpdateTemplateEntry) WithDescriptorCount(y uint32) *VkDescriptorUpdateTemplateEntry {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorCount = *ptr
	return x
}

// DescriptorType returns the value of descriptorType from VkDescriptorUpdateTemplateEntry
func (x VkDescriptorUpdateTemplateEntry) DescriptorType() VkDescriptorType {
	ptr := /* Identifier */ (*VkDescriptorType)(&x.descriptorType)
	return *ptr
}

// WithDescriptorType copies the provided value into C space and stores it
// at descriptorType on VkDescriptorUpdateTemplateEntry
func (x *VkDescriptorUpdateTemplateEntry) WithDescriptorType(y VkDescriptorType) *VkDescriptorUpdateTemplateEntry {
	ptr := /* Identifier */ (*C.VkDescriptorType)(&y)
	x.descriptorType = *ptr
	return x
}

// Offset returns the value of offset from VkDescriptorUpdateTemplateEntry
func (x VkDescriptorUpdateTemplateEntry) Offset() uint32 {
	ptr := func(x *C.ulong) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.offset)
	return *ptr
}

// WithOffset copies the provided value into C space and stores it
// at offset on VkDescriptorUpdateTemplateEntry
func (x *VkDescriptorUpdateTemplateEntry) WithOffset(y uint32) *VkDescriptorUpdateTemplateEntry {
	ptr := func(x *uint32) *C.ulong { /* Scalar */ return (*C.ulong)(unsafe.Pointer(x)) }(&y)
	x.offset = *ptr
	return x
}

// Stride returns the value of stride from VkDescriptorUpdateTemplateEntry
func (x VkDescriptorUpdateTemplateEntry) Stride() uint32 {
	ptr := func(x *C.ulong) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.stride)
	return *ptr
}

// WithStride copies the provided value into C space and stores it
// at stride on VkDescriptorUpdateTemplateEntry
func (x *VkDescriptorUpdateTemplateEntry) WithStride(y uint32) *VkDescriptorUpdateTemplateEntry {
	ptr := func(x *uint32) *C.ulong { /* Scalar */ return (*C.ulong)(unsafe.Pointer(x)) }(&y)
	x.stride = *ptr
	return x
}

//VkDescriptorUpdateTemplateCreateInfo provides a go interface for VkDescriptorUpdateTemplateCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorUpdateTemplateCreateInfo.html
type VkDescriptorUpdateTemplateCreateInfo C.struct_VkDescriptorUpdateTemplateCreateInfo

// NewVkDescriptorUpdateTemplateCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorUpdateTemplateCreateInfo() *VkDescriptorUpdateTemplateCreateInfo {
	sz := unsafe.Sizeof(VkDescriptorUpdateTemplateCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorUpdateTemplateCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorUpdateTemplateCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorUpdateTemplateCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorUpdateTemplateCreateInfo) AsPtr() *VkDescriptorUpdateTemplateCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorUpdateTemplateCreateInfo) AsCPtr() *VkDescriptorUpdateTemplateCreateInfo {
	clone := newVkDescriptorUpdateTemplateCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorUpdateTemplateCreateInfo) WithDefaultSType() *VkDescriptorUpdateTemplateCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithSType(y VkStructureType) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithPNext(y unsafe.Pointer) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) Flags() VkDescriptorUpdateTemplateCreateFlags {
	ptr := /* Identifier */ (*VkDescriptorUpdateTemplateCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithFlags(y VkDescriptorUpdateTemplateCreateFlags) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := /* Identifier */ (*C.VkDescriptorUpdateTemplateCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// DescriptorUpdateEntryCount returns the value of descriptorUpdateEntryCount from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) DescriptorUpdateEntryCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorUpdateEntryCount)
	return *ptr
}

// WithDescriptorUpdateEntryCount copies the provided value into C space and stores it
// at descriptorUpdateEntryCount on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithDescriptorUpdateEntryCount(y uint32) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorUpdateEntryCount = *ptr
	return x
}

// PDescriptorUpdateEntries returns the value of pDescriptorUpdateEntries from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) PDescriptorUpdateEntries() []VkDescriptorUpdateTemplateEntry {
	ptr := func(x **C.VkDescriptorUpdateTemplateEntry) *[]VkDescriptorUpdateTemplateEntry { /* Slice */
		slc := unsafe.Slice((*VkDescriptorUpdateTemplateEntry)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDescriptorUpdateEntries)
	return *ptr
}

// WithPDescriptorUpdateEntries copies the provided value into C space and stores it
// at pDescriptorUpdateEntries on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithPDescriptorUpdateEntries(y []VkDescriptorUpdateTemplateEntry) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := func(x *[]VkDescriptorUpdateTemplateEntry) **C.VkDescriptorUpdateTemplateEntry { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorUpdateTemplateEntry)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorUpdateTemplateEntry)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDescriptorUpdateEntries = *ptr
	return x
}

// TemplateType returns the value of templateType from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) TemplateType() VkDescriptorUpdateTemplateType {
	ptr := /* Identifier */ (*VkDescriptorUpdateTemplateType)(&x.templateType)
	return *ptr
}

// WithTemplateType copies the provided value into C space and stores it
// at templateType on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithTemplateType(y VkDescriptorUpdateTemplateType) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := /* Identifier */ (*C.VkDescriptorUpdateTemplateType)(&y)
	x.templateType = *ptr
	return x
}

// DescriptorSetLayout returns the value of descriptorSetLayout from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) DescriptorSetLayout() VkDescriptorSetLayout {
	ptr := func(x *C.VkDescriptorSetLayout) *VkDescriptorSetLayout { /* Handle */
		return (*VkDescriptorSetLayout)(unsafe.Pointer(x))
	}(&x.descriptorSetLayout)
	return *ptr
}

// WithDescriptorSetLayout copies the provided value into C space and stores it
// at descriptorSetLayout on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithDescriptorSetLayout(y VkDescriptorSetLayout) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := func(x *VkDescriptorSetLayout) *C.VkDescriptorSetLayout { /* Handle */
		return (*C.VkDescriptorSetLayout)(unsafe.Pointer(x))
	}(&y)
	x.descriptorSetLayout = *ptr
	return x
}

// PipelineBindPoint returns the value of pipelineBindPoint from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) PipelineBindPoint() VkPipelineBindPoint {
	ptr := /* Identifier */ (*VkPipelineBindPoint)(&x.pipelineBindPoint)
	return *ptr
}

// WithPipelineBindPoint copies the provided value into C space and stores it
// at pipelineBindPoint on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithPipelineBindPoint(y VkPipelineBindPoint) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := /* Identifier */ (*C.VkPipelineBindPoint)(&y)
	x.pipelineBindPoint = *ptr
	return x
}

// PipelineLayout returns the value of pipelineLayout from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) PipelineLayout() VkPipelineLayout {
	ptr := func(x *C.VkPipelineLayout) *VkPipelineLayout { /* Handle */
		return (*VkPipelineLayout)(unsafe.Pointer(x))
	}(&x.pipelineLayout)
	return *ptr
}

// WithPipelineLayout copies the provided value into C space and stores it
// at pipelineLayout on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithPipelineLayout(y VkPipelineLayout) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := func(x *VkPipelineLayout) *C.VkPipelineLayout { /* Handle */
		return (*C.VkPipelineLayout)(unsafe.Pointer(x))
	}(&y)
	x.pipelineLayout = *ptr
	return x
}

// Set returns the value of set from VkDescriptorUpdateTemplateCreateInfo
func (x VkDescriptorUpdateTemplateCreateInfo) Set() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.set)
	return *ptr
}

// WithSet copies the provided value into C space and stores it
// at set on VkDescriptorUpdateTemplateCreateInfo
func (x *VkDescriptorUpdateTemplateCreateInfo) WithSet(y uint32) *VkDescriptorUpdateTemplateCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.set = *ptr
	return x
}

//VkExternalBufferProperties provides a go interface for VkExternalBufferProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalBufferProperties.html
type VkExternalBufferProperties C.struct_VkExternalBufferProperties

// NewVkExternalBufferProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExternalBufferProperties() *VkExternalBufferProperties {
	sz := unsafe.Sizeof(VkExternalBufferProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExternalBufferProperties)(ptr)
}

// Free releases the memory allocated by the NewVkExternalBufferProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExternalBufferProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExternalBufferProperties) AsPtr() *VkExternalBufferProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExternalBufferProperties) AsCPtr() *VkExternalBufferProperties {
	clone := newVkExternalBufferProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExternalBufferProperties
func (x VkExternalBufferProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExternalBufferProperties) WithDefaultSType() *VkExternalBufferProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExternalBufferProperties
func (x *VkExternalBufferProperties) WithSType(y VkStructureType) *VkExternalBufferProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExternalBufferProperties
func (x VkExternalBufferProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExternalBufferProperties
func (x *VkExternalBufferProperties) WithPNext(y unsafe.Pointer) *VkExternalBufferProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ExternalMemoryProperties returns the value of externalMemoryProperties from VkExternalBufferProperties
func (x VkExternalBufferProperties) ExternalMemoryProperties() VkExternalMemoryProperties {
	ptr := /* Identifier */ (*VkExternalMemoryProperties)(&x.externalMemoryProperties)
	return *ptr
}

//VkPhysicalDeviceMaintenance3Properties provides a go interface for VkPhysicalDeviceMaintenance3Properties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMaintenance3Properties.html
type VkPhysicalDeviceMaintenance3Properties C.struct_VkPhysicalDeviceMaintenance3Properties

// NewVkPhysicalDeviceMaintenance3Properties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceMaintenance3Properties() *VkPhysicalDeviceMaintenance3Properties {
	sz := unsafe.Sizeof(VkPhysicalDeviceMaintenance3Properties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceMaintenance3Properties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceMaintenance3Properties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceMaintenance3Properties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceMaintenance3Properties) AsPtr() *VkPhysicalDeviceMaintenance3Properties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceMaintenance3Properties) AsCPtr() *VkPhysicalDeviceMaintenance3Properties {
	clone := newVkPhysicalDeviceMaintenance3Properties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceMaintenance3Properties
func (x VkPhysicalDeviceMaintenance3Properties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceMaintenance3Properties) WithDefaultSType() *VkPhysicalDeviceMaintenance3Properties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceMaintenance3Properties
func (x *VkPhysicalDeviceMaintenance3Properties) WithSType(y VkStructureType) *VkPhysicalDeviceMaintenance3Properties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceMaintenance3Properties
func (x VkPhysicalDeviceMaintenance3Properties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceMaintenance3Properties
func (x *VkPhysicalDeviceMaintenance3Properties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceMaintenance3Properties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MaxPerSetDescriptors returns the value of maxPerSetDescriptors from VkPhysicalDeviceMaintenance3Properties
func (x VkPhysicalDeviceMaintenance3Properties) MaxPerSetDescriptors() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerSetDescriptors)
	return *ptr
}

// MaxMemoryAllocationSize returns the value of maxMemoryAllocationSize from VkPhysicalDeviceMaintenance3Properties
func (x VkPhysicalDeviceMaintenance3Properties) MaxMemoryAllocationSize() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.maxMemoryAllocationSize)
	return *ptr
}

//VkDescriptorSetLayoutSupport provides a go interface for VkDescriptorSetLayoutSupport.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutSupport.html
type VkDescriptorSetLayoutSupport C.struct_VkDescriptorSetLayoutSupport

// NewVkDescriptorSetLayoutSupport allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorSetLayoutSupport() *VkDescriptorSetLayoutSupport {
	sz := unsafe.Sizeof(VkDescriptorSetLayoutSupport{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorSetLayoutSupport)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorSetLayoutSupport method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorSetLayoutSupport) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorSetLayoutSupport) AsPtr() *VkDescriptorSetLayoutSupport { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorSetLayoutSupport) AsCPtr() *VkDescriptorSetLayoutSupport {
	clone := newVkDescriptorSetLayoutSupport()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorSetLayoutSupport
func (x VkDescriptorSetLayoutSupport) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorSetLayoutSupport) WithDefaultSType() *VkDescriptorSetLayoutSupport {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorSetLayoutSupport
func (x *VkDescriptorSetLayoutSupport) WithSType(y VkStructureType) *VkDescriptorSetLayoutSupport {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorSetLayoutSupport
func (x VkDescriptorSetLayoutSupport) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorSetLayoutSupport
func (x *VkDescriptorSetLayoutSupport) WithPNext(y unsafe.Pointer) *VkDescriptorSetLayoutSupport {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Supported returns the value of supported from VkDescriptorSetLayoutSupport
func (x VkDescriptorSetLayoutSupport) Supported() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.supported)
	return *ptr
}

//VkPhysicalDeviceSubgroupProperties provides a go interface for VkPhysicalDeviceSubgroupProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSubgroupProperties.html
type VkPhysicalDeviceSubgroupProperties C.struct_VkPhysicalDeviceSubgroupProperties

// NewVkPhysicalDeviceSubgroupProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceSubgroupProperties() *VkPhysicalDeviceSubgroupProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceSubgroupProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceSubgroupProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceSubgroupProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceSubgroupProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceSubgroupProperties) AsPtr() *VkPhysicalDeviceSubgroupProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceSubgroupProperties) AsCPtr() *VkPhysicalDeviceSubgroupProperties {
	clone := newVkPhysicalDeviceSubgroupProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceSubgroupProperties
func (x VkPhysicalDeviceSubgroupProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceSubgroupProperties) WithDefaultSType() *VkPhysicalDeviceSubgroupProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceSubgroupProperties
func (x *VkPhysicalDeviceSubgroupProperties) WithSType(y VkStructureType) *VkPhysicalDeviceSubgroupProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceSubgroupProperties
func (x VkPhysicalDeviceSubgroupProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceSubgroupProperties
func (x *VkPhysicalDeviceSubgroupProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceSubgroupProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SubgroupSize returns the value of subgroupSize from VkPhysicalDeviceSubgroupProperties
func (x VkPhysicalDeviceSubgroupProperties) SubgroupSize() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subgroupSize)
	return *ptr
}

// SupportedStages returns the value of supportedStages from VkPhysicalDeviceSubgroupProperties
func (x VkPhysicalDeviceSubgroupProperties) SupportedStages() VkShaderStageFlags {
	ptr := /* Identifier */ (*VkShaderStageFlags)(&x.supportedStages)
	return *ptr
}

// SupportedOperations returns the value of supportedOperations from VkPhysicalDeviceSubgroupProperties
func (x VkPhysicalDeviceSubgroupProperties) SupportedOperations() VkSubgroupFeatureFlags {
	ptr := /* Identifier */ (*VkSubgroupFeatureFlags)(&x.supportedOperations)
	return *ptr
}

// QuadOperationsInAllStages returns the value of quadOperationsInAllStages from VkPhysicalDeviceSubgroupProperties
func (x VkPhysicalDeviceSubgroupProperties) QuadOperationsInAllStages() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.quadOperationsInAllStages)
	return *ptr
}

//VkPhysicalDeviceShaderDrawParameterFeatures provides a go interface for VkPhysicalDeviceShaderDrawParameterFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderDrawParameterFeatures.html
type VkPhysicalDeviceShaderDrawParameterFeatures C.struct_VkPhysicalDeviceShaderDrawParameterFeatures

// NewVkPhysicalDeviceShaderDrawParameterFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceShaderDrawParameterFeatures() *VkPhysicalDeviceShaderDrawParameterFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceShaderDrawParameterFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceShaderDrawParameterFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceShaderDrawParameterFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceShaderDrawParameterFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceShaderDrawParameterFeatures) AsPtr() *VkPhysicalDeviceShaderDrawParameterFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceShaderDrawParameterFeatures) AsCPtr() *VkPhysicalDeviceShaderDrawParameterFeatures {
	clone := newVkPhysicalDeviceShaderDrawParameterFeatures()
	*clone = *x
	return clone
}

//VkExternalMemoryProperties provides a go interface for VkExternalMemoryProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryProperties.html
type VkExternalMemoryProperties C.struct_VkExternalMemoryProperties

// NewVkExternalMemoryProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExternalMemoryProperties() *VkExternalMemoryProperties {
	sz := unsafe.Sizeof(VkExternalMemoryProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExternalMemoryProperties)(ptr)
}

// Free releases the memory allocated by the NewVkExternalMemoryProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExternalMemoryProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExternalMemoryProperties) AsPtr() *VkExternalMemoryProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExternalMemoryProperties) AsCPtr() *VkExternalMemoryProperties {
	clone := newVkExternalMemoryProperties()
	*clone = *x
	return clone
}

// ExternalMemoryFeatures returns the value of externalMemoryFeatures from VkExternalMemoryProperties
func (x VkExternalMemoryProperties) ExternalMemoryFeatures() VkExternalMemoryFeatureFlags {
	ptr := /* Identifier */ (*VkExternalMemoryFeatureFlags)(&x.externalMemoryFeatures)
	return *ptr
}

// ExportFromImportedHandleTypes returns the value of exportFromImportedHandleTypes from VkExternalMemoryProperties
func (x VkExternalMemoryProperties) ExportFromImportedHandleTypes() VkExternalMemoryHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalMemoryHandleTypeFlags)(&x.exportFromImportedHandleTypes)
	return *ptr
}

// CompatibleHandleTypes returns the value of compatibleHandleTypes from VkExternalMemoryProperties
func (x VkExternalMemoryProperties) CompatibleHandleTypes() VkExternalMemoryHandleTypeFlags {
	ptr := /* Identifier */ (*VkExternalMemoryHandleTypeFlags)(&x.compatibleHandleTypes)
	return *ptr
}

//VkPhysicalDeviceExternalImageFormatInfo provides a go interface for VkPhysicalDeviceExternalImageFormatInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalImageFormatInfo.html
type VkPhysicalDeviceExternalImageFormatInfo C.struct_VkPhysicalDeviceExternalImageFormatInfo

// NewVkPhysicalDeviceExternalImageFormatInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceExternalImageFormatInfo() *VkPhysicalDeviceExternalImageFormatInfo {
	sz := unsafe.Sizeof(VkPhysicalDeviceExternalImageFormatInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceExternalImageFormatInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceExternalImageFormatInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceExternalImageFormatInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceExternalImageFormatInfo) AsPtr() *VkPhysicalDeviceExternalImageFormatInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceExternalImageFormatInfo) AsCPtr() *VkPhysicalDeviceExternalImageFormatInfo {
	clone := newVkPhysicalDeviceExternalImageFormatInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceExternalImageFormatInfo
func (x VkPhysicalDeviceExternalImageFormatInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceExternalImageFormatInfo) WithDefaultSType() *VkPhysicalDeviceExternalImageFormatInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceExternalImageFormatInfo
func (x *VkPhysicalDeviceExternalImageFormatInfo) WithSType(y VkStructureType) *VkPhysicalDeviceExternalImageFormatInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceExternalImageFormatInfo
func (x VkPhysicalDeviceExternalImageFormatInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceExternalImageFormatInfo
func (x *VkPhysicalDeviceExternalImageFormatInfo) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceExternalImageFormatInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HandleType returns the value of handleType from VkPhysicalDeviceExternalImageFormatInfo
func (x VkPhysicalDeviceExternalImageFormatInfo) HandleType() VkExternalMemoryHandleTypeFlagBits {
	ptr := /* Identifier */ (*VkExternalMemoryHandleTypeFlagBits)(&x.handleType)
	return *ptr
}

// WithHandleType copies the provided value into C space and stores it
// at handleType on VkPhysicalDeviceExternalImageFormatInfo
func (x *VkPhysicalDeviceExternalImageFormatInfo) WithHandleType(y VkExternalMemoryHandleTypeFlagBits) *VkPhysicalDeviceExternalImageFormatInfo {
	ptr := /* Identifier */ (*C.VkExternalMemoryHandleTypeFlagBits)(&y)
	x.handleType = *ptr
	return x
}

//VkExternalImageFormatProperties provides a go interface for VkExternalImageFormatProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalImageFormatProperties.html
type VkExternalImageFormatProperties C.struct_VkExternalImageFormatProperties

// NewVkExternalImageFormatProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkExternalImageFormatProperties() *VkExternalImageFormatProperties {
	sz := unsafe.Sizeof(VkExternalImageFormatProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkExternalImageFormatProperties)(ptr)
}

// Free releases the memory allocated by the NewVkExternalImageFormatProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkExternalImageFormatProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkExternalImageFormatProperties) AsPtr() *VkExternalImageFormatProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkExternalImageFormatProperties) AsCPtr() *VkExternalImageFormatProperties {
	clone := newVkExternalImageFormatProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkExternalImageFormatProperties
func (x VkExternalImageFormatProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkExternalImageFormatProperties) WithDefaultSType() *VkExternalImageFormatProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkExternalImageFormatProperties
func (x *VkExternalImageFormatProperties) WithSType(y VkStructureType) *VkExternalImageFormatProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkExternalImageFormatProperties
func (x VkExternalImageFormatProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkExternalImageFormatProperties
func (x *VkExternalImageFormatProperties) WithPNext(y unsafe.Pointer) *VkExternalImageFormatProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ExternalMemoryProperties returns the value of externalMemoryProperties from VkExternalImageFormatProperties
func (x VkExternalImageFormatProperties) ExternalMemoryProperties() VkExternalMemoryProperties {
	ptr := /* Identifier */ (*VkExternalMemoryProperties)(&x.externalMemoryProperties)
	return *ptr
}

//VkPhysicalDeviceExternalBufferInfo provides a go interface for VkPhysicalDeviceExternalBufferInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalBufferInfo.html
type VkPhysicalDeviceExternalBufferInfo C.struct_VkPhysicalDeviceExternalBufferInfo

// NewVkPhysicalDeviceExternalBufferInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceExternalBufferInfo() *VkPhysicalDeviceExternalBufferInfo {
	sz := unsafe.Sizeof(VkPhysicalDeviceExternalBufferInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceExternalBufferInfo)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceExternalBufferInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceExternalBufferInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceExternalBufferInfo) AsPtr() *VkPhysicalDeviceExternalBufferInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceExternalBufferInfo) AsCPtr() *VkPhysicalDeviceExternalBufferInfo {
	clone := newVkPhysicalDeviceExternalBufferInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceExternalBufferInfo
func (x VkPhysicalDeviceExternalBufferInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceExternalBufferInfo) WithDefaultSType() *VkPhysicalDeviceExternalBufferInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceExternalBufferInfo
func (x *VkPhysicalDeviceExternalBufferInfo) WithSType(y VkStructureType) *VkPhysicalDeviceExternalBufferInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceExternalBufferInfo
func (x VkPhysicalDeviceExternalBufferInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceExternalBufferInfo
func (x *VkPhysicalDeviceExternalBufferInfo) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceExternalBufferInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkPhysicalDeviceExternalBufferInfo
func (x VkPhysicalDeviceExternalBufferInfo) Flags() VkBufferCreateFlags {
	ptr := /* Identifier */ (*VkBufferCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkPhysicalDeviceExternalBufferInfo
func (x *VkPhysicalDeviceExternalBufferInfo) WithFlags(y VkBufferCreateFlags) *VkPhysicalDeviceExternalBufferInfo {
	ptr := /* Identifier */ (*C.VkBufferCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Usage returns the value of usage from VkPhysicalDeviceExternalBufferInfo
func (x VkPhysicalDeviceExternalBufferInfo) Usage() VkBufferUsageFlags {
	ptr := /* Identifier */ (*VkBufferUsageFlags)(&x.usage)
	return *ptr
}

// WithUsage copies the provided value into C space and stores it
// at usage on VkPhysicalDeviceExternalBufferInfo
func (x *VkPhysicalDeviceExternalBufferInfo) WithUsage(y VkBufferUsageFlags) *VkPhysicalDeviceExternalBufferInfo {
	ptr := /* Identifier */ (*C.VkBufferUsageFlags)(&y)
	x.usage = *ptr
	return x
}

// HandleType returns the value of handleType from VkPhysicalDeviceExternalBufferInfo
func (x VkPhysicalDeviceExternalBufferInfo) HandleType() VkExternalMemoryHandleTypeFlagBits {
	ptr := /* Identifier */ (*VkExternalMemoryHandleTypeFlagBits)(&x.handleType)
	return *ptr
}

// WithHandleType copies the provided value into C space and stores it
// at handleType on VkPhysicalDeviceExternalBufferInfo
func (x *VkPhysicalDeviceExternalBufferInfo) WithHandleType(y VkExternalMemoryHandleTypeFlagBits) *VkPhysicalDeviceExternalBufferInfo {
	ptr := /* Identifier */ (*C.VkExternalMemoryHandleTypeFlagBits)(&y)
	x.handleType = *ptr
	return x
}

//VkPhysicalDeviceShaderDrawParametersFeatures provides a go interface for VkPhysicalDeviceShaderDrawParametersFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderDrawParametersFeatures.html
type VkPhysicalDeviceShaderDrawParametersFeatures C.struct_VkPhysicalDeviceShaderDrawParametersFeatures

// NewVkPhysicalDeviceShaderDrawParametersFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceShaderDrawParametersFeatures() *VkPhysicalDeviceShaderDrawParametersFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceShaderDrawParametersFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceShaderDrawParametersFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceShaderDrawParametersFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceShaderDrawParametersFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceShaderDrawParametersFeatures) AsPtr() *VkPhysicalDeviceShaderDrawParametersFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceShaderDrawParametersFeatures) AsCPtr() *VkPhysicalDeviceShaderDrawParametersFeatures {
	clone := newVkPhysicalDeviceShaderDrawParametersFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceShaderDrawParametersFeatures
func (x VkPhysicalDeviceShaderDrawParametersFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceShaderDrawParametersFeatures) WithDefaultSType() *VkPhysicalDeviceShaderDrawParametersFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceShaderDrawParametersFeatures
func (x *VkPhysicalDeviceShaderDrawParametersFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceShaderDrawParametersFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceShaderDrawParametersFeatures
func (x VkPhysicalDeviceShaderDrawParametersFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceShaderDrawParametersFeatures
func (x *VkPhysicalDeviceShaderDrawParametersFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceShaderDrawParametersFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ShaderDrawParameters returns the value of shaderDrawParameters from VkPhysicalDeviceShaderDrawParametersFeatures
func (x VkPhysicalDeviceShaderDrawParametersFeatures) ShaderDrawParameters() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDrawParameters)
	return *ptr
}

// WithShaderDrawParameters copies the provided value into C space and stores it
// at shaderDrawParameters on VkPhysicalDeviceShaderDrawParametersFeatures
func (x *VkPhysicalDeviceShaderDrawParametersFeatures) WithShaderDrawParameters(y VkBool32) *VkPhysicalDeviceShaderDrawParametersFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderDrawParameters = *ptr
	return x
}

func VkUpdateDescriptorSetWithTemplate(device VkDevice, descriptorSet VkDescriptorSet, descriptorUpdateTemplate VkDescriptorUpdateTemplate, pData unsafe.Pointer) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDescriptorSet) *C.VkDescriptorSet { /* Handle */
		return (*C.VkDescriptorSet)(unsafe.Pointer(x))
	}(&descriptorSet)
	p2 := func(x *VkDescriptorUpdateTemplate) *C.VkDescriptorUpdateTemplate { /* Handle */
		return (*C.VkDescriptorUpdateTemplate)(unsafe.Pointer(x))
	}(&descriptorUpdateTemplate)
	p3 := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&pData)
	C.vkUpdateDescriptorSetWithTemplate(*p0, *p1, *p2, *p3)
}

func VkDestroySamplerYcbcrConversion(device VkDevice, ycbcrConversion VkSamplerYcbcrConversion, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSamplerYcbcrConversion) *C.VkSamplerYcbcrConversion { /* Handle */
		return (*C.VkSamplerYcbcrConversion)(unsafe.Pointer(x))
	}(&ycbcrConversion)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroySamplerYcbcrConversion(*p0, *p1, *p2)
}

func VkCreateDescriptorUpdateTemplate(device VkDevice, pCreateInfo *VkDescriptorUpdateTemplateCreateInfo, pAllocator *VkAllocationCallbacks, pDescriptorUpdateTemplate *VkDescriptorUpdateTemplate) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDescriptorUpdateTemplateCreateInfo) **C.VkDescriptorUpdateTemplateCreateInfo { /* Pointer */
		return (**C.VkDescriptorUpdateTemplateCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkDescriptorUpdateTemplate) **C.VkDescriptorUpdateTemplate { /* Pointer */
		return (**C.VkDescriptorUpdateTemplate)(unsafe.Pointer(x))
	}(&pDescriptorUpdateTemplate)
	ret := C.vkCreateDescriptorUpdateTemplate(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceExternalFenceProperties(physicalDevice VkPhysicalDevice, pExternalFenceInfo *VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties *VkExternalFenceProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceExternalFenceInfo) **C.VkPhysicalDeviceExternalFenceInfo { /* Pointer */
		return (**C.VkPhysicalDeviceExternalFenceInfo)(unsafe.Pointer(x))
	}(&pExternalFenceInfo)
	p2 := func(x **VkExternalFenceProperties) **C.VkExternalFenceProperties { /* Pointer */
		return (**C.VkExternalFenceProperties)(unsafe.Pointer(x))
	}(&pExternalFenceProperties)
	C.vkGetPhysicalDeviceExternalFenceProperties(*p0, *p1, *p2)
}

func VkCreateSamplerYcbcrConversion(device VkDevice, pCreateInfo *VkSamplerYcbcrConversionCreateInfo, pAllocator *VkAllocationCallbacks, pYcbcrConversion *VkSamplerYcbcrConversion) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkSamplerYcbcrConversionCreateInfo) **C.VkSamplerYcbcrConversionCreateInfo { /* Pointer */
		return (**C.VkSamplerYcbcrConversionCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkSamplerYcbcrConversion) **C.VkSamplerYcbcrConversion { /* Pointer */
		return (**C.VkSamplerYcbcrConversion)(unsafe.Pointer(x))
	}(&pYcbcrConversion)
	ret := C.vkCreateSamplerYcbcrConversion(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDeviceQueue2(device VkDevice, pQueueInfo *VkDeviceQueueInfo2, pQueue *VkQueue) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDeviceQueueInfo2) **C.VkDeviceQueueInfo2 { /* Pointer */
		return (**C.VkDeviceQueueInfo2)(unsafe.Pointer(x))
	}(&pQueueInfo)
	p2 := func(x **VkQueue) **C.VkQueue { /* Pointer */ return (**C.VkQueue)(unsafe.Pointer(x)) }(&pQueue)
	C.vkGetDeviceQueue2(*p0, *p1, *p2)
}

func VkTrimCommandPool(device VkDevice, commandPool VkCommandPool, flags VkCommandPoolTrimFlags) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkCommandPool) *C.VkCommandPool { /* Handle */ return (*C.VkCommandPool)(unsafe.Pointer(x)) }(&commandPool)
	p2 := /* Identifier */ (*C.VkCommandPoolTrimFlags)(&flags)
	C.vkTrimCommandPool(*p0, *p1, *p2)
}

func VkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice VkPhysicalDevice, pFormatInfo *VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount *uint32, pProperties []VkSparseImageFormatProperties2) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceSparseImageFormatInfo2) **C.VkPhysicalDeviceSparseImageFormatInfo2 { /* Pointer */
		return (**C.VkPhysicalDeviceSparseImageFormatInfo2)(unsafe.Pointer(x))
	}(&pFormatInfo)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p3 := func(x *[]VkSparseImageFormatProperties2) **C.VkSparseImageFormatProperties2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseImageFormatProperties2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseImageFormatProperties2)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	C.vkGetPhysicalDeviceSparseImageFormatProperties2(*p0, *p1, *p2, *p3)
}

func VkGetPhysicalDeviceMemoryProperties2(physicalDevice VkPhysicalDevice, pMemoryProperties *VkPhysicalDeviceMemoryProperties2) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceMemoryProperties2) **C.VkPhysicalDeviceMemoryProperties2 { /* Pointer */
		return (**C.VkPhysicalDeviceMemoryProperties2)(unsafe.Pointer(x))
	}(&pMemoryProperties)
	C.vkGetPhysicalDeviceMemoryProperties2(*p0, *p1)
}

func VkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice VkPhysicalDevice, pQueueFamilyPropertyCount *uint32, pQueueFamilyProperties []VkQueueFamilyProperties2) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pQueueFamilyPropertyCount)
	p2 := func(x *[]VkQueueFamilyProperties2) **C.VkQueueFamilyProperties2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkQueueFamilyProperties2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkQueueFamilyProperties2)(unsafe.Pointer((&ptr)))
	}(&pQueueFamilyProperties)
	C.vkGetPhysicalDeviceQueueFamilyProperties2(*p0, *p1, *p2)
}

func VkGetPhysicalDeviceImageFormatProperties2(physicalDevice VkPhysicalDevice, pImageFormatInfo *VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties *VkImageFormatProperties2) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceImageFormatInfo2) **C.VkPhysicalDeviceImageFormatInfo2 { /* Pointer */
		return (**C.VkPhysicalDeviceImageFormatInfo2)(unsafe.Pointer(x))
	}(&pImageFormatInfo)
	p2 := func(x **VkImageFormatProperties2) **C.VkImageFormatProperties2 { /* Pointer */
		return (**C.VkImageFormatProperties2)(unsafe.Pointer(x))
	}(&pImageFormatProperties)
	ret := C.vkGetPhysicalDeviceImageFormatProperties2(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceFormatProperties2(physicalDevice VkPhysicalDevice, format VkFormat, pFormatProperties *VkFormatProperties2) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := /* Identifier */ (*C.VkFormat)(&format)
	p2 := func(x **VkFormatProperties2) **C.VkFormatProperties2 { /* Pointer */
		return (**C.VkFormatProperties2)(unsafe.Pointer(x))
	}(&pFormatProperties)
	C.vkGetPhysicalDeviceFormatProperties2(*p0, *p1, *p2)
}

func VkGetPhysicalDeviceProperties2(physicalDevice VkPhysicalDevice, pProperties *VkPhysicalDeviceProperties2) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceProperties2) **C.VkPhysicalDeviceProperties2 { /* Pointer */
		return (**C.VkPhysicalDeviceProperties2)(unsafe.Pointer(x))
	}(&pProperties)
	C.vkGetPhysicalDeviceProperties2(*p0, *p1)
}

func VkGetPhysicalDeviceFeatures2(physicalDevice VkPhysicalDevice, pFeatures *VkPhysicalDeviceFeatures2) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceFeatures2) **C.VkPhysicalDeviceFeatures2 { /* Pointer */
		return (**C.VkPhysicalDeviceFeatures2)(unsafe.Pointer(x))
	}(&pFeatures)
	C.vkGetPhysicalDeviceFeatures2(*p0, *p1)
}

func VkGetImageSparseMemoryRequirements2(device VkDevice, pInfo *VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount *uint32, pSparseMemoryRequirements []VkSparseImageMemoryRequirements2) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkImageSparseMemoryRequirementsInfo2) **C.VkImageSparseMemoryRequirementsInfo2 { /* Pointer */
		return (**C.VkImageSparseMemoryRequirementsInfo2)(unsafe.Pointer(x))
	}(&pInfo)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pSparseMemoryRequirementCount)
	p3 := func(x *[]VkSparseImageMemoryRequirements2) **C.VkSparseImageMemoryRequirements2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSparseImageMemoryRequirements2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSparseImageMemoryRequirements2)(unsafe.Pointer((&ptr)))
	}(&pSparseMemoryRequirements)
	C.vkGetImageSparseMemoryRequirements2(*p0, *p1, *p2, *p3)
}

func VkGetBufferMemoryRequirements2(device VkDevice, pInfo *VkBufferMemoryRequirementsInfo2, pMemoryRequirements *VkMemoryRequirements2) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkBufferMemoryRequirementsInfo2) **C.VkBufferMemoryRequirementsInfo2 { /* Pointer */
		return (**C.VkBufferMemoryRequirementsInfo2)(unsafe.Pointer(x))
	}(&pInfo)
	p2 := func(x **VkMemoryRequirements2) **C.VkMemoryRequirements2 { /* Pointer */
		return (**C.VkMemoryRequirements2)(unsafe.Pointer(x))
	}(&pMemoryRequirements)
	C.vkGetBufferMemoryRequirements2(*p0, *p1, *p2)
}

func VkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice VkPhysicalDevice, pExternalSemaphoreInfo *VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties *VkExternalSemaphoreProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceExternalSemaphoreInfo) **C.VkPhysicalDeviceExternalSemaphoreInfo { /* Pointer */
		return (**C.VkPhysicalDeviceExternalSemaphoreInfo)(unsafe.Pointer(x))
	}(&pExternalSemaphoreInfo)
	p2 := func(x **VkExternalSemaphoreProperties) **C.VkExternalSemaphoreProperties { /* Pointer */
		return (**C.VkExternalSemaphoreProperties)(unsafe.Pointer(x))
	}(&pExternalSemaphoreProperties)
	C.vkGetPhysicalDeviceExternalSemaphoreProperties(*p0, *p1, *p2)
}

func VkGetImageMemoryRequirements2(device VkDevice, pInfo *VkImageMemoryRequirementsInfo2, pMemoryRequirements *VkMemoryRequirements2) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkImageMemoryRequirementsInfo2) **C.VkImageMemoryRequirementsInfo2 { /* Pointer */
		return (**C.VkImageMemoryRequirementsInfo2)(unsafe.Pointer(x))
	}(&pInfo)
	p2 := func(x **VkMemoryRequirements2) **C.VkMemoryRequirements2 { /* Pointer */
		return (**C.VkMemoryRequirements2)(unsafe.Pointer(x))
	}(&pMemoryRequirements)
	C.vkGetImageMemoryRequirements2(*p0, *p1, *p2)
}

func VkDestroyDescriptorUpdateTemplate(device VkDevice, descriptorUpdateTemplate VkDescriptorUpdateTemplate, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkDescriptorUpdateTemplate) *C.VkDescriptorUpdateTemplate { /* Handle */
		return (*C.VkDescriptorUpdateTemplate)(unsafe.Pointer(x))
	}(&descriptorUpdateTemplate)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroyDescriptorUpdateTemplate(*p0, *p1, *p2)
}

func VkEnumeratePhysicalDeviceGroups(instance VkInstance, pPhysicalDeviceGroupCount *uint32, pPhysicalDeviceGroupProperties []VkPhysicalDeviceGroupProperties) VkResult {
	p0 := func(x *VkInstance) *C.VkInstance { /* Handle */ return (*C.VkInstance)(unsafe.Pointer(x)) }(&instance)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPhysicalDeviceGroupCount)
	p2 := func(x *[]VkPhysicalDeviceGroupProperties) **C.VkPhysicalDeviceGroupProperties { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPhysicalDeviceGroupProperties)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPhysicalDeviceGroupProperties)(unsafe.Pointer((&ptr)))
	}(&pPhysicalDeviceGroupProperties)
	ret := C.vkEnumeratePhysicalDeviceGroups(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCmdDispatchBase(commandBuffer VkCommandBuffer, baseGroupX uint32, baseGroupY uint32, baseGroupZ uint32, groupCountX uint32, groupCountY uint32, groupCountZ uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&baseGroupX)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&baseGroupY)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&baseGroupZ)
	p4 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&groupCountX)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&groupCountY)
	p6 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&groupCountZ)
	C.vkCmdDispatchBase(*p0, *p1, *p2, *p3, *p4, *p5, *p6)
}

func VkCmdSetDeviceMask(commandBuffer VkCommandBuffer, deviceMask uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&deviceMask)
	C.vkCmdSetDeviceMask(*p0, *p1)
}

func VkGetDeviceGroupPeerMemoryFeatures(device VkDevice, heapIndex uint32, localDeviceIndex uint32, remoteDeviceIndex uint32, pPeerMemoryFeatures *VkPeerMemoryFeatureFlags) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&heapIndex)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&localDeviceIndex)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&remoteDeviceIndex)
	p4 := func(x **VkPeerMemoryFeatureFlags) **C.VkPeerMemoryFeatureFlags { /* Pointer */
		return (**C.VkPeerMemoryFeatureFlags)(unsafe.Pointer(x))
	}(&pPeerMemoryFeatures)
	C.vkGetDeviceGroupPeerMemoryFeatures(*p0, *p1, *p2, *p3, *p4)
}

func VkGetDescriptorSetLayoutSupport(device VkDevice, pCreateInfo *VkDescriptorSetLayoutCreateInfo, pSupport *VkDescriptorSetLayoutSupport) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDescriptorSetLayoutCreateInfo) **C.VkDescriptorSetLayoutCreateInfo { /* Pointer */
		return (**C.VkDescriptorSetLayoutCreateInfo)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkDescriptorSetLayoutSupport) **C.VkDescriptorSetLayoutSupport { /* Pointer */
		return (**C.VkDescriptorSetLayoutSupport)(unsafe.Pointer(x))
	}(&pSupport)
	C.vkGetDescriptorSetLayoutSupport(*p0, *p1, *p2)
}

func VkBindImageMemory2(device VkDevice, bindInfoCount uint32, pBindInfos []VkBindImageMemoryInfo) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&bindInfoCount)
	p2 := func(x *[]VkBindImageMemoryInfo) **C.VkBindImageMemoryInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBindImageMemoryInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBindImageMemoryInfo)(unsafe.Pointer((&ptr)))
	}(&pBindInfos)
	ret := C.vkBindImageMemory2(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkBindBufferMemory2(device VkDevice, bindInfoCount uint32, pBindInfos []VkBindBufferMemoryInfo) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&bindInfoCount)
	p2 := func(x *[]VkBindBufferMemoryInfo) **C.VkBindBufferMemoryInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkBindBufferMemoryInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkBindBufferMemoryInfo)(unsafe.Pointer((&ptr)))
	}(&pBindInfos)
	ret := C.vkBindBufferMemory2(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkEnumerateInstanceVersion(pApiVersion *uint32) VkResult {
	p0 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pApiVersion)
	ret := C.vkEnumerateInstanceVersion(*p0)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceExternalBufferProperties(physicalDevice VkPhysicalDevice, pExternalBufferInfo *VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties *VkExternalBufferProperties) {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **VkPhysicalDeviceExternalBufferInfo) **C.VkPhysicalDeviceExternalBufferInfo { /* Pointer */
		return (**C.VkPhysicalDeviceExternalBufferInfo)(unsafe.Pointer(x))
	}(&pExternalBufferInfo)
	p2 := func(x **VkExternalBufferProperties) **C.VkExternalBufferProperties { /* Pointer */
		return (**C.VkExternalBufferProperties)(unsafe.Pointer(x))
	}(&pExternalBufferProperties)
	C.vkGetPhysicalDeviceExternalBufferProperties(*p0, *p1, *p2)
}

type VkDriverId uint32

const (
	VK_DRIVER_ID_AMD_PROPRIETARY           VkDriverId = 1
	VK_DRIVER_ID_AMD_OPEN_SOURCE           VkDriverId = 2
	VK_DRIVER_ID_MESA_RADV                 VkDriverId = 3
	VK_DRIVER_ID_NVIDIA_PROPRIETARY        VkDriverId = 4
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS VkDriverId = 5
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA    VkDriverId = 6
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY   VkDriverId = 7
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY      VkDriverId = 8
	VK_DRIVER_ID_ARM_PROPRIETARY           VkDriverId = 9
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER        VkDriverId = 10
	VK_DRIVER_ID_GGP_PROPRIETARY           VkDriverId = 11
	VK_DRIVER_ID_BROADCOM_PROPRIETARY      VkDriverId = 12
	VK_DRIVER_ID_MESA_LLVMPIPE             VkDriverId = 13
	VK_DRIVER_ID_MOLTENVK                  VkDriverId = 14
	VK_DRIVER_ID_COREAVI_PROPRIETARY       VkDriverId = 15
	VK_DRIVER_ID_JUICE_PROPRIETARY         VkDriverId = 16
	VK_DRIVER_ID_VERISILICON_PROPRIETARY   VkDriverId = 17
)

var (
	reverseVkDriverId map[VkDriverId]string = map[VkDriverId]string{
		VK_DRIVER_ID_AMD_PROPRIETARY:           "VK_DRIVER_ID_AMD_PROPRIETARY",
		VK_DRIVER_ID_AMD_OPEN_SOURCE:           "VK_DRIVER_ID_AMD_OPEN_SOURCE",
		VK_DRIVER_ID_MESA_RADV:                 "VK_DRIVER_ID_MESA_RADV",
		VK_DRIVER_ID_NVIDIA_PROPRIETARY:        "VK_DRIVER_ID_NVIDIA_PROPRIETARY",
		VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS",
		VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA:    "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA",
		VK_DRIVER_ID_IMAGINATION_PROPRIETARY:   "VK_DRIVER_ID_IMAGINATION_PROPRIETARY",
		VK_DRIVER_ID_QUALCOMM_PROPRIETARY:      "VK_DRIVER_ID_QUALCOMM_PROPRIETARY",
		VK_DRIVER_ID_ARM_PROPRIETARY:           "VK_DRIVER_ID_ARM_PROPRIETARY",
		VK_DRIVER_ID_GOOGLE_SWIFTSHADER:        "VK_DRIVER_ID_GOOGLE_SWIFTSHADER",
		VK_DRIVER_ID_GGP_PROPRIETARY:           "VK_DRIVER_ID_GGP_PROPRIETARY",
		VK_DRIVER_ID_BROADCOM_PROPRIETARY:      "VK_DRIVER_ID_BROADCOM_PROPRIETARY",
		VK_DRIVER_ID_MESA_LLVMPIPE:             "VK_DRIVER_ID_MESA_LLVMPIPE",
		VK_DRIVER_ID_MOLTENVK:                  "VK_DRIVER_ID_MOLTENVK",
		VK_DRIVER_ID_COREAVI_PROPRIETARY:       "VK_DRIVER_ID_COREAVI_PROPRIETARY",
		VK_DRIVER_ID_JUICE_PROPRIETARY:         "VK_DRIVER_ID_JUICE_PROPRIETARY",
		VK_DRIVER_ID_VERISILICON_PROPRIETARY:   "VK_DRIVER_ID_VERISILICON_PROPRIETARY",
	}
)

func (x VkDriverId) String() string {
	if s, ok := reverseVkDriverId[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDriverId=%d", x)
}

type VkSamplerReductionMode uint32

const (
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE VkSamplerReductionMode = 0
	VK_SAMPLER_REDUCTION_MODE_MIN              VkSamplerReductionMode = 1
	VK_SAMPLER_REDUCTION_MODE_MAX              VkSamplerReductionMode = 2
)

var (
	reverseVkSamplerReductionMode map[VkSamplerReductionMode]string = map[VkSamplerReductionMode]string{
		VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE",
		VK_SAMPLER_REDUCTION_MODE_MIN:              "VK_SAMPLER_REDUCTION_MODE_MIN",
		VK_SAMPLER_REDUCTION_MODE_MAX:              "VK_SAMPLER_REDUCTION_MODE_MAX",
	}
)

func (x VkSamplerReductionMode) String() string {
	if s, ok := reverseVkSamplerReductionMode[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSamplerReductionMode=%d", x)
}

type VkSemaphoreWaitFlagBits uint32

const (
	VK_SEMAPHORE_WAIT_ANY_BIT VkSemaphoreWaitFlagBits = (1 << 0)
)

var (
	reverseVkSemaphoreWaitFlagBits map[VkSemaphoreWaitFlagBits]string = map[VkSemaphoreWaitFlagBits]string{
		VK_SEMAPHORE_WAIT_ANY_BIT: "VK_SEMAPHORE_WAIT_ANY_BIT",
	}
)

func (x VkSemaphoreWaitFlagBits) String() string {
	if s, ok := reverseVkSemaphoreWaitFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSemaphoreWaitFlagBits=%d", x)
}

type VkDescriptorBindingFlagBits uint32

const (
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT           VkDescriptorBindingFlagBits = (1 << 0)
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT VkDescriptorBindingFlagBits = (1 << 1)
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT             VkDescriptorBindingFlagBits = (1 << 2)
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT   VkDescriptorBindingFlagBits = (1 << 3)
)

var (
	reverseVkDescriptorBindingFlagBits map[VkDescriptorBindingFlagBits]string = map[VkDescriptorBindingFlagBits]string{
		VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT:           "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT",
		VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT",
		VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT:             "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT",
		VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT:   "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT",
	}
)

func (x VkDescriptorBindingFlagBits) String() string {
	if s, ok := reverseVkDescriptorBindingFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDescriptorBindingFlagBits=%d", x)
}

type VkResolveModeFlagBits uint32

const (
	VK_RESOLVE_MODE_NONE            VkResolveModeFlagBits = 0
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT VkResolveModeFlagBits = (1 << 0)
	VK_RESOLVE_MODE_AVERAGE_BIT     VkResolveModeFlagBits = (1 << 1)
	VK_RESOLVE_MODE_MIN_BIT         VkResolveModeFlagBits = (1 << 2)
	VK_RESOLVE_MODE_MAX_BIT         VkResolveModeFlagBits = (1 << 3)
)

var (
	reverseVkResolveModeFlagBits map[VkResolveModeFlagBits]string = map[VkResolveModeFlagBits]string{
		VK_RESOLVE_MODE_NONE:            "VK_RESOLVE_MODE_NONE",
		VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT",
		VK_RESOLVE_MODE_AVERAGE_BIT:     "VK_RESOLVE_MODE_AVERAGE_BIT",
		VK_RESOLVE_MODE_MIN_BIT:         "VK_RESOLVE_MODE_MIN_BIT",
		VK_RESOLVE_MODE_MAX_BIT:         "VK_RESOLVE_MODE_MAX_BIT",
	}
)

func (x VkResolveModeFlagBits) String() string {
	if s, ok := reverseVkResolveModeFlagBits[x]; ok {
		return s
	}
	return fmt.Sprintf("VkResolveModeFlagBits=%d", x)
}

type VkShaderFloatControlsIndependence uint32

const (
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY VkShaderFloatControlsIndependence = 0
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL         VkShaderFloatControlsIndependence = 1
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE        VkShaderFloatControlsIndependence = 2
)

var (
	reverseVkShaderFloatControlsIndependence map[VkShaderFloatControlsIndependence]string = map[VkShaderFloatControlsIndependence]string{
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY",
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL:         "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL",
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE:        "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE",
	}
)

func (x VkShaderFloatControlsIndependence) String() string {
	if s, ok := reverseVkShaderFloatControlsIndependence[x]; ok {
		return s
	}
	return fmt.Sprintf("VkShaderFloatControlsIndependence=%d", x)
}

type VkSemaphoreType uint32

const (
	VK_SEMAPHORE_TYPE_BINARY   VkSemaphoreType = 0
	VK_SEMAPHORE_TYPE_TIMELINE VkSemaphoreType = 1
)

var (
	reverseVkSemaphoreType map[VkSemaphoreType]string = map[VkSemaphoreType]string{
		VK_SEMAPHORE_TYPE_BINARY:   "VK_SEMAPHORE_TYPE_BINARY",
		VK_SEMAPHORE_TYPE_TIMELINE: "VK_SEMAPHORE_TYPE_TIMELINE",
	}
)

func (x VkSemaphoreType) String() string {
	if s, ok := reverseVkSemaphoreType[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSemaphoreType=%d", x)
}

type VkDescriptorBindingFlags VkFlags

type VkResolveModeFlags VkFlags

type VkSemaphoreWaitFlags VkFlags

//VkSubpassEndInfo provides a go interface for VkSubpassEndInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassEndInfo.html
type VkSubpassEndInfo C.struct_VkSubpassEndInfo

// NewVkSubpassEndInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubpassEndInfo() *VkSubpassEndInfo {
	sz := unsafe.Sizeof(VkSubpassEndInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubpassEndInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSubpassEndInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubpassEndInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubpassEndInfo) AsPtr() *VkSubpassEndInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubpassEndInfo) AsCPtr() *VkSubpassEndInfo {
	clone := newVkSubpassEndInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSubpassEndInfo
func (x VkSubpassEndInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSubpassEndInfo) WithDefaultSType() *VkSubpassEndInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SUBPASS_END_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSubpassEndInfo
func (x *VkSubpassEndInfo) WithSType(y VkStructureType) *VkSubpassEndInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSubpassEndInfo
func (x VkSubpassEndInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSubpassEndInfo
func (x *VkSubpassEndInfo) WithPNext(y unsafe.Pointer) *VkSubpassEndInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

//VkRenderPassCreateInfo2 provides a go interface for VkRenderPassCreateInfo2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassCreateInfo2.html
type VkRenderPassCreateInfo2 C.struct_VkRenderPassCreateInfo2

// NewVkRenderPassCreateInfo2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkRenderPassCreateInfo2() *VkRenderPassCreateInfo2 {
	sz := unsafe.Sizeof(VkRenderPassCreateInfo2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkRenderPassCreateInfo2)(ptr)
}

// Free releases the memory allocated by the NewVkRenderPassCreateInfo2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkRenderPassCreateInfo2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkRenderPassCreateInfo2) AsPtr() *VkRenderPassCreateInfo2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkRenderPassCreateInfo2) AsCPtr() *VkRenderPassCreateInfo2 {
	clone := newVkRenderPassCreateInfo2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkRenderPassCreateInfo2) WithDefaultSType() *VkRenderPassCreateInfo2 {
	return x.WithSType(VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithSType(y VkStructureType) *VkRenderPassCreateInfo2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithPNext(y unsafe.Pointer) *VkRenderPassCreateInfo2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) Flags() VkRenderPassCreateFlags {
	ptr := /* Identifier */ (*VkRenderPassCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithFlags(y VkRenderPassCreateFlags) *VkRenderPassCreateInfo2 {
	ptr := /* Identifier */ (*C.VkRenderPassCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// AttachmentCount returns the value of attachmentCount from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) AttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachmentCount)
	return *ptr
}

// WithAttachmentCount copies the provided value into C space and stores it
// at attachmentCount on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithAttachmentCount(y uint32) *VkRenderPassCreateInfo2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachmentCount = *ptr
	return x
}

// PAttachments returns the value of pAttachments from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) PAttachments() []VkAttachmentDescription2 {
	ptr := func(x **C.VkAttachmentDescription2) *[]VkAttachmentDescription2 { /* Slice */
		slc := unsafe.Slice((*VkAttachmentDescription2)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pAttachments)
	return *ptr
}

// WithPAttachments copies the provided value into C space and stores it
// at pAttachments on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithPAttachments(y []VkAttachmentDescription2) *VkRenderPassCreateInfo2 {
	ptr := func(x *[]VkAttachmentDescription2) **C.VkAttachmentDescription2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentDescription2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentDescription2)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pAttachments = *ptr
	return x
}

// SubpassCount returns the value of subpassCount from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) SubpassCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subpassCount)
	return *ptr
}

// WithSubpassCount copies the provided value into C space and stores it
// at subpassCount on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithSubpassCount(y uint32) *VkRenderPassCreateInfo2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.subpassCount = *ptr
	return x
}

// PSubpasses returns the value of pSubpasses from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) PSubpasses() []VkSubpassDescription2 {
	ptr := func(x **C.VkSubpassDescription2) *[]VkSubpassDescription2 { /* Slice */
		slc := unsafe.Slice((*VkSubpassDescription2)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSubpasses)
	return *ptr
}

// WithPSubpasses copies the provided value into C space and stores it
// at pSubpasses on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithPSubpasses(y []VkSubpassDescription2) *VkRenderPassCreateInfo2 {
	ptr := func(x *[]VkSubpassDescription2) **C.VkSubpassDescription2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSubpassDescription2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSubpassDescription2)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSubpasses = *ptr
	return x
}

// DependencyCount returns the value of dependencyCount from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) DependencyCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dependencyCount)
	return *ptr
}

// WithDependencyCount copies the provided value into C space and stores it
// at dependencyCount on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithDependencyCount(y uint32) *VkRenderPassCreateInfo2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dependencyCount = *ptr
	return x
}

// PDependencies returns the value of pDependencies from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) PDependencies() []VkSubpassDependency2 {
	ptr := func(x **C.VkSubpassDependency2) *[]VkSubpassDependency2 { /* Slice */
		slc := unsafe.Slice((*VkSubpassDependency2)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDependencies)
	return *ptr
}

// WithPDependencies copies the provided value into C space and stores it
// at pDependencies on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithPDependencies(y []VkSubpassDependency2) *VkRenderPassCreateInfo2 {
	ptr := func(x *[]VkSubpassDependency2) **C.VkSubpassDependency2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSubpassDependency2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSubpassDependency2)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDependencies = *ptr
	return x
}

// CorrelatedViewMaskCount returns the value of correlatedViewMaskCount from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) CorrelatedViewMaskCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.correlatedViewMaskCount)
	return *ptr
}

// WithCorrelatedViewMaskCount copies the provided value into C space and stores it
// at correlatedViewMaskCount on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithCorrelatedViewMaskCount(y uint32) *VkRenderPassCreateInfo2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.correlatedViewMaskCount = *ptr
	return x
}

// PCorrelatedViewMasks returns the value of pCorrelatedViewMasks from VkRenderPassCreateInfo2
func (x VkRenderPassCreateInfo2) PCorrelatedViewMasks() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pCorrelatedViewMasks)
	return *ptr
}

// WithPCorrelatedViewMasks copies the provided value into C space and stores it
// at pCorrelatedViewMasks on VkRenderPassCreateInfo2
func (x *VkRenderPassCreateInfo2) WithPCorrelatedViewMasks(y []uint32) *VkRenderPassCreateInfo2 {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pCorrelatedViewMasks = *ptr
	return x
}

//VkAttachmentDescription2 provides a go interface for VkAttachmentDescription2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescription2.html
type VkAttachmentDescription2 C.struct_VkAttachmentDescription2

// NewVkAttachmentDescription2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAttachmentDescription2() *VkAttachmentDescription2 {
	sz := unsafe.Sizeof(VkAttachmentDescription2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAttachmentDescription2)(ptr)
}

// Free releases the memory allocated by the NewVkAttachmentDescription2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAttachmentDescription2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAttachmentDescription2) AsPtr() *VkAttachmentDescription2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAttachmentDescription2) AsCPtr() *VkAttachmentDescription2 {
	clone := newVkAttachmentDescription2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkAttachmentDescription2
func (x VkAttachmentDescription2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkAttachmentDescription2) WithDefaultSType() *VkAttachmentDescription2 {
	return x.WithSType(VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithSType(y VkStructureType) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkAttachmentDescription2
func (x VkAttachmentDescription2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithPNext(y unsafe.Pointer) *VkAttachmentDescription2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkAttachmentDescription2
func (x VkAttachmentDescription2) Flags() VkAttachmentDescriptionFlags {
	ptr := /* Identifier */ (*VkAttachmentDescriptionFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithFlags(y VkAttachmentDescriptionFlags) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkAttachmentDescriptionFlags)(&y)
	x.flags = *ptr
	return x
}

// Format returns the value of format from VkAttachmentDescription2
func (x VkAttachmentDescription2) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// WithFormat copies the provided value into C space and stores it
// at format on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithFormat(y VkFormat) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.format = *ptr
	return x
}

// Samples returns the value of samples from VkAttachmentDescription2
func (x VkAttachmentDescription2) Samples() VkSampleCountFlagBits {
	ptr := /* Identifier */ (*VkSampleCountFlagBits)(&x.samples)
	return *ptr
}

// WithSamples copies the provided value into C space and stores it
// at samples on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithSamples(y VkSampleCountFlagBits) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkSampleCountFlagBits)(&y)
	x.samples = *ptr
	return x
}

// LoadOp returns the value of loadOp from VkAttachmentDescription2
func (x VkAttachmentDescription2) LoadOp() VkAttachmentLoadOp {
	ptr := /* Identifier */ (*VkAttachmentLoadOp)(&x.loadOp)
	return *ptr
}

// WithLoadOp copies the provided value into C space and stores it
// at loadOp on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithLoadOp(y VkAttachmentLoadOp) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkAttachmentLoadOp)(&y)
	x.loadOp = *ptr
	return x
}

// StoreOp returns the value of storeOp from VkAttachmentDescription2
func (x VkAttachmentDescription2) StoreOp() VkAttachmentStoreOp {
	ptr := /* Identifier */ (*VkAttachmentStoreOp)(&x.storeOp)
	return *ptr
}

// WithStoreOp copies the provided value into C space and stores it
// at storeOp on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithStoreOp(y VkAttachmentStoreOp) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkAttachmentStoreOp)(&y)
	x.storeOp = *ptr
	return x
}

// StencilLoadOp returns the value of stencilLoadOp from VkAttachmentDescription2
func (x VkAttachmentDescription2) StencilLoadOp() VkAttachmentLoadOp {
	ptr := /* Identifier */ (*VkAttachmentLoadOp)(&x.stencilLoadOp)
	return *ptr
}

// WithStencilLoadOp copies the provided value into C space and stores it
// at stencilLoadOp on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithStencilLoadOp(y VkAttachmentLoadOp) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkAttachmentLoadOp)(&y)
	x.stencilLoadOp = *ptr
	return x
}

// StencilStoreOp returns the value of stencilStoreOp from VkAttachmentDescription2
func (x VkAttachmentDescription2) StencilStoreOp() VkAttachmentStoreOp {
	ptr := /* Identifier */ (*VkAttachmentStoreOp)(&x.stencilStoreOp)
	return *ptr
}

// WithStencilStoreOp copies the provided value into C space and stores it
// at stencilStoreOp on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithStencilStoreOp(y VkAttachmentStoreOp) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkAttachmentStoreOp)(&y)
	x.stencilStoreOp = *ptr
	return x
}

// InitialLayout returns the value of initialLayout from VkAttachmentDescription2
func (x VkAttachmentDescription2) InitialLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.initialLayout)
	return *ptr
}

// WithInitialLayout copies the provided value into C space and stores it
// at initialLayout on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithInitialLayout(y VkImageLayout) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.initialLayout = *ptr
	return x
}

// FinalLayout returns the value of finalLayout from VkAttachmentDescription2
func (x VkAttachmentDescription2) FinalLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.finalLayout)
	return *ptr
}

// WithFinalLayout copies the provided value into C space and stores it
// at finalLayout on VkAttachmentDescription2
func (x *VkAttachmentDescription2) WithFinalLayout(y VkImageLayout) *VkAttachmentDescription2 {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.finalLayout = *ptr
	return x
}

//VkAttachmentReference2 provides a go interface for VkAttachmentReference2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReference2.html
type VkAttachmentReference2 C.struct_VkAttachmentReference2

// NewVkAttachmentReference2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAttachmentReference2() *VkAttachmentReference2 {
	sz := unsafe.Sizeof(VkAttachmentReference2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAttachmentReference2)(ptr)
}

// Free releases the memory allocated by the NewVkAttachmentReference2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAttachmentReference2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAttachmentReference2) AsPtr() *VkAttachmentReference2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAttachmentReference2) AsCPtr() *VkAttachmentReference2 {
	clone := newVkAttachmentReference2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkAttachmentReference2
func (x VkAttachmentReference2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkAttachmentReference2) WithDefaultSType() *VkAttachmentReference2 {
	return x.WithSType(VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkAttachmentReference2
func (x *VkAttachmentReference2) WithSType(y VkStructureType) *VkAttachmentReference2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkAttachmentReference2
func (x VkAttachmentReference2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkAttachmentReference2
func (x *VkAttachmentReference2) WithPNext(y unsafe.Pointer) *VkAttachmentReference2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Attachment returns the value of attachment from VkAttachmentReference2
func (x VkAttachmentReference2) Attachment() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachment)
	return *ptr
}

// WithAttachment copies the provided value into C space and stores it
// at attachment on VkAttachmentReference2
func (x *VkAttachmentReference2) WithAttachment(y uint32) *VkAttachmentReference2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachment = *ptr
	return x
}

// Layout returns the value of layout from VkAttachmentReference2
func (x VkAttachmentReference2) Layout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.layout)
	return *ptr
}

// WithLayout copies the provided value into C space and stores it
// at layout on VkAttachmentReference2
func (x *VkAttachmentReference2) WithLayout(y VkImageLayout) *VkAttachmentReference2 {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.layout = *ptr
	return x
}

// AspectMask returns the value of aspectMask from VkAttachmentReference2
func (x VkAttachmentReference2) AspectMask() VkImageAspectFlags {
	ptr := /* Identifier */ (*VkImageAspectFlags)(&x.aspectMask)
	return *ptr
}

// WithAspectMask copies the provided value into C space and stores it
// at aspectMask on VkAttachmentReference2
func (x *VkAttachmentReference2) WithAspectMask(y VkImageAspectFlags) *VkAttachmentReference2 {
	ptr := /* Identifier */ (*C.VkImageAspectFlags)(&y)
	x.aspectMask = *ptr
	return x
}

//VkSubpassDescription2 provides a go interface for VkSubpassDescription2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescription2.html
type VkSubpassDescription2 C.struct_VkSubpassDescription2

// NewVkSubpassDescription2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubpassDescription2() *VkSubpassDescription2 {
	sz := unsafe.Sizeof(VkSubpassDescription2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubpassDescription2)(ptr)
}

// Free releases the memory allocated by the NewVkSubpassDescription2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubpassDescription2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubpassDescription2) AsPtr() *VkSubpassDescription2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubpassDescription2) AsCPtr() *VkSubpassDescription2 {
	clone := newVkSubpassDescription2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSubpassDescription2
func (x VkSubpassDescription2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSubpassDescription2) WithDefaultSType() *VkSubpassDescription2 {
	return x.WithSType(VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSubpassDescription2
func (x *VkSubpassDescription2) WithSType(y VkStructureType) *VkSubpassDescription2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSubpassDescription2
func (x VkSubpassDescription2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPNext(y unsafe.Pointer) *VkSubpassDescription2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkSubpassDescription2
func (x VkSubpassDescription2) Flags() VkSubpassDescriptionFlags {
	ptr := /* Identifier */ (*VkSubpassDescriptionFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSubpassDescription2
func (x *VkSubpassDescription2) WithFlags(y VkSubpassDescriptionFlags) *VkSubpassDescription2 {
	ptr := /* Identifier */ (*C.VkSubpassDescriptionFlags)(&y)
	x.flags = *ptr
	return x
}

// PipelineBindPoint returns the value of pipelineBindPoint from VkSubpassDescription2
func (x VkSubpassDescription2) PipelineBindPoint() VkPipelineBindPoint {
	ptr := /* Identifier */ (*VkPipelineBindPoint)(&x.pipelineBindPoint)
	return *ptr
}

// WithPipelineBindPoint copies the provided value into C space and stores it
// at pipelineBindPoint on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPipelineBindPoint(y VkPipelineBindPoint) *VkSubpassDescription2 {
	ptr := /* Identifier */ (*C.VkPipelineBindPoint)(&y)
	x.pipelineBindPoint = *ptr
	return x
}

// ViewMask returns the value of viewMask from VkSubpassDescription2
func (x VkSubpassDescription2) ViewMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.viewMask)
	return *ptr
}

// WithViewMask copies the provided value into C space and stores it
// at viewMask on VkSubpassDescription2
func (x *VkSubpassDescription2) WithViewMask(y uint32) *VkSubpassDescription2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.viewMask = *ptr
	return x
}

// InputAttachmentCount returns the value of inputAttachmentCount from VkSubpassDescription2
func (x VkSubpassDescription2) InputAttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.inputAttachmentCount)
	return *ptr
}

// WithInputAttachmentCount copies the provided value into C space and stores it
// at inputAttachmentCount on VkSubpassDescription2
func (x *VkSubpassDescription2) WithInputAttachmentCount(y uint32) *VkSubpassDescription2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.inputAttachmentCount = *ptr
	return x
}

// PInputAttachments returns the value of pInputAttachments from VkSubpassDescription2
func (x VkSubpassDescription2) PInputAttachments() []VkAttachmentReference2 {
	ptr := func(x **C.VkAttachmentReference2) *[]VkAttachmentReference2 { /* Slice */
		slc := unsafe.Slice((*VkAttachmentReference2)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pInputAttachments)
	return *ptr
}

// WithPInputAttachments copies the provided value into C space and stores it
// at pInputAttachments on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPInputAttachments(y []VkAttachmentReference2) *VkSubpassDescription2 {
	ptr := func(x *[]VkAttachmentReference2) **C.VkAttachmentReference2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentReference2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentReference2)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pInputAttachments = *ptr
	return x
}

// ColorAttachmentCount returns the value of colorAttachmentCount from VkSubpassDescription2
func (x VkSubpassDescription2) ColorAttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.colorAttachmentCount)
	return *ptr
}

// WithColorAttachmentCount copies the provided value into C space and stores it
// at colorAttachmentCount on VkSubpassDescription2
func (x *VkSubpassDescription2) WithColorAttachmentCount(y uint32) *VkSubpassDescription2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.colorAttachmentCount = *ptr
	return x
}

// PColorAttachments returns the value of pColorAttachments from VkSubpassDescription2
func (x VkSubpassDescription2) PColorAttachments() []VkAttachmentReference2 {
	ptr := func(x **C.VkAttachmentReference2) *[]VkAttachmentReference2 { /* Slice */
		slc := unsafe.Slice((*VkAttachmentReference2)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pColorAttachments)
	return *ptr
}

// WithPColorAttachments copies the provided value into C space and stores it
// at pColorAttachments on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPColorAttachments(y []VkAttachmentReference2) *VkSubpassDescription2 {
	ptr := func(x *[]VkAttachmentReference2) **C.VkAttachmentReference2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentReference2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentReference2)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pColorAttachments = *ptr
	return x
}

// PResolveAttachments returns the value of pResolveAttachments from VkSubpassDescription2
func (x VkSubpassDescription2) PResolveAttachments() []VkAttachmentReference2 {
	ptr := func(x **C.VkAttachmentReference2) *[]VkAttachmentReference2 { /* Slice */
		slc := unsafe.Slice((*VkAttachmentReference2)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pResolveAttachments)
	return *ptr
}

// WithPResolveAttachments copies the provided value into C space and stores it
// at pResolveAttachments on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPResolveAttachments(y []VkAttachmentReference2) *VkSubpassDescription2 {
	ptr := func(x *[]VkAttachmentReference2) **C.VkAttachmentReference2 { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkAttachmentReference2)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkAttachmentReference2)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pResolveAttachments = *ptr
	return x
}

// PDepthStencilAttachment returns the value of pDepthStencilAttachment from VkSubpassDescription2
func (x VkSubpassDescription2) PDepthStencilAttachment() *VkAttachmentReference2 {
	ptr := func(x **C.VkAttachmentReference2) **VkAttachmentReference2 { /* Pointer */
		return (**VkAttachmentReference2)(unsafe.Pointer(x))
	}(&x.pDepthStencilAttachment)
	return *ptr
}

// WithPDepthStencilAttachment copies the provided value into C space and stores it
// at pDepthStencilAttachment on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPDepthStencilAttachment(y *VkAttachmentReference2) *VkSubpassDescription2 {
	ptr := func(x **VkAttachmentReference2) **C.VkAttachmentReference2 { /* Pointer */
		return (**C.VkAttachmentReference2)(unsafe.Pointer(x))
	}(&y)
	x.pDepthStencilAttachment = *ptr
	return x
}

// PreserveAttachmentCount returns the value of preserveAttachmentCount from VkSubpassDescription2
func (x VkSubpassDescription2) PreserveAttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.preserveAttachmentCount)
	return *ptr
}

// WithPreserveAttachmentCount copies the provided value into C space and stores it
// at preserveAttachmentCount on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPreserveAttachmentCount(y uint32) *VkSubpassDescription2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.preserveAttachmentCount = *ptr
	return x
}

// PPreserveAttachments returns the value of pPreserveAttachments from VkSubpassDescription2
func (x VkSubpassDescription2) PPreserveAttachments() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pPreserveAttachments)
	return *ptr
}

// WithPPreserveAttachments copies the provided value into C space and stores it
// at pPreserveAttachments on VkSubpassDescription2
func (x *VkSubpassDescription2) WithPPreserveAttachments(y []uint32) *VkSubpassDescription2 {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pPreserveAttachments = *ptr
	return x
}

//VkSubpassDependency2 provides a go interface for VkSubpassDependency2.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDependency2.html
type VkSubpassDependency2 C.struct_VkSubpassDependency2

// NewVkSubpassDependency2 allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubpassDependency2() *VkSubpassDependency2 {
	sz := unsafe.Sizeof(VkSubpassDependency2{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubpassDependency2)(ptr)
}

// Free releases the memory allocated by the NewVkSubpassDependency2 method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubpassDependency2) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubpassDependency2) AsPtr() *VkSubpassDependency2 { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubpassDependency2) AsCPtr() *VkSubpassDependency2 {
	clone := newVkSubpassDependency2()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSubpassDependency2
func (x VkSubpassDependency2) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSubpassDependency2) WithDefaultSType() *VkSubpassDependency2 {
	return x.WithSType(VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSubpassDependency2
func (x *VkSubpassDependency2) WithSType(y VkStructureType) *VkSubpassDependency2 {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSubpassDependency2
func (x VkSubpassDependency2) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSubpassDependency2
func (x *VkSubpassDependency2) WithPNext(y unsafe.Pointer) *VkSubpassDependency2 {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SrcSubpass returns the value of srcSubpass from VkSubpassDependency2
func (x VkSubpassDependency2) SrcSubpass() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.srcSubpass)
	return *ptr
}

// WithSrcSubpass copies the provided value into C space and stores it
// at srcSubpass on VkSubpassDependency2
func (x *VkSubpassDependency2) WithSrcSubpass(y uint32) *VkSubpassDependency2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.srcSubpass = *ptr
	return x
}

// DstSubpass returns the value of dstSubpass from VkSubpassDependency2
func (x VkSubpassDependency2) DstSubpass() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.dstSubpass)
	return *ptr
}

// WithDstSubpass copies the provided value into C space and stores it
// at dstSubpass on VkSubpassDependency2
func (x *VkSubpassDependency2) WithDstSubpass(y uint32) *VkSubpassDependency2 {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.dstSubpass = *ptr
	return x
}

// SrcStageMask returns the value of srcStageMask from VkSubpassDependency2
func (x VkSubpassDependency2) SrcStageMask() VkPipelineStageFlags {
	ptr := /* Identifier */ (*VkPipelineStageFlags)(&x.srcStageMask)
	return *ptr
}

// WithSrcStageMask copies the provided value into C space and stores it
// at srcStageMask on VkSubpassDependency2
func (x *VkSubpassDependency2) WithSrcStageMask(y VkPipelineStageFlags) *VkSubpassDependency2 {
	ptr := /* Identifier */ (*C.VkPipelineStageFlags)(&y)
	x.srcStageMask = *ptr
	return x
}

// DstStageMask returns the value of dstStageMask from VkSubpassDependency2
func (x VkSubpassDependency2) DstStageMask() VkPipelineStageFlags {
	ptr := /* Identifier */ (*VkPipelineStageFlags)(&x.dstStageMask)
	return *ptr
}

// WithDstStageMask copies the provided value into C space and stores it
// at dstStageMask on VkSubpassDependency2
func (x *VkSubpassDependency2) WithDstStageMask(y VkPipelineStageFlags) *VkSubpassDependency2 {
	ptr := /* Identifier */ (*C.VkPipelineStageFlags)(&y)
	x.dstStageMask = *ptr
	return x
}

// SrcAccessMask returns the value of srcAccessMask from VkSubpassDependency2
func (x VkSubpassDependency2) SrcAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.srcAccessMask)
	return *ptr
}

// WithSrcAccessMask copies the provided value into C space and stores it
// at srcAccessMask on VkSubpassDependency2
func (x *VkSubpassDependency2) WithSrcAccessMask(y VkAccessFlags) *VkSubpassDependency2 {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.srcAccessMask = *ptr
	return x
}

// DstAccessMask returns the value of dstAccessMask from VkSubpassDependency2
func (x VkSubpassDependency2) DstAccessMask() VkAccessFlags {
	ptr := /* Identifier */ (*VkAccessFlags)(&x.dstAccessMask)
	return *ptr
}

// WithDstAccessMask copies the provided value into C space and stores it
// at dstAccessMask on VkSubpassDependency2
func (x *VkSubpassDependency2) WithDstAccessMask(y VkAccessFlags) *VkSubpassDependency2 {
	ptr := /* Identifier */ (*C.VkAccessFlags)(&y)
	x.dstAccessMask = *ptr
	return x
}

// DependencyFlags returns the value of dependencyFlags from VkSubpassDependency2
func (x VkSubpassDependency2) DependencyFlags() VkDependencyFlags {
	ptr := /* Identifier */ (*VkDependencyFlags)(&x.dependencyFlags)
	return *ptr
}

// WithDependencyFlags copies the provided value into C space and stores it
// at dependencyFlags on VkSubpassDependency2
func (x *VkSubpassDependency2) WithDependencyFlags(y VkDependencyFlags) *VkSubpassDependency2 {
	ptr := /* Identifier */ (*C.VkDependencyFlags)(&y)
	x.dependencyFlags = *ptr
	return x
}

// ViewOffset returns the value of viewOffset from VkSubpassDependency2
func (x VkSubpassDependency2) ViewOffset() int32 {
	ptr := func(x *C.int) *int32 { /* Scalar */ return (*int32)(unsafe.Pointer(x)) }(&x.viewOffset)
	return *ptr
}

// WithViewOffset copies the provided value into C space and stores it
// at viewOffset on VkSubpassDependency2
func (x *VkSubpassDependency2) WithViewOffset(y int32) *VkSubpassDependency2 {
	ptr := func(x *int32) *C.int { /* Scalar */ return (*C.int)(unsafe.Pointer(x)) }(&y)
	x.viewOffset = *ptr
	return x
}

//VkSubpassBeginInfo provides a go interface for VkSubpassBeginInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassBeginInfo.html
type VkSubpassBeginInfo C.struct_VkSubpassBeginInfo

// NewVkSubpassBeginInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubpassBeginInfo() *VkSubpassBeginInfo {
	sz := unsafe.Sizeof(VkSubpassBeginInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubpassBeginInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSubpassBeginInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubpassBeginInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubpassBeginInfo) AsPtr() *VkSubpassBeginInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubpassBeginInfo) AsCPtr() *VkSubpassBeginInfo {
	clone := newVkSubpassBeginInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSubpassBeginInfo
func (x VkSubpassBeginInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSubpassBeginInfo) WithDefaultSType() *VkSubpassBeginInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSubpassBeginInfo
func (x *VkSubpassBeginInfo) WithSType(y VkStructureType) *VkSubpassBeginInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSubpassBeginInfo
func (x VkSubpassBeginInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSubpassBeginInfo
func (x *VkSubpassBeginInfo) WithPNext(y unsafe.Pointer) *VkSubpassBeginInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Contents returns the value of contents from VkSubpassBeginInfo
func (x VkSubpassBeginInfo) Contents() VkSubpassContents {
	ptr := /* Identifier */ (*VkSubpassContents)(&x.contents)
	return *ptr
}

// WithContents copies the provided value into C space and stores it
// at contents on VkSubpassBeginInfo
func (x *VkSubpassBeginInfo) WithContents(y VkSubpassContents) *VkSubpassBeginInfo {
	ptr := /* Identifier */ (*C.VkSubpassContents)(&y)
	x.contents = *ptr
	return x
}

//VkSemaphoreWaitInfo provides a go interface for VkSemaphoreWaitInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreWaitInfo.html
type VkSemaphoreWaitInfo C.struct_VkSemaphoreWaitInfo

// NewVkSemaphoreWaitInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSemaphoreWaitInfo() *VkSemaphoreWaitInfo {
	sz := unsafe.Sizeof(VkSemaphoreWaitInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSemaphoreWaitInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSemaphoreWaitInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSemaphoreWaitInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSemaphoreWaitInfo) AsPtr() *VkSemaphoreWaitInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSemaphoreWaitInfo) AsCPtr() *VkSemaphoreWaitInfo {
	clone := newVkSemaphoreWaitInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSemaphoreWaitInfo
func (x VkSemaphoreWaitInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSemaphoreWaitInfo) WithDefaultSType() *VkSemaphoreWaitInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSemaphoreWaitInfo
func (x *VkSemaphoreWaitInfo) WithSType(y VkStructureType) *VkSemaphoreWaitInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSemaphoreWaitInfo
func (x VkSemaphoreWaitInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSemaphoreWaitInfo
func (x *VkSemaphoreWaitInfo) WithPNext(y unsafe.Pointer) *VkSemaphoreWaitInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkSemaphoreWaitInfo
func (x VkSemaphoreWaitInfo) Flags() VkSemaphoreWaitFlags {
	ptr := /* Identifier */ (*VkSemaphoreWaitFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSemaphoreWaitInfo
func (x *VkSemaphoreWaitInfo) WithFlags(y VkSemaphoreWaitFlags) *VkSemaphoreWaitInfo {
	ptr := /* Identifier */ (*C.VkSemaphoreWaitFlags)(&y)
	x.flags = *ptr
	return x
}

// SemaphoreCount returns the value of semaphoreCount from VkSemaphoreWaitInfo
func (x VkSemaphoreWaitInfo) SemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.semaphoreCount)
	return *ptr
}

// WithSemaphoreCount copies the provided value into C space and stores it
// at semaphoreCount on VkSemaphoreWaitInfo
func (x *VkSemaphoreWaitInfo) WithSemaphoreCount(y uint32) *VkSemaphoreWaitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.semaphoreCount = *ptr
	return x
}

// PSemaphores returns the value of pSemaphores from VkSemaphoreWaitInfo
func (x VkSemaphoreWaitInfo) PSemaphores() []VkSemaphore {
	ptr := func(x **C.VkSemaphore) *[]VkSemaphore { /* Slice */
		slc := unsafe.Slice((*VkSemaphore)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSemaphores)
	return *ptr
}

// WithPSemaphores copies the provided value into C space and stores it
// at pSemaphores on VkSemaphoreWaitInfo
func (x *VkSemaphoreWaitInfo) WithPSemaphores(y []VkSemaphore) *VkSemaphoreWaitInfo {
	ptr := func(x *[]VkSemaphore) **C.VkSemaphore { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSemaphore)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSemaphore)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSemaphores = *ptr
	return x
}

// PValues returns the value of pValues from VkSemaphoreWaitInfo
func (x VkSemaphoreWaitInfo) PValues() []uint64 {
	ptr := func(x **C.ulonglong) *[]uint64 { /* Slice */
		slc := unsafe.Slice((*uint64)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pValues)
	return *ptr
}

// WithPValues copies the provided value into C space and stores it
// at pValues on VkSemaphoreWaitInfo
func (x *VkSemaphoreWaitInfo) WithPValues(y []uint64) *VkSemaphoreWaitInfo {
	ptr := func(x *[]uint64) **C.ulonglong { /* Slice */
		if len(*x) > 0 {
			slc := (*C.ulonglong)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.ulonglong)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pValues = *ptr
	return x
}

//VkPhysicalDevice8BitStorageFeatures provides a go interface for VkPhysicalDevice8BitStorageFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice8BitStorageFeatures.html
type VkPhysicalDevice8BitStorageFeatures C.struct_VkPhysicalDevice8BitStorageFeatures

// NewVkPhysicalDevice8BitStorageFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDevice8BitStorageFeatures() *VkPhysicalDevice8BitStorageFeatures {
	sz := unsafe.Sizeof(VkPhysicalDevice8BitStorageFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDevice8BitStorageFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDevice8BitStorageFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDevice8BitStorageFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDevice8BitStorageFeatures) AsPtr() *VkPhysicalDevice8BitStorageFeatures { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDevice8BitStorageFeatures) AsCPtr() *VkPhysicalDevice8BitStorageFeatures {
	clone := newVkPhysicalDevice8BitStorageFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDevice8BitStorageFeatures
func (x VkPhysicalDevice8BitStorageFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDevice8BitStorageFeatures) WithDefaultSType() *VkPhysicalDevice8BitStorageFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDevice8BitStorageFeatures
func (x *VkPhysicalDevice8BitStorageFeatures) WithSType(y VkStructureType) *VkPhysicalDevice8BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDevice8BitStorageFeatures
func (x VkPhysicalDevice8BitStorageFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDevice8BitStorageFeatures
func (x *VkPhysicalDevice8BitStorageFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDevice8BitStorageFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// StorageBuffer8BitAccess returns the value of storageBuffer8BitAccess from VkPhysicalDevice8BitStorageFeatures
func (x VkPhysicalDevice8BitStorageFeatures) StorageBuffer8BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storageBuffer8BitAccess)
	return *ptr
}

// WithStorageBuffer8BitAccess copies the provided value into C space and stores it
// at storageBuffer8BitAccess on VkPhysicalDevice8BitStorageFeatures
func (x *VkPhysicalDevice8BitStorageFeatures) WithStorageBuffer8BitAccess(y VkBool32) *VkPhysicalDevice8BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storageBuffer8BitAccess = *ptr
	return x
}

// UniformAndStorageBuffer8BitAccess returns the value of uniformAndStorageBuffer8BitAccess from VkPhysicalDevice8BitStorageFeatures
func (x VkPhysicalDevice8BitStorageFeatures) UniformAndStorageBuffer8BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.uniformAndStorageBuffer8BitAccess)
	return *ptr
}

// WithUniformAndStorageBuffer8BitAccess copies the provided value into C space and stores it
// at uniformAndStorageBuffer8BitAccess on VkPhysicalDevice8BitStorageFeatures
func (x *VkPhysicalDevice8BitStorageFeatures) WithUniformAndStorageBuffer8BitAccess(y VkBool32) *VkPhysicalDevice8BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.uniformAndStorageBuffer8BitAccess = *ptr
	return x
}

// StoragePushConstant8 returns the value of storagePushConstant8 from VkPhysicalDevice8BitStorageFeatures
func (x VkPhysicalDevice8BitStorageFeatures) StoragePushConstant8() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storagePushConstant8)
	return *ptr
}

// WithStoragePushConstant8 copies the provided value into C space and stores it
// at storagePushConstant8 on VkPhysicalDevice8BitStorageFeatures
func (x *VkPhysicalDevice8BitStorageFeatures) WithStoragePushConstant8(y VkBool32) *VkPhysicalDevice8BitStorageFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storagePushConstant8 = *ptr
	return x
}

//VkSemaphoreSignalInfo provides a go interface for VkSemaphoreSignalInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreSignalInfo.html
type VkSemaphoreSignalInfo C.struct_VkSemaphoreSignalInfo

// NewVkSemaphoreSignalInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSemaphoreSignalInfo() *VkSemaphoreSignalInfo {
	sz := unsafe.Sizeof(VkSemaphoreSignalInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSemaphoreSignalInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSemaphoreSignalInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSemaphoreSignalInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSemaphoreSignalInfo) AsPtr() *VkSemaphoreSignalInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSemaphoreSignalInfo) AsCPtr() *VkSemaphoreSignalInfo {
	clone := newVkSemaphoreSignalInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSemaphoreSignalInfo
func (x VkSemaphoreSignalInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSemaphoreSignalInfo) WithDefaultSType() *VkSemaphoreSignalInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSemaphoreSignalInfo
func (x *VkSemaphoreSignalInfo) WithSType(y VkStructureType) *VkSemaphoreSignalInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSemaphoreSignalInfo
func (x VkSemaphoreSignalInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSemaphoreSignalInfo
func (x *VkSemaphoreSignalInfo) WithPNext(y unsafe.Pointer) *VkSemaphoreSignalInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Semaphore returns the value of semaphore from VkSemaphoreSignalInfo
func (x VkSemaphoreSignalInfo) Semaphore() VkSemaphore {
	ptr := func(x *C.VkSemaphore) *VkSemaphore { /* Handle */ return (*VkSemaphore)(unsafe.Pointer(x)) }(&x.semaphore)
	return *ptr
}

// WithSemaphore copies the provided value into C space and stores it
// at semaphore on VkSemaphoreSignalInfo
func (x *VkSemaphoreSignalInfo) WithSemaphore(y VkSemaphore) *VkSemaphoreSignalInfo {
	ptr := func(x *VkSemaphore) *C.VkSemaphore { /* Handle */ return (*C.VkSemaphore)(unsafe.Pointer(x)) }(&y)
	x.semaphore = *ptr
	return x
}

// Value returns the value of value from VkSemaphoreSignalInfo
func (x VkSemaphoreSignalInfo) Value() uint64 {
	ptr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&x.value)
	return *ptr
}

// WithValue copies the provided value into C space and stores it
// at value on VkSemaphoreSignalInfo
func (x *VkSemaphoreSignalInfo) WithValue(y uint64) *VkSemaphoreSignalInfo {
	ptr := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&y)
	x.value = *ptr
	return x
}

//VkConformanceVersion provides a go interface for VkConformanceVersion.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkConformanceVersion.html
type VkConformanceVersion C.struct_VkConformanceVersion

// NewVkConformanceVersion allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkConformanceVersion() *VkConformanceVersion {
	sz := unsafe.Sizeof(VkConformanceVersion{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkConformanceVersion)(ptr)
}

// Free releases the memory allocated by the NewVkConformanceVersion method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkConformanceVersion) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkConformanceVersion) AsPtr() *VkConformanceVersion { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkConformanceVersion) AsCPtr() *VkConformanceVersion {
	clone := newVkConformanceVersion()
	*clone = *x
	return clone
}

// Major returns the value of major from VkConformanceVersion
func (x VkConformanceVersion) Major() byte {
	ptr := func(x *C.uchar) *byte { /* Scalar */ return (*byte)(unsafe.Pointer(x)) }(&x.major)
	return *ptr
}

// WithMajor copies the provided value into C space and stores it
// at major on VkConformanceVersion
func (x *VkConformanceVersion) WithMajor(y byte) *VkConformanceVersion {
	ptr := func(x *byte) *C.uchar { /* Scalar */ return (*C.uchar)(unsafe.Pointer(x)) }(&y)
	x.major = *ptr
	return x
}

// Minor returns the value of minor from VkConformanceVersion
func (x VkConformanceVersion) Minor() byte {
	ptr := func(x *C.uchar) *byte { /* Scalar */ return (*byte)(unsafe.Pointer(x)) }(&x.minor)
	return *ptr
}

// WithMinor copies the provided value into C space and stores it
// at minor on VkConformanceVersion
func (x *VkConformanceVersion) WithMinor(y byte) *VkConformanceVersion {
	ptr := func(x *byte) *C.uchar { /* Scalar */ return (*C.uchar)(unsafe.Pointer(x)) }(&y)
	x.minor = *ptr
	return x
}

// Subminor returns the value of subminor from VkConformanceVersion
func (x VkConformanceVersion) Subminor() byte {
	ptr := func(x *C.uchar) *byte { /* Scalar */ return (*byte)(unsafe.Pointer(x)) }(&x.subminor)
	return *ptr
}

// WithSubminor copies the provided value into C space and stores it
// at subminor on VkConformanceVersion
func (x *VkConformanceVersion) WithSubminor(y byte) *VkConformanceVersion {
	ptr := func(x *byte) *C.uchar { /* Scalar */ return (*C.uchar)(unsafe.Pointer(x)) }(&y)
	x.subminor = *ptr
	return x
}

// Patch returns the value of patch from VkConformanceVersion
func (x VkConformanceVersion) Patch() byte {
	ptr := func(x *C.uchar) *byte { /* Scalar */ return (*byte)(unsafe.Pointer(x)) }(&x.patch)
	return *ptr
}

// WithPatch copies the provided value into C space and stores it
// at patch on VkConformanceVersion
func (x *VkConformanceVersion) WithPatch(y byte) *VkConformanceVersion {
	ptr := func(x *byte) *C.uchar { /* Scalar */ return (*C.uchar)(unsafe.Pointer(x)) }(&y)
	x.patch = *ptr
	return x
}

//VkPhysicalDeviceDriverProperties provides a go interface for VkPhysicalDeviceDriverProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDriverProperties.html
type VkPhysicalDeviceDriverProperties C.struct_VkPhysicalDeviceDriverProperties

// NewVkPhysicalDeviceDriverProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceDriverProperties() *VkPhysicalDeviceDriverProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceDriverProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceDriverProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceDriverProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceDriverProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceDriverProperties) AsPtr() *VkPhysicalDeviceDriverProperties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceDriverProperties) AsCPtr() *VkPhysicalDeviceDriverProperties {
	clone := newVkPhysicalDeviceDriverProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceDriverProperties
func (x VkPhysicalDeviceDriverProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceDriverProperties) WithDefaultSType() *VkPhysicalDeviceDriverProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceDriverProperties
func (x *VkPhysicalDeviceDriverProperties) WithSType(y VkStructureType) *VkPhysicalDeviceDriverProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceDriverProperties
func (x VkPhysicalDeviceDriverProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceDriverProperties
func (x *VkPhysicalDeviceDriverProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceDriverProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DriverID returns the value of driverID from VkPhysicalDeviceDriverProperties
func (x VkPhysicalDeviceDriverProperties) DriverID() VkDriverId {
	ptr := /* Identifier */ (*VkDriverId)(&x.driverID)
	return *ptr
}

// DriverName returns the value of driverName from VkPhysicalDeviceDriverProperties
func (x VkPhysicalDeviceDriverProperties) DriverName() []byte {
	ptr := func(x *[VK_MAX_DRIVER_NAME_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_DRIVER_NAME_SIZE)
		return &slc
	}(&x.driverName)
	return *ptr
}

// DriverInfo returns the value of driverInfo from VkPhysicalDeviceDriverProperties
func (x VkPhysicalDeviceDriverProperties) DriverInfo() []byte {
	ptr := func(x *[VK_MAX_DRIVER_INFO_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_DRIVER_INFO_SIZE)
		return &slc
	}(&x.driverInfo)
	return *ptr
}

// ConformanceVersion returns the value of conformanceVersion from VkPhysicalDeviceDriverProperties
func (x VkPhysicalDeviceDriverProperties) ConformanceVersion() VkConformanceVersion {
	ptr := /* Identifier */ (*VkConformanceVersion)(&x.conformanceVersion)
	return *ptr
}

//VkPhysicalDeviceBufferDeviceAddressFeatures provides a go interface for VkPhysicalDeviceBufferDeviceAddressFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeatures.html
type VkPhysicalDeviceBufferDeviceAddressFeatures C.struct_VkPhysicalDeviceBufferDeviceAddressFeatures

// NewVkPhysicalDeviceBufferDeviceAddressFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceBufferDeviceAddressFeatures() *VkPhysicalDeviceBufferDeviceAddressFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceBufferDeviceAddressFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceBufferDeviceAddressFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) AsPtr() *VkPhysicalDeviceBufferDeviceAddressFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) AsCPtr() *VkPhysicalDeviceBufferDeviceAddressFeatures {
	clone := newVkPhysicalDeviceBufferDeviceAddressFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceBufferDeviceAddressFeatures
func (x VkPhysicalDeviceBufferDeviceAddressFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) WithDefaultSType() *VkPhysicalDeviceBufferDeviceAddressFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceBufferDeviceAddressFeatures
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceBufferDeviceAddressFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceBufferDeviceAddressFeatures
func (x VkPhysicalDeviceBufferDeviceAddressFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceBufferDeviceAddressFeatures
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceBufferDeviceAddressFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// BufferDeviceAddress returns the value of bufferDeviceAddress from VkPhysicalDeviceBufferDeviceAddressFeatures
func (x VkPhysicalDeviceBufferDeviceAddressFeatures) BufferDeviceAddress() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.bufferDeviceAddress)
	return *ptr
}

// WithBufferDeviceAddress copies the provided value into C space and stores it
// at bufferDeviceAddress on VkPhysicalDeviceBufferDeviceAddressFeatures
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) WithBufferDeviceAddress(y VkBool32) *VkPhysicalDeviceBufferDeviceAddressFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.bufferDeviceAddress = *ptr
	return x
}

// BufferDeviceAddressCaptureReplay returns the value of bufferDeviceAddressCaptureReplay from VkPhysicalDeviceBufferDeviceAddressFeatures
func (x VkPhysicalDeviceBufferDeviceAddressFeatures) BufferDeviceAddressCaptureReplay() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.bufferDeviceAddressCaptureReplay)
	return *ptr
}

// WithBufferDeviceAddressCaptureReplay copies the provided value into C space and stores it
// at bufferDeviceAddressCaptureReplay on VkPhysicalDeviceBufferDeviceAddressFeatures
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) WithBufferDeviceAddressCaptureReplay(y VkBool32) *VkPhysicalDeviceBufferDeviceAddressFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.bufferDeviceAddressCaptureReplay = *ptr
	return x
}

// BufferDeviceAddressMultiDevice returns the value of bufferDeviceAddressMultiDevice from VkPhysicalDeviceBufferDeviceAddressFeatures
func (x VkPhysicalDeviceBufferDeviceAddressFeatures) BufferDeviceAddressMultiDevice() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.bufferDeviceAddressMultiDevice)
	return *ptr
}

// WithBufferDeviceAddressMultiDevice copies the provided value into C space and stores it
// at bufferDeviceAddressMultiDevice on VkPhysicalDeviceBufferDeviceAddressFeatures
func (x *VkPhysicalDeviceBufferDeviceAddressFeatures) WithBufferDeviceAddressMultiDevice(y VkBool32) *VkPhysicalDeviceBufferDeviceAddressFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.bufferDeviceAddressMultiDevice = *ptr
	return x
}

//VkBufferDeviceAddressInfo provides a go interface for VkBufferDeviceAddressInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferDeviceAddressInfo.html
type VkBufferDeviceAddressInfo C.struct_VkBufferDeviceAddressInfo

// NewVkBufferDeviceAddressInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferDeviceAddressInfo() *VkBufferDeviceAddressInfo {
	sz := unsafe.Sizeof(VkBufferDeviceAddressInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferDeviceAddressInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBufferDeviceAddressInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferDeviceAddressInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferDeviceAddressInfo) AsPtr() *VkBufferDeviceAddressInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferDeviceAddressInfo) AsCPtr() *VkBufferDeviceAddressInfo {
	clone := newVkBufferDeviceAddressInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBufferDeviceAddressInfo
func (x VkBufferDeviceAddressInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBufferDeviceAddressInfo) WithDefaultSType() *VkBufferDeviceAddressInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBufferDeviceAddressInfo
func (x *VkBufferDeviceAddressInfo) WithSType(y VkStructureType) *VkBufferDeviceAddressInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBufferDeviceAddressInfo
func (x VkBufferDeviceAddressInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBufferDeviceAddressInfo
func (x *VkBufferDeviceAddressInfo) WithPNext(y unsafe.Pointer) *VkBufferDeviceAddressInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Buffer returns the value of buffer from VkBufferDeviceAddressInfo
func (x VkBufferDeviceAddressInfo) Buffer() VkBuffer {
	ptr := func(x *C.VkBuffer) *VkBuffer { /* Handle */ return (*VkBuffer)(unsafe.Pointer(x)) }(&x.buffer)
	return *ptr
}

// WithBuffer copies the provided value into C space and stores it
// at buffer on VkBufferDeviceAddressInfo
func (x *VkBufferDeviceAddressInfo) WithBuffer(y VkBuffer) *VkBufferDeviceAddressInfo {
	ptr := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&y)
	x.buffer = *ptr
	return x
}

//VkPhysicalDeviceShaderAtomicInt64Features provides a go interface for VkPhysicalDeviceShaderAtomicInt64Features.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderAtomicInt64Features.html
type VkPhysicalDeviceShaderAtomicInt64Features C.struct_VkPhysicalDeviceShaderAtomicInt64Features

// NewVkPhysicalDeviceShaderAtomicInt64Features allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceShaderAtomicInt64Features() *VkPhysicalDeviceShaderAtomicInt64Features {
	sz := unsafe.Sizeof(VkPhysicalDeviceShaderAtomicInt64Features{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceShaderAtomicInt64Features)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceShaderAtomicInt64Features method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceShaderAtomicInt64Features) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceShaderAtomicInt64Features) AsPtr() *VkPhysicalDeviceShaderAtomicInt64Features {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceShaderAtomicInt64Features) AsCPtr() *VkPhysicalDeviceShaderAtomicInt64Features {
	clone := newVkPhysicalDeviceShaderAtomicInt64Features()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceShaderAtomicInt64Features
func (x VkPhysicalDeviceShaderAtomicInt64Features) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceShaderAtomicInt64Features) WithDefaultSType() *VkPhysicalDeviceShaderAtomicInt64Features {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceShaderAtomicInt64Features
func (x *VkPhysicalDeviceShaderAtomicInt64Features) WithSType(y VkStructureType) *VkPhysicalDeviceShaderAtomicInt64Features {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceShaderAtomicInt64Features
func (x VkPhysicalDeviceShaderAtomicInt64Features) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceShaderAtomicInt64Features
func (x *VkPhysicalDeviceShaderAtomicInt64Features) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceShaderAtomicInt64Features {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ShaderBufferInt64Atomics returns the value of shaderBufferInt64Atomics from VkPhysicalDeviceShaderAtomicInt64Features
func (x VkPhysicalDeviceShaderAtomicInt64Features) ShaderBufferInt64Atomics() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderBufferInt64Atomics)
	return *ptr
}

// WithShaderBufferInt64Atomics copies the provided value into C space and stores it
// at shaderBufferInt64Atomics on VkPhysicalDeviceShaderAtomicInt64Features
func (x *VkPhysicalDeviceShaderAtomicInt64Features) WithShaderBufferInt64Atomics(y VkBool32) *VkPhysicalDeviceShaderAtomicInt64Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderBufferInt64Atomics = *ptr
	return x
}

// ShaderSharedInt64Atomics returns the value of shaderSharedInt64Atomics from VkPhysicalDeviceShaderAtomicInt64Features
func (x VkPhysicalDeviceShaderAtomicInt64Features) ShaderSharedInt64Atomics() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSharedInt64Atomics)
	return *ptr
}

// WithShaderSharedInt64Atomics copies the provided value into C space and stores it
// at shaderSharedInt64Atomics on VkPhysicalDeviceShaderAtomicInt64Features
func (x *VkPhysicalDeviceShaderAtomicInt64Features) WithShaderSharedInt64Atomics(y VkBool32) *VkPhysicalDeviceShaderAtomicInt64Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderSharedInt64Atomics = *ptr
	return x
}

//VkPhysicalDeviceShaderFloat16Int8Features provides a go interface for VkPhysicalDeviceShaderFloat16Int8Features.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderFloat16Int8Features.html
type VkPhysicalDeviceShaderFloat16Int8Features C.struct_VkPhysicalDeviceShaderFloat16Int8Features

// NewVkPhysicalDeviceShaderFloat16Int8Features allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceShaderFloat16Int8Features() *VkPhysicalDeviceShaderFloat16Int8Features {
	sz := unsafe.Sizeof(VkPhysicalDeviceShaderFloat16Int8Features{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceShaderFloat16Int8Features)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceShaderFloat16Int8Features method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceShaderFloat16Int8Features) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceShaderFloat16Int8Features) AsPtr() *VkPhysicalDeviceShaderFloat16Int8Features {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceShaderFloat16Int8Features) AsCPtr() *VkPhysicalDeviceShaderFloat16Int8Features {
	clone := newVkPhysicalDeviceShaderFloat16Int8Features()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceShaderFloat16Int8Features
func (x VkPhysicalDeviceShaderFloat16Int8Features) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceShaderFloat16Int8Features) WithDefaultSType() *VkPhysicalDeviceShaderFloat16Int8Features {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceShaderFloat16Int8Features
func (x *VkPhysicalDeviceShaderFloat16Int8Features) WithSType(y VkStructureType) *VkPhysicalDeviceShaderFloat16Int8Features {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceShaderFloat16Int8Features
func (x VkPhysicalDeviceShaderFloat16Int8Features) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceShaderFloat16Int8Features
func (x *VkPhysicalDeviceShaderFloat16Int8Features) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceShaderFloat16Int8Features {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ShaderFloat16 returns the value of shaderFloat16 from VkPhysicalDeviceShaderFloat16Int8Features
func (x VkPhysicalDeviceShaderFloat16Int8Features) ShaderFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderFloat16)
	return *ptr
}

// WithShaderFloat16 copies the provided value into C space and stores it
// at shaderFloat16 on VkPhysicalDeviceShaderFloat16Int8Features
func (x *VkPhysicalDeviceShaderFloat16Int8Features) WithShaderFloat16(y VkBool32) *VkPhysicalDeviceShaderFloat16Int8Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderFloat16 = *ptr
	return x
}

// ShaderInt8 returns the value of shaderInt8 from VkPhysicalDeviceShaderFloat16Int8Features
func (x VkPhysicalDeviceShaderFloat16Int8Features) ShaderInt8() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInt8)
	return *ptr
}

// WithShaderInt8 copies the provided value into C space and stores it
// at shaderInt8 on VkPhysicalDeviceShaderFloat16Int8Features
func (x *VkPhysicalDeviceShaderFloat16Int8Features) WithShaderInt8(y VkBool32) *VkPhysicalDeviceShaderFloat16Int8Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInt8 = *ptr
	return x
}

//VkPhysicalDeviceFloatControlsProperties provides a go interface for VkPhysicalDeviceFloatControlsProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFloatControlsProperties.html
type VkPhysicalDeviceFloatControlsProperties C.struct_VkPhysicalDeviceFloatControlsProperties

// NewVkPhysicalDeviceFloatControlsProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceFloatControlsProperties() *VkPhysicalDeviceFloatControlsProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceFloatControlsProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceFloatControlsProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceFloatControlsProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceFloatControlsProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceFloatControlsProperties) AsPtr() *VkPhysicalDeviceFloatControlsProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceFloatControlsProperties) AsCPtr() *VkPhysicalDeviceFloatControlsProperties {
	clone := newVkPhysicalDeviceFloatControlsProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceFloatControlsProperties) WithDefaultSType() *VkPhysicalDeviceFloatControlsProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceFloatControlsProperties
func (x *VkPhysicalDeviceFloatControlsProperties) WithSType(y VkStructureType) *VkPhysicalDeviceFloatControlsProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceFloatControlsProperties
func (x *VkPhysicalDeviceFloatControlsProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceFloatControlsProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DenormBehaviorIndependence returns the value of denormBehaviorIndependence from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) DenormBehaviorIndependence() VkShaderFloatControlsIndependence {
	ptr := /* Identifier */ (*VkShaderFloatControlsIndependence)(&x.denormBehaviorIndependence)
	return *ptr
}

// RoundingModeIndependence returns the value of roundingModeIndependence from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) RoundingModeIndependence() VkShaderFloatControlsIndependence {
	ptr := /* Identifier */ (*VkShaderFloatControlsIndependence)(&x.roundingModeIndependence)
	return *ptr
}

// ShaderSignedZeroInfNanPreserveFloat16 returns the value of shaderSignedZeroInfNanPreserveFloat16 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderSignedZeroInfNanPreserveFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSignedZeroInfNanPreserveFloat16)
	return *ptr
}

// ShaderSignedZeroInfNanPreserveFloat32 returns the value of shaderSignedZeroInfNanPreserveFloat32 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderSignedZeroInfNanPreserveFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSignedZeroInfNanPreserveFloat32)
	return *ptr
}

// ShaderSignedZeroInfNanPreserveFloat64 returns the value of shaderSignedZeroInfNanPreserveFloat64 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderSignedZeroInfNanPreserveFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSignedZeroInfNanPreserveFloat64)
	return *ptr
}

// ShaderDenormPreserveFloat16 returns the value of shaderDenormPreserveFloat16 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderDenormPreserveFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormPreserveFloat16)
	return *ptr
}

// ShaderDenormPreserveFloat32 returns the value of shaderDenormPreserveFloat32 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderDenormPreserveFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormPreserveFloat32)
	return *ptr
}

// ShaderDenormPreserveFloat64 returns the value of shaderDenormPreserveFloat64 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderDenormPreserveFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormPreserveFloat64)
	return *ptr
}

// ShaderDenormFlushToZeroFloat16 returns the value of shaderDenormFlushToZeroFloat16 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderDenormFlushToZeroFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormFlushToZeroFloat16)
	return *ptr
}

// ShaderDenormFlushToZeroFloat32 returns the value of shaderDenormFlushToZeroFloat32 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderDenormFlushToZeroFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormFlushToZeroFloat32)
	return *ptr
}

// ShaderDenormFlushToZeroFloat64 returns the value of shaderDenormFlushToZeroFloat64 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderDenormFlushToZeroFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormFlushToZeroFloat64)
	return *ptr
}

// ShaderRoundingModeRTEFloat16 returns the value of shaderRoundingModeRTEFloat16 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderRoundingModeRTEFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTEFloat16)
	return *ptr
}

// ShaderRoundingModeRTEFloat32 returns the value of shaderRoundingModeRTEFloat32 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderRoundingModeRTEFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTEFloat32)
	return *ptr
}

// ShaderRoundingModeRTEFloat64 returns the value of shaderRoundingModeRTEFloat64 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderRoundingModeRTEFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTEFloat64)
	return *ptr
}

// ShaderRoundingModeRTZFloat16 returns the value of shaderRoundingModeRTZFloat16 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderRoundingModeRTZFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTZFloat16)
	return *ptr
}

// ShaderRoundingModeRTZFloat32 returns the value of shaderRoundingModeRTZFloat32 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderRoundingModeRTZFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTZFloat32)
	return *ptr
}

// ShaderRoundingModeRTZFloat64 returns the value of shaderRoundingModeRTZFloat64 from VkPhysicalDeviceFloatControlsProperties
func (x VkPhysicalDeviceFloatControlsProperties) ShaderRoundingModeRTZFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTZFloat64)
	return *ptr
}

//VkBufferOpaqueCaptureAddressCreateInfo provides a go interface for VkBufferOpaqueCaptureAddressCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferOpaqueCaptureAddressCreateInfo.html
type VkBufferOpaqueCaptureAddressCreateInfo C.struct_VkBufferOpaqueCaptureAddressCreateInfo

// NewVkBufferOpaqueCaptureAddressCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBufferOpaqueCaptureAddressCreateInfo() *VkBufferOpaqueCaptureAddressCreateInfo {
	sz := unsafe.Sizeof(VkBufferOpaqueCaptureAddressCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBufferOpaqueCaptureAddressCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkBufferOpaqueCaptureAddressCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBufferOpaqueCaptureAddressCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBufferOpaqueCaptureAddressCreateInfo) AsPtr() *VkBufferOpaqueCaptureAddressCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBufferOpaqueCaptureAddressCreateInfo) AsCPtr() *VkBufferOpaqueCaptureAddressCreateInfo {
	clone := newVkBufferOpaqueCaptureAddressCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBufferOpaqueCaptureAddressCreateInfo
func (x VkBufferOpaqueCaptureAddressCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBufferOpaqueCaptureAddressCreateInfo) WithDefaultSType() *VkBufferOpaqueCaptureAddressCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBufferOpaqueCaptureAddressCreateInfo
func (x *VkBufferOpaqueCaptureAddressCreateInfo) WithSType(y VkStructureType) *VkBufferOpaqueCaptureAddressCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBufferOpaqueCaptureAddressCreateInfo
func (x VkBufferOpaqueCaptureAddressCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBufferOpaqueCaptureAddressCreateInfo
func (x *VkBufferOpaqueCaptureAddressCreateInfo) WithPNext(y unsafe.Pointer) *VkBufferOpaqueCaptureAddressCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// OpaqueCaptureAddress returns the value of opaqueCaptureAddress from VkBufferOpaqueCaptureAddressCreateInfo
func (x VkBufferOpaqueCaptureAddressCreateInfo) OpaqueCaptureAddress() uint64 {
	ptr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&x.opaqueCaptureAddress)
	return *ptr
}

// WithOpaqueCaptureAddress copies the provided value into C space and stores it
// at opaqueCaptureAddress on VkBufferOpaqueCaptureAddressCreateInfo
func (x *VkBufferOpaqueCaptureAddressCreateInfo) WithOpaqueCaptureAddress(y uint64) *VkBufferOpaqueCaptureAddressCreateInfo {
	ptr := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&y)
	x.opaqueCaptureAddress = *ptr
	return x
}

//VkMemoryOpaqueCaptureAddressAllocateInfo provides a go interface for VkMemoryOpaqueCaptureAddressAllocateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryOpaqueCaptureAddressAllocateInfo.html
type VkMemoryOpaqueCaptureAddressAllocateInfo C.struct_VkMemoryOpaqueCaptureAddressAllocateInfo

// NewVkMemoryOpaqueCaptureAddressAllocateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkMemoryOpaqueCaptureAddressAllocateInfo() *VkMemoryOpaqueCaptureAddressAllocateInfo {
	sz := unsafe.Sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkMemoryOpaqueCaptureAddressAllocateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkMemoryOpaqueCaptureAddressAllocateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkMemoryOpaqueCaptureAddressAllocateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkMemoryOpaqueCaptureAddressAllocateInfo) AsPtr() *VkMemoryOpaqueCaptureAddressAllocateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkMemoryOpaqueCaptureAddressAllocateInfo) AsCPtr() *VkMemoryOpaqueCaptureAddressAllocateInfo {
	clone := newVkMemoryOpaqueCaptureAddressAllocateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkMemoryOpaqueCaptureAddressAllocateInfo
func (x VkMemoryOpaqueCaptureAddressAllocateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkMemoryOpaqueCaptureAddressAllocateInfo) WithDefaultSType() *VkMemoryOpaqueCaptureAddressAllocateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkMemoryOpaqueCaptureAddressAllocateInfo
func (x *VkMemoryOpaqueCaptureAddressAllocateInfo) WithSType(y VkStructureType) *VkMemoryOpaqueCaptureAddressAllocateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkMemoryOpaqueCaptureAddressAllocateInfo
func (x VkMemoryOpaqueCaptureAddressAllocateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkMemoryOpaqueCaptureAddressAllocateInfo
func (x *VkMemoryOpaqueCaptureAddressAllocateInfo) WithPNext(y unsafe.Pointer) *VkMemoryOpaqueCaptureAddressAllocateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// OpaqueCaptureAddress returns the value of opaqueCaptureAddress from VkMemoryOpaqueCaptureAddressAllocateInfo
func (x VkMemoryOpaqueCaptureAddressAllocateInfo) OpaqueCaptureAddress() uint64 {
	ptr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&x.opaqueCaptureAddress)
	return *ptr
}

// WithOpaqueCaptureAddress copies the provided value into C space and stores it
// at opaqueCaptureAddress on VkMemoryOpaqueCaptureAddressAllocateInfo
func (x *VkMemoryOpaqueCaptureAddressAllocateInfo) WithOpaqueCaptureAddress(y uint64) *VkMemoryOpaqueCaptureAddressAllocateInfo {
	ptr := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&y)
	x.opaqueCaptureAddress = *ptr
	return x
}

//VkPhysicalDeviceDescriptorIndexingFeatures provides a go interface for VkPhysicalDeviceDescriptorIndexingFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDescriptorIndexingFeatures.html
type VkPhysicalDeviceDescriptorIndexingFeatures C.struct_VkPhysicalDeviceDescriptorIndexingFeatures

// NewVkPhysicalDeviceDescriptorIndexingFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceDescriptorIndexingFeatures() *VkPhysicalDeviceDescriptorIndexingFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceDescriptorIndexingFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceDescriptorIndexingFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceDescriptorIndexingFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) AsPtr() *VkPhysicalDeviceDescriptorIndexingFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) AsCPtr() *VkPhysicalDeviceDescriptorIndexingFeatures {
	clone := newVkPhysicalDeviceDescriptorIndexingFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDefaultSType() *VkPhysicalDeviceDescriptorIndexingFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ShaderInputAttachmentArrayDynamicIndexing returns the value of shaderInputAttachmentArrayDynamicIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderInputAttachmentArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInputAttachmentArrayDynamicIndexing)
	return *ptr
}

// WithShaderInputAttachmentArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderInputAttachmentArrayDynamicIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderInputAttachmentArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInputAttachmentArrayDynamicIndexing = *ptr
	return x
}

// ShaderUniformTexelBufferArrayDynamicIndexing returns the value of shaderUniformTexelBufferArrayDynamicIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderUniformTexelBufferArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformTexelBufferArrayDynamicIndexing)
	return *ptr
}

// WithShaderUniformTexelBufferArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderUniformTexelBufferArrayDynamicIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderUniformTexelBufferArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderUniformTexelBufferArrayDynamicIndexing = *ptr
	return x
}

// ShaderStorageTexelBufferArrayDynamicIndexing returns the value of shaderStorageTexelBufferArrayDynamicIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderStorageTexelBufferArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageTexelBufferArrayDynamicIndexing)
	return *ptr
}

// WithShaderStorageTexelBufferArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderStorageTexelBufferArrayDynamicIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderStorageTexelBufferArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageTexelBufferArrayDynamicIndexing = *ptr
	return x
}

// ShaderUniformBufferArrayNonUniformIndexing returns the value of shaderUniformBufferArrayNonUniformIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderUniformBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderUniformBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderUniformBufferArrayNonUniformIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderUniformBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderUniformBufferArrayNonUniformIndexing = *ptr
	return x
}

// ShaderSampledImageArrayNonUniformIndexing returns the value of shaderSampledImageArrayNonUniformIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderSampledImageArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSampledImageArrayNonUniformIndexing)
	return *ptr
}

// WithShaderSampledImageArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderSampledImageArrayNonUniformIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderSampledImageArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderSampledImageArrayNonUniformIndexing = *ptr
	return x
}

// ShaderStorageBufferArrayNonUniformIndexing returns the value of shaderStorageBufferArrayNonUniformIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderStorageBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderStorageBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderStorageBufferArrayNonUniformIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderStorageBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageBufferArrayNonUniformIndexing = *ptr
	return x
}

// ShaderStorageImageArrayNonUniformIndexing returns the value of shaderStorageImageArrayNonUniformIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderStorageImageArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageArrayNonUniformIndexing)
	return *ptr
}

// WithShaderStorageImageArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderStorageImageArrayNonUniformIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderStorageImageArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageImageArrayNonUniformIndexing = *ptr
	return x
}

// ShaderInputAttachmentArrayNonUniformIndexing returns the value of shaderInputAttachmentArrayNonUniformIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderInputAttachmentArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInputAttachmentArrayNonUniformIndexing)
	return *ptr
}

// WithShaderInputAttachmentArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderInputAttachmentArrayNonUniformIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderInputAttachmentArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInputAttachmentArrayNonUniformIndexing = *ptr
	return x
}

// ShaderUniformTexelBufferArrayNonUniformIndexing returns the value of shaderUniformTexelBufferArrayNonUniformIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderUniformTexelBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformTexelBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderUniformTexelBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderUniformTexelBufferArrayNonUniformIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderUniformTexelBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderUniformTexelBufferArrayNonUniformIndexing = *ptr
	return x
}

// ShaderStorageTexelBufferArrayNonUniformIndexing returns the value of shaderStorageTexelBufferArrayNonUniformIndexing from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) ShaderStorageTexelBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageTexelBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderStorageTexelBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderStorageTexelBufferArrayNonUniformIndexing on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithShaderStorageTexelBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageTexelBufferArrayNonUniformIndexing = *ptr
	return x
}

// DescriptorBindingUniformBufferUpdateAfterBind returns the value of descriptorBindingUniformBufferUpdateAfterBind from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingUniformBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingUniformBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingUniformBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingUniformBufferUpdateAfterBind on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingUniformBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingUniformBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingSampledImageUpdateAfterBind returns the value of descriptorBindingSampledImageUpdateAfterBind from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingSampledImageUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingSampledImageUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingSampledImageUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingSampledImageUpdateAfterBind on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingSampledImageUpdateAfterBind(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingSampledImageUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingStorageImageUpdateAfterBind returns the value of descriptorBindingStorageImageUpdateAfterBind from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingStorageImageUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingStorageImageUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingStorageImageUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingStorageImageUpdateAfterBind on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingStorageImageUpdateAfterBind(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingStorageImageUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingStorageBufferUpdateAfterBind returns the value of descriptorBindingStorageBufferUpdateAfterBind from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingStorageBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingStorageBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingStorageBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingStorageBufferUpdateAfterBind on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingStorageBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingStorageBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingUniformTexelBufferUpdateAfterBind returns the value of descriptorBindingUniformTexelBufferUpdateAfterBind from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingUniformTexelBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingUniformTexelBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingUniformTexelBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingUniformTexelBufferUpdateAfterBind on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingUniformTexelBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingUniformTexelBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingStorageTexelBufferUpdateAfterBind returns the value of descriptorBindingStorageTexelBufferUpdateAfterBind from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingStorageTexelBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingStorageTexelBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingStorageTexelBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingStorageTexelBufferUpdateAfterBind on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingStorageTexelBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingStorageTexelBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingUpdateUnusedWhilePending returns the value of descriptorBindingUpdateUnusedWhilePending from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingUpdateUnusedWhilePending() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingUpdateUnusedWhilePending)
	return *ptr
}

// WithDescriptorBindingUpdateUnusedWhilePending copies the provided value into C space and stores it
// at descriptorBindingUpdateUnusedWhilePending on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingUpdateUnusedWhilePending(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingUpdateUnusedWhilePending = *ptr
	return x
}

// DescriptorBindingPartiallyBound returns the value of descriptorBindingPartiallyBound from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingPartiallyBound() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingPartiallyBound)
	return *ptr
}

// WithDescriptorBindingPartiallyBound copies the provided value into C space and stores it
// at descriptorBindingPartiallyBound on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingPartiallyBound(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingPartiallyBound = *ptr
	return x
}

// DescriptorBindingVariableDescriptorCount returns the value of descriptorBindingVariableDescriptorCount from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) DescriptorBindingVariableDescriptorCount() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingVariableDescriptorCount)
	return *ptr
}

// WithDescriptorBindingVariableDescriptorCount copies the provided value into C space and stores it
// at descriptorBindingVariableDescriptorCount on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithDescriptorBindingVariableDescriptorCount(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingVariableDescriptorCount = *ptr
	return x
}

// RuntimeDescriptorArray returns the value of runtimeDescriptorArray from VkPhysicalDeviceDescriptorIndexingFeatures
func (x VkPhysicalDeviceDescriptorIndexingFeatures) RuntimeDescriptorArray() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.runtimeDescriptorArray)
	return *ptr
}

// WithRuntimeDescriptorArray copies the provided value into C space and stores it
// at runtimeDescriptorArray on VkPhysicalDeviceDescriptorIndexingFeatures
func (x *VkPhysicalDeviceDescriptorIndexingFeatures) WithRuntimeDescriptorArray(y VkBool32) *VkPhysicalDeviceDescriptorIndexingFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.runtimeDescriptorArray = *ptr
	return x
}

//VkPhysicalDeviceDescriptorIndexingProperties provides a go interface for VkPhysicalDeviceDescriptorIndexingProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDescriptorIndexingProperties.html
type VkPhysicalDeviceDescriptorIndexingProperties C.struct_VkPhysicalDeviceDescriptorIndexingProperties

// NewVkPhysicalDeviceDescriptorIndexingProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceDescriptorIndexingProperties() *VkPhysicalDeviceDescriptorIndexingProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceDescriptorIndexingProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceDescriptorIndexingProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceDescriptorIndexingProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceDescriptorIndexingProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceDescriptorIndexingProperties) AsPtr() *VkPhysicalDeviceDescriptorIndexingProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceDescriptorIndexingProperties) AsCPtr() *VkPhysicalDeviceDescriptorIndexingProperties {
	clone := newVkPhysicalDeviceDescriptorIndexingProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceDescriptorIndexingProperties) WithDefaultSType() *VkPhysicalDeviceDescriptorIndexingProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceDescriptorIndexingProperties
func (x *VkPhysicalDeviceDescriptorIndexingProperties) WithSType(y VkStructureType) *VkPhysicalDeviceDescriptorIndexingProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceDescriptorIndexingProperties
func (x *VkPhysicalDeviceDescriptorIndexingProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceDescriptorIndexingProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MaxUpdateAfterBindDescriptorsInAllPools returns the value of maxUpdateAfterBindDescriptorsInAllPools from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxUpdateAfterBindDescriptorsInAllPools() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxUpdateAfterBindDescriptorsInAllPools)
	return *ptr
}

// ShaderUniformBufferArrayNonUniformIndexingNative returns the value of shaderUniformBufferArrayNonUniformIndexingNative from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) ShaderUniformBufferArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformBufferArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderSampledImageArrayNonUniformIndexingNative returns the value of shaderSampledImageArrayNonUniformIndexingNative from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) ShaderSampledImageArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSampledImageArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderStorageBufferArrayNonUniformIndexingNative returns the value of shaderStorageBufferArrayNonUniformIndexingNative from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) ShaderStorageBufferArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageBufferArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderStorageImageArrayNonUniformIndexingNative returns the value of shaderStorageImageArrayNonUniformIndexingNative from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) ShaderStorageImageArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderInputAttachmentArrayNonUniformIndexingNative returns the value of shaderInputAttachmentArrayNonUniformIndexingNative from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) ShaderInputAttachmentArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInputAttachmentArrayNonUniformIndexingNative)
	return *ptr
}

// RobustBufferAccessUpdateAfterBind returns the value of robustBufferAccessUpdateAfterBind from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) RobustBufferAccessUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.robustBufferAccessUpdateAfterBind)
	return *ptr
}

// QuadDivergentImplicitLod returns the value of quadDivergentImplicitLod from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) QuadDivergentImplicitLod() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.quadDivergentImplicitLod)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindSamplers returns the value of maxPerStageDescriptorUpdateAfterBindSamplers from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxPerStageDescriptorUpdateAfterBindSamplers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindSamplers)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindUniformBuffers returns the value of maxPerStageDescriptorUpdateAfterBindUniformBuffers from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxPerStageDescriptorUpdateAfterBindUniformBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindUniformBuffers)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindStorageBuffers returns the value of maxPerStageDescriptorUpdateAfterBindStorageBuffers from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxPerStageDescriptorUpdateAfterBindStorageBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindStorageBuffers)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindSampledImages returns the value of maxPerStageDescriptorUpdateAfterBindSampledImages from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxPerStageDescriptorUpdateAfterBindSampledImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindSampledImages)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindStorageImages returns the value of maxPerStageDescriptorUpdateAfterBindStorageImages from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxPerStageDescriptorUpdateAfterBindStorageImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindStorageImages)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindInputAttachments returns the value of maxPerStageDescriptorUpdateAfterBindInputAttachments from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxPerStageDescriptorUpdateAfterBindInputAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindInputAttachments)
	return *ptr
}

// MaxPerStageUpdateAfterBindResources returns the value of maxPerStageUpdateAfterBindResources from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxPerStageUpdateAfterBindResources() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageUpdateAfterBindResources)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindSamplers returns the value of maxDescriptorSetUpdateAfterBindSamplers from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindSamplers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindSamplers)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindUniformBuffers returns the value of maxDescriptorSetUpdateAfterBindUniformBuffers from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindUniformBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindUniformBuffers)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic returns the value of maxDescriptorSetUpdateAfterBindUniformBuffersDynamic from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindStorageBuffers returns the value of maxDescriptorSetUpdateAfterBindStorageBuffers from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindStorageBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindStorageBuffers)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic returns the value of maxDescriptorSetUpdateAfterBindStorageBuffersDynamic from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindSampledImages returns the value of maxDescriptorSetUpdateAfterBindSampledImages from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindSampledImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindSampledImages)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindStorageImages returns the value of maxDescriptorSetUpdateAfterBindStorageImages from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindStorageImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindStorageImages)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindInputAttachments returns the value of maxDescriptorSetUpdateAfterBindInputAttachments from VkPhysicalDeviceDescriptorIndexingProperties
func (x VkPhysicalDeviceDescriptorIndexingProperties) MaxDescriptorSetUpdateAfterBindInputAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindInputAttachments)
	return *ptr
}

//VkDescriptorSetVariableDescriptorCountAllocateInfo provides a go interface for VkDescriptorSetVariableDescriptorCountAllocateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetVariableDescriptorCountAllocateInfo.html
type VkDescriptorSetVariableDescriptorCountAllocateInfo C.struct_VkDescriptorSetVariableDescriptorCountAllocateInfo

// NewVkDescriptorSetVariableDescriptorCountAllocateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorSetVariableDescriptorCountAllocateInfo() *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	sz := unsafe.Sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorSetVariableDescriptorCountAllocateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorSetVariableDescriptorCountAllocateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) AsPtr() *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) AsCPtr() *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	clone := newVkDescriptorSetVariableDescriptorCountAllocateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x VkDescriptorSetVariableDescriptorCountAllocateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) WithDefaultSType() *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) WithSType(y VkStructureType) *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x VkDescriptorSetVariableDescriptorCountAllocateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) WithPNext(y unsafe.Pointer) *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DescriptorSetCount returns the value of descriptorSetCount from VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x VkDescriptorSetVariableDescriptorCountAllocateInfo) DescriptorSetCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.descriptorSetCount)
	return *ptr
}

// WithDescriptorSetCount copies the provided value into C space and stores it
// at descriptorSetCount on VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) WithDescriptorSetCount(y uint32) *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.descriptorSetCount = *ptr
	return x
}

// PDescriptorCounts returns the value of pDescriptorCounts from VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x VkDescriptorSetVariableDescriptorCountAllocateInfo) PDescriptorCounts() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDescriptorCounts)
	return *ptr
}

// WithPDescriptorCounts copies the provided value into C space and stores it
// at pDescriptorCounts on VkDescriptorSetVariableDescriptorCountAllocateInfo
func (x *VkDescriptorSetVariableDescriptorCountAllocateInfo) WithPDescriptorCounts(y []uint32) *VkDescriptorSetVariableDescriptorCountAllocateInfo {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDescriptorCounts = *ptr
	return x
}

//VkDescriptorSetVariableDescriptorCountLayoutSupport provides a go interface for VkDescriptorSetVariableDescriptorCountLayoutSupport.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetVariableDescriptorCountLayoutSupport.html
type VkDescriptorSetVariableDescriptorCountLayoutSupport C.struct_VkDescriptorSetVariableDescriptorCountLayoutSupport

// NewVkDescriptorSetVariableDescriptorCountLayoutSupport allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorSetVariableDescriptorCountLayoutSupport() *VkDescriptorSetVariableDescriptorCountLayoutSupport {
	sz := unsafe.Sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorSetVariableDescriptorCountLayoutSupport)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorSetVariableDescriptorCountLayoutSupport method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorSetVariableDescriptorCountLayoutSupport) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorSetVariableDescriptorCountLayoutSupport) AsPtr() *VkDescriptorSetVariableDescriptorCountLayoutSupport {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorSetVariableDescriptorCountLayoutSupport) AsCPtr() *VkDescriptorSetVariableDescriptorCountLayoutSupport {
	clone := newVkDescriptorSetVariableDescriptorCountLayoutSupport()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorSetVariableDescriptorCountLayoutSupport
func (x VkDescriptorSetVariableDescriptorCountLayoutSupport) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorSetVariableDescriptorCountLayoutSupport) WithDefaultSType() *VkDescriptorSetVariableDescriptorCountLayoutSupport {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorSetVariableDescriptorCountLayoutSupport
func (x *VkDescriptorSetVariableDescriptorCountLayoutSupport) WithSType(y VkStructureType) *VkDescriptorSetVariableDescriptorCountLayoutSupport {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorSetVariableDescriptorCountLayoutSupport
func (x VkDescriptorSetVariableDescriptorCountLayoutSupport) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorSetVariableDescriptorCountLayoutSupport
func (x *VkDescriptorSetVariableDescriptorCountLayoutSupport) WithPNext(y unsafe.Pointer) *VkDescriptorSetVariableDescriptorCountLayoutSupport {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MaxVariableDescriptorCount returns the value of maxVariableDescriptorCount from VkDescriptorSetVariableDescriptorCountLayoutSupport
func (x VkDescriptorSetVariableDescriptorCountLayoutSupport) MaxVariableDescriptorCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxVariableDescriptorCount)
	return *ptr
}

//VkImageFormatListCreateInfo provides a go interface for VkImageFormatListCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageFormatListCreateInfo.html
type VkImageFormatListCreateInfo C.struct_VkImageFormatListCreateInfo

// NewVkImageFormatListCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageFormatListCreateInfo() *VkImageFormatListCreateInfo {
	sz := unsafe.Sizeof(VkImageFormatListCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageFormatListCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkImageFormatListCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageFormatListCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageFormatListCreateInfo) AsPtr() *VkImageFormatListCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageFormatListCreateInfo) AsCPtr() *VkImageFormatListCreateInfo {
	clone := newVkImageFormatListCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageFormatListCreateInfo
func (x VkImageFormatListCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageFormatListCreateInfo) WithDefaultSType() *VkImageFormatListCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageFormatListCreateInfo
func (x *VkImageFormatListCreateInfo) WithSType(y VkStructureType) *VkImageFormatListCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageFormatListCreateInfo
func (x VkImageFormatListCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageFormatListCreateInfo
func (x *VkImageFormatListCreateInfo) WithPNext(y unsafe.Pointer) *VkImageFormatListCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ViewFormatCount returns the value of viewFormatCount from VkImageFormatListCreateInfo
func (x VkImageFormatListCreateInfo) ViewFormatCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.viewFormatCount)
	return *ptr
}

// WithViewFormatCount copies the provided value into C space and stores it
// at viewFormatCount on VkImageFormatListCreateInfo
func (x *VkImageFormatListCreateInfo) WithViewFormatCount(y uint32) *VkImageFormatListCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.viewFormatCount = *ptr
	return x
}

// PViewFormats returns the value of pViewFormats from VkImageFormatListCreateInfo
func (x VkImageFormatListCreateInfo) PViewFormats() []VkFormat {
	ptr := func(x **C.VkFormat) *[]VkFormat { /* Slice */
		slc := unsafe.Slice((*VkFormat)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pViewFormats)
	return *ptr
}

// WithPViewFormats copies the provided value into C space and stores it
// at pViewFormats on VkImageFormatListCreateInfo
func (x *VkImageFormatListCreateInfo) WithPViewFormats(y []VkFormat) *VkImageFormatListCreateInfo {
	ptr := func(x *[]VkFormat) **C.VkFormat { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkFormat)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkFormat)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pViewFormats = *ptr
	return x
}

//VkPhysicalDeviceVulkan12Properties provides a go interface for VkPhysicalDeviceVulkan12Properties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html
type VkPhysicalDeviceVulkan12Properties C.struct_VkPhysicalDeviceVulkan12Properties

// NewVkPhysicalDeviceVulkan12Properties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceVulkan12Properties() *VkPhysicalDeviceVulkan12Properties {
	sz := unsafe.Sizeof(VkPhysicalDeviceVulkan12Properties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceVulkan12Properties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceVulkan12Properties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceVulkan12Properties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceVulkan12Properties) AsPtr() *VkPhysicalDeviceVulkan12Properties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceVulkan12Properties) AsCPtr() *VkPhysicalDeviceVulkan12Properties {
	clone := newVkPhysicalDeviceVulkan12Properties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceVulkan12Properties) WithDefaultSType() *VkPhysicalDeviceVulkan12Properties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceVulkan12Properties
func (x *VkPhysicalDeviceVulkan12Properties) WithSType(y VkStructureType) *VkPhysicalDeviceVulkan12Properties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceVulkan12Properties
func (x *VkPhysicalDeviceVulkan12Properties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceVulkan12Properties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DriverID returns the value of driverID from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) DriverID() VkDriverId {
	ptr := /* Identifier */ (*VkDriverId)(&x.driverID)
	return *ptr
}

// DriverName returns the value of driverName from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) DriverName() []byte {
	ptr := func(x *[VK_MAX_DRIVER_NAME_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_DRIVER_NAME_SIZE)
		return &slc
	}(&x.driverName)
	return *ptr
}

// DriverInfo returns the value of driverInfo from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) DriverInfo() []byte {
	ptr := func(x *[VK_MAX_DRIVER_INFO_SIZE]C.char) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_MAX_DRIVER_INFO_SIZE)
		return &slc
	}(&x.driverInfo)
	return *ptr
}

// ConformanceVersion returns the value of conformanceVersion from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ConformanceVersion() VkConformanceVersion {
	ptr := /* Identifier */ (*VkConformanceVersion)(&x.conformanceVersion)
	return *ptr
}

// DenormBehaviorIndependence returns the value of denormBehaviorIndependence from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) DenormBehaviorIndependence() VkShaderFloatControlsIndependence {
	ptr := /* Identifier */ (*VkShaderFloatControlsIndependence)(&x.denormBehaviorIndependence)
	return *ptr
}

// RoundingModeIndependence returns the value of roundingModeIndependence from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) RoundingModeIndependence() VkShaderFloatControlsIndependence {
	ptr := /* Identifier */ (*VkShaderFloatControlsIndependence)(&x.roundingModeIndependence)
	return *ptr
}

// ShaderSignedZeroInfNanPreserveFloat16 returns the value of shaderSignedZeroInfNanPreserveFloat16 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderSignedZeroInfNanPreserveFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSignedZeroInfNanPreserveFloat16)
	return *ptr
}

// ShaderSignedZeroInfNanPreserveFloat32 returns the value of shaderSignedZeroInfNanPreserveFloat32 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderSignedZeroInfNanPreserveFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSignedZeroInfNanPreserveFloat32)
	return *ptr
}

// ShaderSignedZeroInfNanPreserveFloat64 returns the value of shaderSignedZeroInfNanPreserveFloat64 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderSignedZeroInfNanPreserveFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSignedZeroInfNanPreserveFloat64)
	return *ptr
}

// ShaderDenormPreserveFloat16 returns the value of shaderDenormPreserveFloat16 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderDenormPreserveFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormPreserveFloat16)
	return *ptr
}

// ShaderDenormPreserveFloat32 returns the value of shaderDenormPreserveFloat32 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderDenormPreserveFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormPreserveFloat32)
	return *ptr
}

// ShaderDenormPreserveFloat64 returns the value of shaderDenormPreserveFloat64 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderDenormPreserveFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormPreserveFloat64)
	return *ptr
}

// ShaderDenormFlushToZeroFloat16 returns the value of shaderDenormFlushToZeroFloat16 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderDenormFlushToZeroFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormFlushToZeroFloat16)
	return *ptr
}

// ShaderDenormFlushToZeroFloat32 returns the value of shaderDenormFlushToZeroFloat32 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderDenormFlushToZeroFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormFlushToZeroFloat32)
	return *ptr
}

// ShaderDenormFlushToZeroFloat64 returns the value of shaderDenormFlushToZeroFloat64 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderDenormFlushToZeroFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDenormFlushToZeroFloat64)
	return *ptr
}

// ShaderRoundingModeRTEFloat16 returns the value of shaderRoundingModeRTEFloat16 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderRoundingModeRTEFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTEFloat16)
	return *ptr
}

// ShaderRoundingModeRTEFloat32 returns the value of shaderRoundingModeRTEFloat32 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderRoundingModeRTEFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTEFloat32)
	return *ptr
}

// ShaderRoundingModeRTEFloat64 returns the value of shaderRoundingModeRTEFloat64 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderRoundingModeRTEFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTEFloat64)
	return *ptr
}

// ShaderRoundingModeRTZFloat16 returns the value of shaderRoundingModeRTZFloat16 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderRoundingModeRTZFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTZFloat16)
	return *ptr
}

// ShaderRoundingModeRTZFloat32 returns the value of shaderRoundingModeRTZFloat32 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderRoundingModeRTZFloat32() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTZFloat32)
	return *ptr
}

// ShaderRoundingModeRTZFloat64 returns the value of shaderRoundingModeRTZFloat64 from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderRoundingModeRTZFloat64() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderRoundingModeRTZFloat64)
	return *ptr
}

// MaxUpdateAfterBindDescriptorsInAllPools returns the value of maxUpdateAfterBindDescriptorsInAllPools from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxUpdateAfterBindDescriptorsInAllPools() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxUpdateAfterBindDescriptorsInAllPools)
	return *ptr
}

// ShaderUniformBufferArrayNonUniformIndexingNative returns the value of shaderUniformBufferArrayNonUniformIndexingNative from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderUniformBufferArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformBufferArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderSampledImageArrayNonUniformIndexingNative returns the value of shaderSampledImageArrayNonUniformIndexingNative from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderSampledImageArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSampledImageArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderStorageBufferArrayNonUniformIndexingNative returns the value of shaderStorageBufferArrayNonUniformIndexingNative from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderStorageBufferArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageBufferArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderStorageImageArrayNonUniformIndexingNative returns the value of shaderStorageImageArrayNonUniformIndexingNative from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderStorageImageArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageArrayNonUniformIndexingNative)
	return *ptr
}

// ShaderInputAttachmentArrayNonUniformIndexingNative returns the value of shaderInputAttachmentArrayNonUniformIndexingNative from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) ShaderInputAttachmentArrayNonUniformIndexingNative() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInputAttachmentArrayNonUniformIndexingNative)
	return *ptr
}

// RobustBufferAccessUpdateAfterBind returns the value of robustBufferAccessUpdateAfterBind from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) RobustBufferAccessUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.robustBufferAccessUpdateAfterBind)
	return *ptr
}

// QuadDivergentImplicitLod returns the value of quadDivergentImplicitLod from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) QuadDivergentImplicitLod() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.quadDivergentImplicitLod)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindSamplers returns the value of maxPerStageDescriptorUpdateAfterBindSamplers from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxPerStageDescriptorUpdateAfterBindSamplers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindSamplers)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindUniformBuffers returns the value of maxPerStageDescriptorUpdateAfterBindUniformBuffers from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxPerStageDescriptorUpdateAfterBindUniformBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindUniformBuffers)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindStorageBuffers returns the value of maxPerStageDescriptorUpdateAfterBindStorageBuffers from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxPerStageDescriptorUpdateAfterBindStorageBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindStorageBuffers)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindSampledImages returns the value of maxPerStageDescriptorUpdateAfterBindSampledImages from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxPerStageDescriptorUpdateAfterBindSampledImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindSampledImages)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindStorageImages returns the value of maxPerStageDescriptorUpdateAfterBindStorageImages from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxPerStageDescriptorUpdateAfterBindStorageImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindStorageImages)
	return *ptr
}

// MaxPerStageDescriptorUpdateAfterBindInputAttachments returns the value of maxPerStageDescriptorUpdateAfterBindInputAttachments from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxPerStageDescriptorUpdateAfterBindInputAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageDescriptorUpdateAfterBindInputAttachments)
	return *ptr
}

// MaxPerStageUpdateAfterBindResources returns the value of maxPerStageUpdateAfterBindResources from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxPerStageUpdateAfterBindResources() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerStageUpdateAfterBindResources)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindSamplers returns the value of maxDescriptorSetUpdateAfterBindSamplers from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindSamplers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindSamplers)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindUniformBuffers returns the value of maxDescriptorSetUpdateAfterBindUniformBuffers from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindUniformBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindUniformBuffers)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic returns the value of maxDescriptorSetUpdateAfterBindUniformBuffersDynamic from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindStorageBuffers returns the value of maxDescriptorSetUpdateAfterBindStorageBuffers from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindStorageBuffers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindStorageBuffers)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic returns the value of maxDescriptorSetUpdateAfterBindStorageBuffersDynamic from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindSampledImages returns the value of maxDescriptorSetUpdateAfterBindSampledImages from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindSampledImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindSampledImages)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindStorageImages returns the value of maxDescriptorSetUpdateAfterBindStorageImages from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindStorageImages() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindStorageImages)
	return *ptr
}

// MaxDescriptorSetUpdateAfterBindInputAttachments returns the value of maxDescriptorSetUpdateAfterBindInputAttachments from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxDescriptorSetUpdateAfterBindInputAttachments() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxDescriptorSetUpdateAfterBindInputAttachments)
	return *ptr
}

// SupportedDepthResolveModes returns the value of supportedDepthResolveModes from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) SupportedDepthResolveModes() VkResolveModeFlags {
	ptr := /* Identifier */ (*VkResolveModeFlags)(&x.supportedDepthResolveModes)
	return *ptr
}

// SupportedStencilResolveModes returns the value of supportedStencilResolveModes from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) SupportedStencilResolveModes() VkResolveModeFlags {
	ptr := /* Identifier */ (*VkResolveModeFlags)(&x.supportedStencilResolveModes)
	return *ptr
}

// IndependentResolveNone returns the value of independentResolveNone from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) IndependentResolveNone() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.independentResolveNone)
	return *ptr
}

// IndependentResolve returns the value of independentResolve from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) IndependentResolve() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.independentResolve)
	return *ptr
}

// FilterMinmaxSingleComponentFormats returns the value of filterMinmaxSingleComponentFormats from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) FilterMinmaxSingleComponentFormats() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.filterMinmaxSingleComponentFormats)
	return *ptr
}

// FilterMinmaxImageComponentMapping returns the value of filterMinmaxImageComponentMapping from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) FilterMinmaxImageComponentMapping() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.filterMinmaxImageComponentMapping)
	return *ptr
}

// MaxTimelineSemaphoreValueDifference returns the value of maxTimelineSemaphoreValueDifference from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) MaxTimelineSemaphoreValueDifference() uint64 {
	ptr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&x.maxTimelineSemaphoreValueDifference)
	return *ptr
}

// FramebufferIntegerColorSampleCounts returns the value of framebufferIntegerColorSampleCounts from VkPhysicalDeviceVulkan12Properties
func (x VkPhysicalDeviceVulkan12Properties) FramebufferIntegerColorSampleCounts() VkSampleCountFlags {
	ptr := /* Identifier */ (*VkSampleCountFlags)(&x.framebufferIntegerColorSampleCounts)
	return *ptr
}

//VkSubpassDescriptionDepthStencilResolve provides a go interface for VkSubpassDescriptionDepthStencilResolve.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescriptionDepthStencilResolve.html
type VkSubpassDescriptionDepthStencilResolve C.struct_VkSubpassDescriptionDepthStencilResolve

// NewVkSubpassDescriptionDepthStencilResolve allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSubpassDescriptionDepthStencilResolve() *VkSubpassDescriptionDepthStencilResolve {
	sz := unsafe.Sizeof(VkSubpassDescriptionDepthStencilResolve{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSubpassDescriptionDepthStencilResolve)(ptr)
}

// Free releases the memory allocated by the NewVkSubpassDescriptionDepthStencilResolve method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSubpassDescriptionDepthStencilResolve) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSubpassDescriptionDepthStencilResolve) AsPtr() *VkSubpassDescriptionDepthStencilResolve {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSubpassDescriptionDepthStencilResolve) AsCPtr() *VkSubpassDescriptionDepthStencilResolve {
	clone := newVkSubpassDescriptionDepthStencilResolve()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSubpassDescriptionDepthStencilResolve
func (x VkSubpassDescriptionDepthStencilResolve) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSubpassDescriptionDepthStencilResolve) WithDefaultSType() *VkSubpassDescriptionDepthStencilResolve {
	return x.WithSType(VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSubpassDescriptionDepthStencilResolve
func (x *VkSubpassDescriptionDepthStencilResolve) WithSType(y VkStructureType) *VkSubpassDescriptionDepthStencilResolve {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSubpassDescriptionDepthStencilResolve
func (x VkSubpassDescriptionDepthStencilResolve) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSubpassDescriptionDepthStencilResolve
func (x *VkSubpassDescriptionDepthStencilResolve) WithPNext(y unsafe.Pointer) *VkSubpassDescriptionDepthStencilResolve {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DepthResolveMode returns the value of depthResolveMode from VkSubpassDescriptionDepthStencilResolve
func (x VkSubpassDescriptionDepthStencilResolve) DepthResolveMode() VkResolveModeFlagBits {
	ptr := /* Identifier */ (*VkResolveModeFlagBits)(&x.depthResolveMode)
	return *ptr
}

// WithDepthResolveMode copies the provided value into C space and stores it
// at depthResolveMode on VkSubpassDescriptionDepthStencilResolve
func (x *VkSubpassDescriptionDepthStencilResolve) WithDepthResolveMode(y VkResolveModeFlagBits) *VkSubpassDescriptionDepthStencilResolve {
	ptr := /* Identifier */ (*C.VkResolveModeFlagBits)(&y)
	x.depthResolveMode = *ptr
	return x
}

// StencilResolveMode returns the value of stencilResolveMode from VkSubpassDescriptionDepthStencilResolve
func (x VkSubpassDescriptionDepthStencilResolve) StencilResolveMode() VkResolveModeFlagBits {
	ptr := /* Identifier */ (*VkResolveModeFlagBits)(&x.stencilResolveMode)
	return *ptr
}

// WithStencilResolveMode copies the provided value into C space and stores it
// at stencilResolveMode on VkSubpassDescriptionDepthStencilResolve
func (x *VkSubpassDescriptionDepthStencilResolve) WithStencilResolveMode(y VkResolveModeFlagBits) *VkSubpassDescriptionDepthStencilResolve {
	ptr := /* Identifier */ (*C.VkResolveModeFlagBits)(&y)
	x.stencilResolveMode = *ptr
	return x
}

// PDepthStencilResolveAttachment returns the value of pDepthStencilResolveAttachment from VkSubpassDescriptionDepthStencilResolve
func (x VkSubpassDescriptionDepthStencilResolve) PDepthStencilResolveAttachment() *VkAttachmentReference2 {
	ptr := func(x **C.VkAttachmentReference2) **VkAttachmentReference2 { /* Pointer */
		return (**VkAttachmentReference2)(unsafe.Pointer(x))
	}(&x.pDepthStencilResolveAttachment)
	return *ptr
}

// WithPDepthStencilResolveAttachment copies the provided value into C space and stores it
// at pDepthStencilResolveAttachment on VkSubpassDescriptionDepthStencilResolve
func (x *VkSubpassDescriptionDepthStencilResolve) WithPDepthStencilResolveAttachment(y *VkAttachmentReference2) *VkSubpassDescriptionDepthStencilResolve {
	ptr := func(x **VkAttachmentReference2) **C.VkAttachmentReference2 { /* Pointer */
		return (**C.VkAttachmentReference2)(unsafe.Pointer(x))
	}(&y)
	x.pDepthStencilResolveAttachment = *ptr
	return x
}

//VkPhysicalDeviceDepthStencilResolveProperties provides a go interface for VkPhysicalDeviceDepthStencilResolveProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDepthStencilResolveProperties.html
type VkPhysicalDeviceDepthStencilResolveProperties C.struct_VkPhysicalDeviceDepthStencilResolveProperties

// NewVkPhysicalDeviceDepthStencilResolveProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceDepthStencilResolveProperties() *VkPhysicalDeviceDepthStencilResolveProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceDepthStencilResolveProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceDepthStencilResolveProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceDepthStencilResolveProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceDepthStencilResolveProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceDepthStencilResolveProperties) AsPtr() *VkPhysicalDeviceDepthStencilResolveProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceDepthStencilResolveProperties) AsCPtr() *VkPhysicalDeviceDepthStencilResolveProperties {
	clone := newVkPhysicalDeviceDepthStencilResolveProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceDepthStencilResolveProperties
func (x VkPhysicalDeviceDepthStencilResolveProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceDepthStencilResolveProperties) WithDefaultSType() *VkPhysicalDeviceDepthStencilResolveProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceDepthStencilResolveProperties
func (x *VkPhysicalDeviceDepthStencilResolveProperties) WithSType(y VkStructureType) *VkPhysicalDeviceDepthStencilResolveProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceDepthStencilResolveProperties
func (x VkPhysicalDeviceDepthStencilResolveProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceDepthStencilResolveProperties
func (x *VkPhysicalDeviceDepthStencilResolveProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceDepthStencilResolveProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SupportedDepthResolveModes returns the value of supportedDepthResolveModes from VkPhysicalDeviceDepthStencilResolveProperties
func (x VkPhysicalDeviceDepthStencilResolveProperties) SupportedDepthResolveModes() VkResolveModeFlags {
	ptr := /* Identifier */ (*VkResolveModeFlags)(&x.supportedDepthResolveModes)
	return *ptr
}

// SupportedStencilResolveModes returns the value of supportedStencilResolveModes from VkPhysicalDeviceDepthStencilResolveProperties
func (x VkPhysicalDeviceDepthStencilResolveProperties) SupportedStencilResolveModes() VkResolveModeFlags {
	ptr := /* Identifier */ (*VkResolveModeFlags)(&x.supportedStencilResolveModes)
	return *ptr
}

// IndependentResolveNone returns the value of independentResolveNone from VkPhysicalDeviceDepthStencilResolveProperties
func (x VkPhysicalDeviceDepthStencilResolveProperties) IndependentResolveNone() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.independentResolveNone)
	return *ptr
}

// IndependentResolve returns the value of independentResolve from VkPhysicalDeviceDepthStencilResolveProperties
func (x VkPhysicalDeviceDepthStencilResolveProperties) IndependentResolve() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.independentResolve)
	return *ptr
}

//VkPhysicalDeviceVulkan12Features provides a go interface for VkPhysicalDeviceVulkan12Features.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan12Features.html
type VkPhysicalDeviceVulkan12Features C.struct_VkPhysicalDeviceVulkan12Features

// NewVkPhysicalDeviceVulkan12Features allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceVulkan12Features() *VkPhysicalDeviceVulkan12Features {
	sz := unsafe.Sizeof(VkPhysicalDeviceVulkan12Features{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceVulkan12Features)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceVulkan12Features method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceVulkan12Features) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceVulkan12Features) AsPtr() *VkPhysicalDeviceVulkan12Features { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceVulkan12Features) AsCPtr() *VkPhysicalDeviceVulkan12Features {
	clone := newVkPhysicalDeviceVulkan12Features()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceVulkan12Features) WithDefaultSType() *VkPhysicalDeviceVulkan12Features {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithSType(y VkStructureType) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceVulkan12Features {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SamplerMirrorClampToEdge returns the value of samplerMirrorClampToEdge from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) SamplerMirrorClampToEdge() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.samplerMirrorClampToEdge)
	return *ptr
}

// WithSamplerMirrorClampToEdge copies the provided value into C space and stores it
// at samplerMirrorClampToEdge on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithSamplerMirrorClampToEdge(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.samplerMirrorClampToEdge = *ptr
	return x
}

// DrawIndirectCount returns the value of drawIndirectCount from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DrawIndirectCount() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.drawIndirectCount)
	return *ptr
}

// WithDrawIndirectCount copies the provided value into C space and stores it
// at drawIndirectCount on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDrawIndirectCount(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.drawIndirectCount = *ptr
	return x
}

// StorageBuffer8BitAccess returns the value of storageBuffer8BitAccess from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) StorageBuffer8BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storageBuffer8BitAccess)
	return *ptr
}

// WithStorageBuffer8BitAccess copies the provided value into C space and stores it
// at storageBuffer8BitAccess on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithStorageBuffer8BitAccess(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storageBuffer8BitAccess = *ptr
	return x
}

// UniformAndStorageBuffer8BitAccess returns the value of uniformAndStorageBuffer8BitAccess from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) UniformAndStorageBuffer8BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.uniformAndStorageBuffer8BitAccess)
	return *ptr
}

// WithUniformAndStorageBuffer8BitAccess copies the provided value into C space and stores it
// at uniformAndStorageBuffer8BitAccess on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithUniformAndStorageBuffer8BitAccess(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.uniformAndStorageBuffer8BitAccess = *ptr
	return x
}

// StoragePushConstant8 returns the value of storagePushConstant8 from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) StoragePushConstant8() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storagePushConstant8)
	return *ptr
}

// WithStoragePushConstant8 copies the provided value into C space and stores it
// at storagePushConstant8 on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithStoragePushConstant8(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storagePushConstant8 = *ptr
	return x
}

// ShaderBufferInt64Atomics returns the value of shaderBufferInt64Atomics from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderBufferInt64Atomics() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderBufferInt64Atomics)
	return *ptr
}

// WithShaderBufferInt64Atomics copies the provided value into C space and stores it
// at shaderBufferInt64Atomics on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderBufferInt64Atomics(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderBufferInt64Atomics = *ptr
	return x
}

// ShaderSharedInt64Atomics returns the value of shaderSharedInt64Atomics from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderSharedInt64Atomics() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSharedInt64Atomics)
	return *ptr
}

// WithShaderSharedInt64Atomics copies the provided value into C space and stores it
// at shaderSharedInt64Atomics on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderSharedInt64Atomics(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderSharedInt64Atomics = *ptr
	return x
}

// ShaderFloat16 returns the value of shaderFloat16 from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderFloat16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderFloat16)
	return *ptr
}

// WithShaderFloat16 copies the provided value into C space and stores it
// at shaderFloat16 on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderFloat16(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderFloat16 = *ptr
	return x
}

// ShaderInt8 returns the value of shaderInt8 from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderInt8() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInt8)
	return *ptr
}

// WithShaderInt8 copies the provided value into C space and stores it
// at shaderInt8 on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderInt8(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInt8 = *ptr
	return x
}

// DescriptorIndexing returns the value of descriptorIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorIndexing)
	return *ptr
}

// WithDescriptorIndexing copies the provided value into C space and stores it
// at descriptorIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorIndexing = *ptr
	return x
}

// ShaderInputAttachmentArrayDynamicIndexing returns the value of shaderInputAttachmentArrayDynamicIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderInputAttachmentArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInputAttachmentArrayDynamicIndexing)
	return *ptr
}

// WithShaderInputAttachmentArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderInputAttachmentArrayDynamicIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderInputAttachmentArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInputAttachmentArrayDynamicIndexing = *ptr
	return x
}

// ShaderUniformTexelBufferArrayDynamicIndexing returns the value of shaderUniformTexelBufferArrayDynamicIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderUniformTexelBufferArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformTexelBufferArrayDynamicIndexing)
	return *ptr
}

// WithShaderUniformTexelBufferArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderUniformTexelBufferArrayDynamicIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderUniformTexelBufferArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderUniformTexelBufferArrayDynamicIndexing = *ptr
	return x
}

// ShaderStorageTexelBufferArrayDynamicIndexing returns the value of shaderStorageTexelBufferArrayDynamicIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderStorageTexelBufferArrayDynamicIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageTexelBufferArrayDynamicIndexing)
	return *ptr
}

// WithShaderStorageTexelBufferArrayDynamicIndexing copies the provided value into C space and stores it
// at shaderStorageTexelBufferArrayDynamicIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderStorageTexelBufferArrayDynamicIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageTexelBufferArrayDynamicIndexing = *ptr
	return x
}

// ShaderUniformBufferArrayNonUniformIndexing returns the value of shaderUniformBufferArrayNonUniformIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderUniformBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderUniformBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderUniformBufferArrayNonUniformIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderUniformBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderUniformBufferArrayNonUniformIndexing = *ptr
	return x
}

// ShaderSampledImageArrayNonUniformIndexing returns the value of shaderSampledImageArrayNonUniformIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderSampledImageArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSampledImageArrayNonUniformIndexing)
	return *ptr
}

// WithShaderSampledImageArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderSampledImageArrayNonUniformIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderSampledImageArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderSampledImageArrayNonUniformIndexing = *ptr
	return x
}

// ShaderStorageBufferArrayNonUniformIndexing returns the value of shaderStorageBufferArrayNonUniformIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderStorageBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderStorageBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderStorageBufferArrayNonUniformIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderStorageBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageBufferArrayNonUniformIndexing = *ptr
	return x
}

// ShaderStorageImageArrayNonUniformIndexing returns the value of shaderStorageImageArrayNonUniformIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderStorageImageArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageImageArrayNonUniformIndexing)
	return *ptr
}

// WithShaderStorageImageArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderStorageImageArrayNonUniformIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderStorageImageArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageImageArrayNonUniformIndexing = *ptr
	return x
}

// ShaderInputAttachmentArrayNonUniformIndexing returns the value of shaderInputAttachmentArrayNonUniformIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderInputAttachmentArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderInputAttachmentArrayNonUniformIndexing)
	return *ptr
}

// WithShaderInputAttachmentArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderInputAttachmentArrayNonUniformIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderInputAttachmentArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderInputAttachmentArrayNonUniformIndexing = *ptr
	return x
}

// ShaderUniformTexelBufferArrayNonUniformIndexing returns the value of shaderUniformTexelBufferArrayNonUniformIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderUniformTexelBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderUniformTexelBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderUniformTexelBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderUniformTexelBufferArrayNonUniformIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderUniformTexelBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderUniformTexelBufferArrayNonUniformIndexing = *ptr
	return x
}

// ShaderStorageTexelBufferArrayNonUniformIndexing returns the value of shaderStorageTexelBufferArrayNonUniformIndexing from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderStorageTexelBufferArrayNonUniformIndexing() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderStorageTexelBufferArrayNonUniformIndexing)
	return *ptr
}

// WithShaderStorageTexelBufferArrayNonUniformIndexing copies the provided value into C space and stores it
// at shaderStorageTexelBufferArrayNonUniformIndexing on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderStorageTexelBufferArrayNonUniformIndexing(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderStorageTexelBufferArrayNonUniformIndexing = *ptr
	return x
}

// DescriptorBindingUniformBufferUpdateAfterBind returns the value of descriptorBindingUniformBufferUpdateAfterBind from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingUniformBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingUniformBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingUniformBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingUniformBufferUpdateAfterBind on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingUniformBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingUniformBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingSampledImageUpdateAfterBind returns the value of descriptorBindingSampledImageUpdateAfterBind from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingSampledImageUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingSampledImageUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingSampledImageUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingSampledImageUpdateAfterBind on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingSampledImageUpdateAfterBind(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingSampledImageUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingStorageImageUpdateAfterBind returns the value of descriptorBindingStorageImageUpdateAfterBind from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingStorageImageUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingStorageImageUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingStorageImageUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingStorageImageUpdateAfterBind on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingStorageImageUpdateAfterBind(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingStorageImageUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingStorageBufferUpdateAfterBind returns the value of descriptorBindingStorageBufferUpdateAfterBind from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingStorageBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingStorageBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingStorageBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingStorageBufferUpdateAfterBind on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingStorageBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingStorageBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingUniformTexelBufferUpdateAfterBind returns the value of descriptorBindingUniformTexelBufferUpdateAfterBind from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingUniformTexelBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingUniformTexelBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingUniformTexelBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingUniformTexelBufferUpdateAfterBind on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingUniformTexelBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingUniformTexelBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingStorageTexelBufferUpdateAfterBind returns the value of descriptorBindingStorageTexelBufferUpdateAfterBind from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingStorageTexelBufferUpdateAfterBind() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingStorageTexelBufferUpdateAfterBind)
	return *ptr
}

// WithDescriptorBindingStorageTexelBufferUpdateAfterBind copies the provided value into C space and stores it
// at descriptorBindingStorageTexelBufferUpdateAfterBind on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingStorageTexelBufferUpdateAfterBind(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingStorageTexelBufferUpdateAfterBind = *ptr
	return x
}

// DescriptorBindingUpdateUnusedWhilePending returns the value of descriptorBindingUpdateUnusedWhilePending from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingUpdateUnusedWhilePending() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingUpdateUnusedWhilePending)
	return *ptr
}

// WithDescriptorBindingUpdateUnusedWhilePending copies the provided value into C space and stores it
// at descriptorBindingUpdateUnusedWhilePending on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingUpdateUnusedWhilePending(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingUpdateUnusedWhilePending = *ptr
	return x
}

// DescriptorBindingPartiallyBound returns the value of descriptorBindingPartiallyBound from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingPartiallyBound() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingPartiallyBound)
	return *ptr
}

// WithDescriptorBindingPartiallyBound copies the provided value into C space and stores it
// at descriptorBindingPartiallyBound on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingPartiallyBound(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingPartiallyBound = *ptr
	return x
}

// DescriptorBindingVariableDescriptorCount returns the value of descriptorBindingVariableDescriptorCount from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) DescriptorBindingVariableDescriptorCount() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.descriptorBindingVariableDescriptorCount)
	return *ptr
}

// WithDescriptorBindingVariableDescriptorCount copies the provided value into C space and stores it
// at descriptorBindingVariableDescriptorCount on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithDescriptorBindingVariableDescriptorCount(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.descriptorBindingVariableDescriptorCount = *ptr
	return x
}

// RuntimeDescriptorArray returns the value of runtimeDescriptorArray from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) RuntimeDescriptorArray() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.runtimeDescriptorArray)
	return *ptr
}

// WithRuntimeDescriptorArray copies the provided value into C space and stores it
// at runtimeDescriptorArray on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithRuntimeDescriptorArray(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.runtimeDescriptorArray = *ptr
	return x
}

// SamplerFilterMinmax returns the value of samplerFilterMinmax from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) SamplerFilterMinmax() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.samplerFilterMinmax)
	return *ptr
}

// WithSamplerFilterMinmax copies the provided value into C space and stores it
// at samplerFilterMinmax on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithSamplerFilterMinmax(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.samplerFilterMinmax = *ptr
	return x
}

// ScalarBlockLayout returns the value of scalarBlockLayout from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ScalarBlockLayout() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.scalarBlockLayout)
	return *ptr
}

// WithScalarBlockLayout copies the provided value into C space and stores it
// at scalarBlockLayout on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithScalarBlockLayout(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.scalarBlockLayout = *ptr
	return x
}

// ImagelessFramebuffer returns the value of imagelessFramebuffer from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ImagelessFramebuffer() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.imagelessFramebuffer)
	return *ptr
}

// WithImagelessFramebuffer copies the provided value into C space and stores it
// at imagelessFramebuffer on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithImagelessFramebuffer(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.imagelessFramebuffer = *ptr
	return x
}

// UniformBufferStandardLayout returns the value of uniformBufferStandardLayout from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) UniformBufferStandardLayout() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.uniformBufferStandardLayout)
	return *ptr
}

// WithUniformBufferStandardLayout copies the provided value into C space and stores it
// at uniformBufferStandardLayout on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithUniformBufferStandardLayout(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.uniformBufferStandardLayout = *ptr
	return x
}

// ShaderSubgroupExtendedTypes returns the value of shaderSubgroupExtendedTypes from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderSubgroupExtendedTypes() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSubgroupExtendedTypes)
	return *ptr
}

// WithShaderSubgroupExtendedTypes copies the provided value into C space and stores it
// at shaderSubgroupExtendedTypes on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderSubgroupExtendedTypes(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderSubgroupExtendedTypes = *ptr
	return x
}

// SeparateDepthStencilLayouts returns the value of separateDepthStencilLayouts from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) SeparateDepthStencilLayouts() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.separateDepthStencilLayouts)
	return *ptr
}

// WithSeparateDepthStencilLayouts copies the provided value into C space and stores it
// at separateDepthStencilLayouts on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithSeparateDepthStencilLayouts(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.separateDepthStencilLayouts = *ptr
	return x
}

// HostQueryReset returns the value of hostQueryReset from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) HostQueryReset() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.hostQueryReset)
	return *ptr
}

// WithHostQueryReset copies the provided value into C space and stores it
// at hostQueryReset on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithHostQueryReset(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.hostQueryReset = *ptr
	return x
}

// TimelineSemaphore returns the value of timelineSemaphore from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) TimelineSemaphore() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.timelineSemaphore)
	return *ptr
}

// WithTimelineSemaphore copies the provided value into C space and stores it
// at timelineSemaphore on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithTimelineSemaphore(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.timelineSemaphore = *ptr
	return x
}

// BufferDeviceAddress returns the value of bufferDeviceAddress from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) BufferDeviceAddress() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.bufferDeviceAddress)
	return *ptr
}

// WithBufferDeviceAddress copies the provided value into C space and stores it
// at bufferDeviceAddress on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithBufferDeviceAddress(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.bufferDeviceAddress = *ptr
	return x
}

// BufferDeviceAddressCaptureReplay returns the value of bufferDeviceAddressCaptureReplay from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) BufferDeviceAddressCaptureReplay() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.bufferDeviceAddressCaptureReplay)
	return *ptr
}

// WithBufferDeviceAddressCaptureReplay copies the provided value into C space and stores it
// at bufferDeviceAddressCaptureReplay on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithBufferDeviceAddressCaptureReplay(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.bufferDeviceAddressCaptureReplay = *ptr
	return x
}

// BufferDeviceAddressMultiDevice returns the value of bufferDeviceAddressMultiDevice from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) BufferDeviceAddressMultiDevice() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.bufferDeviceAddressMultiDevice)
	return *ptr
}

// WithBufferDeviceAddressMultiDevice copies the provided value into C space and stores it
// at bufferDeviceAddressMultiDevice on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithBufferDeviceAddressMultiDevice(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.bufferDeviceAddressMultiDevice = *ptr
	return x
}

// VulkanMemoryModel returns the value of vulkanMemoryModel from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) VulkanMemoryModel() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.vulkanMemoryModel)
	return *ptr
}

// WithVulkanMemoryModel copies the provided value into C space and stores it
// at vulkanMemoryModel on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithVulkanMemoryModel(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.vulkanMemoryModel = *ptr
	return x
}

// VulkanMemoryModelDeviceScope returns the value of vulkanMemoryModelDeviceScope from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) VulkanMemoryModelDeviceScope() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.vulkanMemoryModelDeviceScope)
	return *ptr
}

// WithVulkanMemoryModelDeviceScope copies the provided value into C space and stores it
// at vulkanMemoryModelDeviceScope on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithVulkanMemoryModelDeviceScope(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.vulkanMemoryModelDeviceScope = *ptr
	return x
}

// VulkanMemoryModelAvailabilityVisibilityChains returns the value of vulkanMemoryModelAvailabilityVisibilityChains from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) VulkanMemoryModelAvailabilityVisibilityChains() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.vulkanMemoryModelAvailabilityVisibilityChains)
	return *ptr
}

// WithVulkanMemoryModelAvailabilityVisibilityChains copies the provided value into C space and stores it
// at vulkanMemoryModelAvailabilityVisibilityChains on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithVulkanMemoryModelAvailabilityVisibilityChains(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.vulkanMemoryModelAvailabilityVisibilityChains = *ptr
	return x
}

// ShaderOutputViewportIndex returns the value of shaderOutputViewportIndex from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderOutputViewportIndex() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderOutputViewportIndex)
	return *ptr
}

// WithShaderOutputViewportIndex copies the provided value into C space and stores it
// at shaderOutputViewportIndex on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderOutputViewportIndex(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderOutputViewportIndex = *ptr
	return x
}

// ShaderOutputLayer returns the value of shaderOutputLayer from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) ShaderOutputLayer() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderOutputLayer)
	return *ptr
}

// WithShaderOutputLayer copies the provided value into C space and stores it
// at shaderOutputLayer on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithShaderOutputLayer(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderOutputLayer = *ptr
	return x
}

// SubgroupBroadcastDynamicId returns the value of subgroupBroadcastDynamicId from VkPhysicalDeviceVulkan12Features
func (x VkPhysicalDeviceVulkan12Features) SubgroupBroadcastDynamicId() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.subgroupBroadcastDynamicId)
	return *ptr
}

// WithSubgroupBroadcastDynamicId copies the provided value into C space and stores it
// at subgroupBroadcastDynamicId on VkPhysicalDeviceVulkan12Features
func (x *VkPhysicalDeviceVulkan12Features) WithSubgroupBroadcastDynamicId(y VkBool32) *VkPhysicalDeviceVulkan12Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.subgroupBroadcastDynamicId = *ptr
	return x
}

//VkPhysicalDeviceVulkan11Properties provides a go interface for VkPhysicalDeviceVulkan11Properties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html
type VkPhysicalDeviceVulkan11Properties C.struct_VkPhysicalDeviceVulkan11Properties

// NewVkPhysicalDeviceVulkan11Properties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceVulkan11Properties() *VkPhysicalDeviceVulkan11Properties {
	sz := unsafe.Sizeof(VkPhysicalDeviceVulkan11Properties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceVulkan11Properties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceVulkan11Properties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceVulkan11Properties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceVulkan11Properties) AsPtr() *VkPhysicalDeviceVulkan11Properties { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceVulkan11Properties) AsCPtr() *VkPhysicalDeviceVulkan11Properties {
	clone := newVkPhysicalDeviceVulkan11Properties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceVulkan11Properties) WithDefaultSType() *VkPhysicalDeviceVulkan11Properties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceVulkan11Properties
func (x *VkPhysicalDeviceVulkan11Properties) WithSType(y VkStructureType) *VkPhysicalDeviceVulkan11Properties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceVulkan11Properties
func (x *VkPhysicalDeviceVulkan11Properties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceVulkan11Properties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// DeviceUUID returns the value of deviceUUID from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) DeviceUUID() []byte {
	ptr := func(x *[VK_UUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_UUID_SIZE)
		return &slc
	}(&x.deviceUUID)
	return *ptr
}

// DriverUUID returns the value of driverUUID from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) DriverUUID() []byte {
	ptr := func(x *[VK_UUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_UUID_SIZE)
		return &slc
	}(&x.driverUUID)
	return *ptr
}

// DeviceLUID returns the value of deviceLUID from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) DeviceLUID() []byte {
	ptr := func(x *[VK_LUID_SIZE]C.uchar) *[]byte { /* Array */
		slc := unsafe.Slice((*byte)(unsafe.Pointer(x)), VK_LUID_SIZE)
		return &slc
	}(&x.deviceLUID)
	return *ptr
}

// DeviceNodeMask returns the value of deviceNodeMask from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) DeviceNodeMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceNodeMask)
	return *ptr
}

// DeviceLUIDValid returns the value of deviceLUIDValid from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) DeviceLUIDValid() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.deviceLUIDValid)
	return *ptr
}

// SubgroupSize returns the value of subgroupSize from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) SubgroupSize() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.subgroupSize)
	return *ptr
}

// SubgroupSupportedStages returns the value of subgroupSupportedStages from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) SubgroupSupportedStages() VkShaderStageFlags {
	ptr := /* Identifier */ (*VkShaderStageFlags)(&x.subgroupSupportedStages)
	return *ptr
}

// SubgroupSupportedOperations returns the value of subgroupSupportedOperations from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) SubgroupSupportedOperations() VkSubgroupFeatureFlags {
	ptr := /* Identifier */ (*VkSubgroupFeatureFlags)(&x.subgroupSupportedOperations)
	return *ptr
}

// SubgroupQuadOperationsInAllStages returns the value of subgroupQuadOperationsInAllStages from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) SubgroupQuadOperationsInAllStages() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.subgroupQuadOperationsInAllStages)
	return *ptr
}

// PointClippingBehavior returns the value of pointClippingBehavior from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) PointClippingBehavior() VkPointClippingBehavior {
	ptr := /* Identifier */ (*VkPointClippingBehavior)(&x.pointClippingBehavior)
	return *ptr
}

// MaxMultiviewViewCount returns the value of maxMultiviewViewCount from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) MaxMultiviewViewCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxMultiviewViewCount)
	return *ptr
}

// MaxMultiviewInstanceIndex returns the value of maxMultiviewInstanceIndex from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) MaxMultiviewInstanceIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxMultiviewInstanceIndex)
	return *ptr
}

// ProtectedNoFault returns the value of protectedNoFault from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) ProtectedNoFault() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.protectedNoFault)
	return *ptr
}

// MaxPerSetDescriptors returns the value of maxPerSetDescriptors from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) MaxPerSetDescriptors() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxPerSetDescriptors)
	return *ptr
}

// MaxMemoryAllocationSize returns the value of maxMemoryAllocationSize from VkPhysicalDeviceVulkan11Properties
func (x VkPhysicalDeviceVulkan11Properties) MaxMemoryAllocationSize() VkDeviceSize {
	ptr := /* Identifier */ (*VkDeviceSize)(&x.maxMemoryAllocationSize)
	return *ptr
}

//VkPhysicalDeviceScalarBlockLayoutFeatures provides a go interface for VkPhysicalDeviceScalarBlockLayoutFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceScalarBlockLayoutFeatures.html
type VkPhysicalDeviceScalarBlockLayoutFeatures C.struct_VkPhysicalDeviceScalarBlockLayoutFeatures

// NewVkPhysicalDeviceScalarBlockLayoutFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceScalarBlockLayoutFeatures() *VkPhysicalDeviceScalarBlockLayoutFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceScalarBlockLayoutFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceScalarBlockLayoutFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceScalarBlockLayoutFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceScalarBlockLayoutFeatures) AsPtr() *VkPhysicalDeviceScalarBlockLayoutFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceScalarBlockLayoutFeatures) AsCPtr() *VkPhysicalDeviceScalarBlockLayoutFeatures {
	clone := newVkPhysicalDeviceScalarBlockLayoutFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceScalarBlockLayoutFeatures
func (x VkPhysicalDeviceScalarBlockLayoutFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceScalarBlockLayoutFeatures) WithDefaultSType() *VkPhysicalDeviceScalarBlockLayoutFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceScalarBlockLayoutFeatures
func (x *VkPhysicalDeviceScalarBlockLayoutFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceScalarBlockLayoutFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceScalarBlockLayoutFeatures
func (x VkPhysicalDeviceScalarBlockLayoutFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceScalarBlockLayoutFeatures
func (x *VkPhysicalDeviceScalarBlockLayoutFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceScalarBlockLayoutFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ScalarBlockLayout returns the value of scalarBlockLayout from VkPhysicalDeviceScalarBlockLayoutFeatures
func (x VkPhysicalDeviceScalarBlockLayoutFeatures) ScalarBlockLayout() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.scalarBlockLayout)
	return *ptr
}

// WithScalarBlockLayout copies the provided value into C space and stores it
// at scalarBlockLayout on VkPhysicalDeviceScalarBlockLayoutFeatures
func (x *VkPhysicalDeviceScalarBlockLayoutFeatures) WithScalarBlockLayout(y VkBool32) *VkPhysicalDeviceScalarBlockLayoutFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.scalarBlockLayout = *ptr
	return x
}

//VkImageStencilUsageCreateInfo provides a go interface for VkImageStencilUsageCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageStencilUsageCreateInfo.html
type VkImageStencilUsageCreateInfo C.struct_VkImageStencilUsageCreateInfo

// NewVkImageStencilUsageCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageStencilUsageCreateInfo() *VkImageStencilUsageCreateInfo {
	sz := unsafe.Sizeof(VkImageStencilUsageCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageStencilUsageCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkImageStencilUsageCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageStencilUsageCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageStencilUsageCreateInfo) AsPtr() *VkImageStencilUsageCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageStencilUsageCreateInfo) AsCPtr() *VkImageStencilUsageCreateInfo {
	clone := newVkImageStencilUsageCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageStencilUsageCreateInfo
func (x VkImageStencilUsageCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageStencilUsageCreateInfo) WithDefaultSType() *VkImageStencilUsageCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageStencilUsageCreateInfo
func (x *VkImageStencilUsageCreateInfo) WithSType(y VkStructureType) *VkImageStencilUsageCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageStencilUsageCreateInfo
func (x VkImageStencilUsageCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageStencilUsageCreateInfo
func (x *VkImageStencilUsageCreateInfo) WithPNext(y unsafe.Pointer) *VkImageStencilUsageCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// StencilUsage returns the value of stencilUsage from VkImageStencilUsageCreateInfo
func (x VkImageStencilUsageCreateInfo) StencilUsage() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.stencilUsage)
	return *ptr
}

// WithStencilUsage copies the provided value into C space and stores it
// at stencilUsage on VkImageStencilUsageCreateInfo
func (x *VkImageStencilUsageCreateInfo) WithStencilUsage(y VkImageUsageFlags) *VkImageStencilUsageCreateInfo {
	ptr := /* Identifier */ (*C.VkImageUsageFlags)(&y)
	x.stencilUsage = *ptr
	return x
}

//VkPhysicalDeviceVulkan11Features provides a go interface for VkPhysicalDeviceVulkan11Features.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan11Features.html
type VkPhysicalDeviceVulkan11Features C.struct_VkPhysicalDeviceVulkan11Features

// NewVkPhysicalDeviceVulkan11Features allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceVulkan11Features() *VkPhysicalDeviceVulkan11Features {
	sz := unsafe.Sizeof(VkPhysicalDeviceVulkan11Features{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceVulkan11Features)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceVulkan11Features method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceVulkan11Features) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceVulkan11Features) AsPtr() *VkPhysicalDeviceVulkan11Features { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceVulkan11Features) AsCPtr() *VkPhysicalDeviceVulkan11Features {
	clone := newVkPhysicalDeviceVulkan11Features()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceVulkan11Features) WithDefaultSType() *VkPhysicalDeviceVulkan11Features {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithSType(y VkStructureType) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceVulkan11Features {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// StorageBuffer16BitAccess returns the value of storageBuffer16BitAccess from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) StorageBuffer16BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storageBuffer16BitAccess)
	return *ptr
}

// WithStorageBuffer16BitAccess copies the provided value into C space and stores it
// at storageBuffer16BitAccess on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithStorageBuffer16BitAccess(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storageBuffer16BitAccess = *ptr
	return x
}

// UniformAndStorageBuffer16BitAccess returns the value of uniformAndStorageBuffer16BitAccess from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) UniformAndStorageBuffer16BitAccess() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.uniformAndStorageBuffer16BitAccess)
	return *ptr
}

// WithUniformAndStorageBuffer16BitAccess copies the provided value into C space and stores it
// at uniformAndStorageBuffer16BitAccess on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithUniformAndStorageBuffer16BitAccess(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.uniformAndStorageBuffer16BitAccess = *ptr
	return x
}

// StoragePushConstant16 returns the value of storagePushConstant16 from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) StoragePushConstant16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storagePushConstant16)
	return *ptr
}

// WithStoragePushConstant16 copies the provided value into C space and stores it
// at storagePushConstant16 on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithStoragePushConstant16(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storagePushConstant16 = *ptr
	return x
}

// StorageInputOutput16 returns the value of storageInputOutput16 from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) StorageInputOutput16() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.storageInputOutput16)
	return *ptr
}

// WithStorageInputOutput16 copies the provided value into C space and stores it
// at storageInputOutput16 on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithStorageInputOutput16(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.storageInputOutput16 = *ptr
	return x
}

// Multiview returns the value of multiview from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) Multiview() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiview)
	return *ptr
}

// WithMultiview copies the provided value into C space and stores it
// at multiview on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithMultiview(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiview = *ptr
	return x
}

// MultiviewGeometryShader returns the value of multiviewGeometryShader from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) MultiviewGeometryShader() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiviewGeometryShader)
	return *ptr
}

// WithMultiviewGeometryShader copies the provided value into C space and stores it
// at multiviewGeometryShader on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithMultiviewGeometryShader(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiviewGeometryShader = *ptr
	return x
}

// MultiviewTessellationShader returns the value of multiviewTessellationShader from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) MultiviewTessellationShader() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.multiviewTessellationShader)
	return *ptr
}

// WithMultiviewTessellationShader copies the provided value into C space and stores it
// at multiviewTessellationShader on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithMultiviewTessellationShader(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.multiviewTessellationShader = *ptr
	return x
}

// VariablePointersStorageBuffer returns the value of variablePointersStorageBuffer from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) VariablePointersStorageBuffer() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.variablePointersStorageBuffer)
	return *ptr
}

// WithVariablePointersStorageBuffer copies the provided value into C space and stores it
// at variablePointersStorageBuffer on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithVariablePointersStorageBuffer(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.variablePointersStorageBuffer = *ptr
	return x
}

// VariablePointers returns the value of variablePointers from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) VariablePointers() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.variablePointers)
	return *ptr
}

// WithVariablePointers copies the provided value into C space and stores it
// at variablePointers on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithVariablePointers(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.variablePointers = *ptr
	return x
}

// ProtectedMemory returns the value of protectedMemory from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) ProtectedMemory() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.protectedMemory)
	return *ptr
}

// WithProtectedMemory copies the provided value into C space and stores it
// at protectedMemory on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithProtectedMemory(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.protectedMemory = *ptr
	return x
}

// SamplerYcbcrConversion returns the value of samplerYcbcrConversion from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) SamplerYcbcrConversion() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.samplerYcbcrConversion)
	return *ptr
}

// WithSamplerYcbcrConversion copies the provided value into C space and stores it
// at samplerYcbcrConversion on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithSamplerYcbcrConversion(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.samplerYcbcrConversion = *ptr
	return x
}

// ShaderDrawParameters returns the value of shaderDrawParameters from VkPhysicalDeviceVulkan11Features
func (x VkPhysicalDeviceVulkan11Features) ShaderDrawParameters() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderDrawParameters)
	return *ptr
}

// WithShaderDrawParameters copies the provided value into C space and stores it
// at shaderDrawParameters on VkPhysicalDeviceVulkan11Features
func (x *VkPhysicalDeviceVulkan11Features) WithShaderDrawParameters(y VkBool32) *VkPhysicalDeviceVulkan11Features {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderDrawParameters = *ptr
	return x
}

//VkSamplerReductionModeCreateInfo provides a go interface for VkSamplerReductionModeCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerReductionModeCreateInfo.html
type VkSamplerReductionModeCreateInfo C.struct_VkSamplerReductionModeCreateInfo

// NewVkSamplerReductionModeCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSamplerReductionModeCreateInfo() *VkSamplerReductionModeCreateInfo {
	sz := unsafe.Sizeof(VkSamplerReductionModeCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSamplerReductionModeCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSamplerReductionModeCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSamplerReductionModeCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSamplerReductionModeCreateInfo) AsPtr() *VkSamplerReductionModeCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSamplerReductionModeCreateInfo) AsCPtr() *VkSamplerReductionModeCreateInfo {
	clone := newVkSamplerReductionModeCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSamplerReductionModeCreateInfo
func (x VkSamplerReductionModeCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSamplerReductionModeCreateInfo) WithDefaultSType() *VkSamplerReductionModeCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSamplerReductionModeCreateInfo
func (x *VkSamplerReductionModeCreateInfo) WithSType(y VkStructureType) *VkSamplerReductionModeCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSamplerReductionModeCreateInfo
func (x VkSamplerReductionModeCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSamplerReductionModeCreateInfo
func (x *VkSamplerReductionModeCreateInfo) WithPNext(y unsafe.Pointer) *VkSamplerReductionModeCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ReductionMode returns the value of reductionMode from VkSamplerReductionModeCreateInfo
func (x VkSamplerReductionModeCreateInfo) ReductionMode() VkSamplerReductionMode {
	ptr := /* Identifier */ (*VkSamplerReductionMode)(&x.reductionMode)
	return *ptr
}

// WithReductionMode copies the provided value into C space and stores it
// at reductionMode on VkSamplerReductionModeCreateInfo
func (x *VkSamplerReductionModeCreateInfo) WithReductionMode(y VkSamplerReductionMode) *VkSamplerReductionModeCreateInfo {
	ptr := /* Identifier */ (*C.VkSamplerReductionMode)(&y)
	x.reductionMode = *ptr
	return x
}

//VkPhysicalDeviceSamplerFilterMinmaxProperties provides a go interface for VkPhysicalDeviceSamplerFilterMinmaxProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSamplerFilterMinmaxProperties.html
type VkPhysicalDeviceSamplerFilterMinmaxProperties C.struct_VkPhysicalDeviceSamplerFilterMinmaxProperties

// NewVkPhysicalDeviceSamplerFilterMinmaxProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceSamplerFilterMinmaxProperties() *VkPhysicalDeviceSamplerFilterMinmaxProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceSamplerFilterMinmaxProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceSamplerFilterMinmaxProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceSamplerFilterMinmaxProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceSamplerFilterMinmaxProperties) AsPtr() *VkPhysicalDeviceSamplerFilterMinmaxProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceSamplerFilterMinmaxProperties) AsCPtr() *VkPhysicalDeviceSamplerFilterMinmaxProperties {
	clone := newVkPhysicalDeviceSamplerFilterMinmaxProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceSamplerFilterMinmaxProperties
func (x VkPhysicalDeviceSamplerFilterMinmaxProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceSamplerFilterMinmaxProperties) WithDefaultSType() *VkPhysicalDeviceSamplerFilterMinmaxProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceSamplerFilterMinmaxProperties
func (x *VkPhysicalDeviceSamplerFilterMinmaxProperties) WithSType(y VkStructureType) *VkPhysicalDeviceSamplerFilterMinmaxProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceSamplerFilterMinmaxProperties
func (x VkPhysicalDeviceSamplerFilterMinmaxProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceSamplerFilterMinmaxProperties
func (x *VkPhysicalDeviceSamplerFilterMinmaxProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceSamplerFilterMinmaxProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// FilterMinmaxSingleComponentFormats returns the value of filterMinmaxSingleComponentFormats from VkPhysicalDeviceSamplerFilterMinmaxProperties
func (x VkPhysicalDeviceSamplerFilterMinmaxProperties) FilterMinmaxSingleComponentFormats() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.filterMinmaxSingleComponentFormats)
	return *ptr
}

// FilterMinmaxImageComponentMapping returns the value of filterMinmaxImageComponentMapping from VkPhysicalDeviceSamplerFilterMinmaxProperties
func (x VkPhysicalDeviceSamplerFilterMinmaxProperties) FilterMinmaxImageComponentMapping() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.filterMinmaxImageComponentMapping)
	return *ptr
}

//VkPhysicalDeviceVulkanMemoryModelFeatures provides a go interface for VkPhysicalDeviceVulkanMemoryModelFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkanMemoryModelFeatures.html
type VkPhysicalDeviceVulkanMemoryModelFeatures C.struct_VkPhysicalDeviceVulkanMemoryModelFeatures

// NewVkPhysicalDeviceVulkanMemoryModelFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceVulkanMemoryModelFeatures() *VkPhysicalDeviceVulkanMemoryModelFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceVulkanMemoryModelFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceVulkanMemoryModelFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) AsPtr() *VkPhysicalDeviceVulkanMemoryModelFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) AsCPtr() *VkPhysicalDeviceVulkanMemoryModelFeatures {
	clone := newVkPhysicalDeviceVulkanMemoryModelFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceVulkanMemoryModelFeatures
func (x VkPhysicalDeviceVulkanMemoryModelFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) WithDefaultSType() *VkPhysicalDeviceVulkanMemoryModelFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceVulkanMemoryModelFeatures
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceVulkanMemoryModelFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceVulkanMemoryModelFeatures
func (x VkPhysicalDeviceVulkanMemoryModelFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceVulkanMemoryModelFeatures
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceVulkanMemoryModelFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// VulkanMemoryModel returns the value of vulkanMemoryModel from VkPhysicalDeviceVulkanMemoryModelFeatures
func (x VkPhysicalDeviceVulkanMemoryModelFeatures) VulkanMemoryModel() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.vulkanMemoryModel)
	return *ptr
}

// WithVulkanMemoryModel copies the provided value into C space and stores it
// at vulkanMemoryModel on VkPhysicalDeviceVulkanMemoryModelFeatures
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) WithVulkanMemoryModel(y VkBool32) *VkPhysicalDeviceVulkanMemoryModelFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.vulkanMemoryModel = *ptr
	return x
}

// VulkanMemoryModelDeviceScope returns the value of vulkanMemoryModelDeviceScope from VkPhysicalDeviceVulkanMemoryModelFeatures
func (x VkPhysicalDeviceVulkanMemoryModelFeatures) VulkanMemoryModelDeviceScope() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.vulkanMemoryModelDeviceScope)
	return *ptr
}

// WithVulkanMemoryModelDeviceScope copies the provided value into C space and stores it
// at vulkanMemoryModelDeviceScope on VkPhysicalDeviceVulkanMemoryModelFeatures
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) WithVulkanMemoryModelDeviceScope(y VkBool32) *VkPhysicalDeviceVulkanMemoryModelFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.vulkanMemoryModelDeviceScope = *ptr
	return x
}

// VulkanMemoryModelAvailabilityVisibilityChains returns the value of vulkanMemoryModelAvailabilityVisibilityChains from VkPhysicalDeviceVulkanMemoryModelFeatures
func (x VkPhysicalDeviceVulkanMemoryModelFeatures) VulkanMemoryModelAvailabilityVisibilityChains() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.vulkanMemoryModelAvailabilityVisibilityChains)
	return *ptr
}

// WithVulkanMemoryModelAvailabilityVisibilityChains copies the provided value into C space and stores it
// at vulkanMemoryModelAvailabilityVisibilityChains on VkPhysicalDeviceVulkanMemoryModelFeatures
func (x *VkPhysicalDeviceVulkanMemoryModelFeatures) WithVulkanMemoryModelAvailabilityVisibilityChains(y VkBool32) *VkPhysicalDeviceVulkanMemoryModelFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.vulkanMemoryModelAvailabilityVisibilityChains = *ptr
	return x
}

//VkPhysicalDeviceImagelessFramebufferFeatures provides a go interface for VkPhysicalDeviceImagelessFramebufferFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImagelessFramebufferFeatures.html
type VkPhysicalDeviceImagelessFramebufferFeatures C.struct_VkPhysicalDeviceImagelessFramebufferFeatures

// NewVkPhysicalDeviceImagelessFramebufferFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceImagelessFramebufferFeatures() *VkPhysicalDeviceImagelessFramebufferFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceImagelessFramebufferFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceImagelessFramebufferFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceImagelessFramebufferFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceImagelessFramebufferFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceImagelessFramebufferFeatures) AsPtr() *VkPhysicalDeviceImagelessFramebufferFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceImagelessFramebufferFeatures) AsCPtr() *VkPhysicalDeviceImagelessFramebufferFeatures {
	clone := newVkPhysicalDeviceImagelessFramebufferFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceImagelessFramebufferFeatures
func (x VkPhysicalDeviceImagelessFramebufferFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceImagelessFramebufferFeatures) WithDefaultSType() *VkPhysicalDeviceImagelessFramebufferFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceImagelessFramebufferFeatures
func (x *VkPhysicalDeviceImagelessFramebufferFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceImagelessFramebufferFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceImagelessFramebufferFeatures
func (x VkPhysicalDeviceImagelessFramebufferFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceImagelessFramebufferFeatures
func (x *VkPhysicalDeviceImagelessFramebufferFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceImagelessFramebufferFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ImagelessFramebuffer returns the value of imagelessFramebuffer from VkPhysicalDeviceImagelessFramebufferFeatures
func (x VkPhysicalDeviceImagelessFramebufferFeatures) ImagelessFramebuffer() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.imagelessFramebuffer)
	return *ptr
}

// WithImagelessFramebuffer copies the provided value into C space and stores it
// at imagelessFramebuffer on VkPhysicalDeviceImagelessFramebufferFeatures
func (x *VkPhysicalDeviceImagelessFramebufferFeatures) WithImagelessFramebuffer(y VkBool32) *VkPhysicalDeviceImagelessFramebufferFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.imagelessFramebuffer = *ptr
	return x
}

//VkFramebufferAttachmentsCreateInfo provides a go interface for VkFramebufferAttachmentsCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferAttachmentsCreateInfo.html
type VkFramebufferAttachmentsCreateInfo C.struct_VkFramebufferAttachmentsCreateInfo

// NewVkFramebufferAttachmentsCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkFramebufferAttachmentsCreateInfo() *VkFramebufferAttachmentsCreateInfo {
	sz := unsafe.Sizeof(VkFramebufferAttachmentsCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkFramebufferAttachmentsCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkFramebufferAttachmentsCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkFramebufferAttachmentsCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkFramebufferAttachmentsCreateInfo) AsPtr() *VkFramebufferAttachmentsCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkFramebufferAttachmentsCreateInfo) AsCPtr() *VkFramebufferAttachmentsCreateInfo {
	clone := newVkFramebufferAttachmentsCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkFramebufferAttachmentsCreateInfo
func (x VkFramebufferAttachmentsCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkFramebufferAttachmentsCreateInfo) WithDefaultSType() *VkFramebufferAttachmentsCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkFramebufferAttachmentsCreateInfo
func (x *VkFramebufferAttachmentsCreateInfo) WithSType(y VkStructureType) *VkFramebufferAttachmentsCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkFramebufferAttachmentsCreateInfo
func (x VkFramebufferAttachmentsCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkFramebufferAttachmentsCreateInfo
func (x *VkFramebufferAttachmentsCreateInfo) WithPNext(y unsafe.Pointer) *VkFramebufferAttachmentsCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// AttachmentImageInfoCount returns the value of attachmentImageInfoCount from VkFramebufferAttachmentsCreateInfo
func (x VkFramebufferAttachmentsCreateInfo) AttachmentImageInfoCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachmentImageInfoCount)
	return *ptr
}

// WithAttachmentImageInfoCount copies the provided value into C space and stores it
// at attachmentImageInfoCount on VkFramebufferAttachmentsCreateInfo
func (x *VkFramebufferAttachmentsCreateInfo) WithAttachmentImageInfoCount(y uint32) *VkFramebufferAttachmentsCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachmentImageInfoCount = *ptr
	return x
}

// PAttachmentImageInfos returns the value of pAttachmentImageInfos from VkFramebufferAttachmentsCreateInfo
func (x VkFramebufferAttachmentsCreateInfo) PAttachmentImageInfos() []VkFramebufferAttachmentImageInfo {
	ptr := func(x **C.VkFramebufferAttachmentImageInfo) *[]VkFramebufferAttachmentImageInfo { /* Slice */
		slc := unsafe.Slice((*VkFramebufferAttachmentImageInfo)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pAttachmentImageInfos)
	return *ptr
}

// WithPAttachmentImageInfos copies the provided value into C space and stores it
// at pAttachmentImageInfos on VkFramebufferAttachmentsCreateInfo
func (x *VkFramebufferAttachmentsCreateInfo) WithPAttachmentImageInfos(y []VkFramebufferAttachmentImageInfo) *VkFramebufferAttachmentsCreateInfo {
	ptr := func(x *[]VkFramebufferAttachmentImageInfo) **C.VkFramebufferAttachmentImageInfo { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkFramebufferAttachmentImageInfo)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkFramebufferAttachmentImageInfo)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pAttachmentImageInfos = *ptr
	return x
}

//VkFramebufferAttachmentImageInfo provides a go interface for VkFramebufferAttachmentImageInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferAttachmentImageInfo.html
type VkFramebufferAttachmentImageInfo C.struct_VkFramebufferAttachmentImageInfo

// NewVkFramebufferAttachmentImageInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkFramebufferAttachmentImageInfo() *VkFramebufferAttachmentImageInfo {
	sz := unsafe.Sizeof(VkFramebufferAttachmentImageInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkFramebufferAttachmentImageInfo)(ptr)
}

// Free releases the memory allocated by the NewVkFramebufferAttachmentImageInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkFramebufferAttachmentImageInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkFramebufferAttachmentImageInfo) AsPtr() *VkFramebufferAttachmentImageInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkFramebufferAttachmentImageInfo) AsCPtr() *VkFramebufferAttachmentImageInfo {
	clone := newVkFramebufferAttachmentImageInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkFramebufferAttachmentImageInfo) WithDefaultSType() *VkFramebufferAttachmentImageInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithSType(y VkStructureType) *VkFramebufferAttachmentImageInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithPNext(y unsafe.Pointer) *VkFramebufferAttachmentImageInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) Flags() VkImageCreateFlags {
	ptr := /* Identifier */ (*VkImageCreateFlags)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithFlags(y VkImageCreateFlags) *VkFramebufferAttachmentImageInfo {
	ptr := /* Identifier */ (*C.VkImageCreateFlags)(&y)
	x.flags = *ptr
	return x
}

// Usage returns the value of usage from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) Usage() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.usage)
	return *ptr
}

// WithUsage copies the provided value into C space and stores it
// at usage on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithUsage(y VkImageUsageFlags) *VkFramebufferAttachmentImageInfo {
	ptr := /* Identifier */ (*C.VkImageUsageFlags)(&y)
	x.usage = *ptr
	return x
}

// Width returns the value of width from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) Width() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.width)
	return *ptr
}

// WithWidth copies the provided value into C space and stores it
// at width on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithWidth(y uint32) *VkFramebufferAttachmentImageInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.width = *ptr
	return x
}

// Height returns the value of height from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) Height() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.height)
	return *ptr
}

// WithHeight copies the provided value into C space and stores it
// at height on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithHeight(y uint32) *VkFramebufferAttachmentImageInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.height = *ptr
	return x
}

// LayerCount returns the value of layerCount from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) LayerCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.layerCount)
	return *ptr
}

// WithLayerCount copies the provided value into C space and stores it
// at layerCount on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithLayerCount(y uint32) *VkFramebufferAttachmentImageInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.layerCount = *ptr
	return x
}

// ViewFormatCount returns the value of viewFormatCount from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) ViewFormatCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.viewFormatCount)
	return *ptr
}

// WithViewFormatCount copies the provided value into C space and stores it
// at viewFormatCount on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithViewFormatCount(y uint32) *VkFramebufferAttachmentImageInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.viewFormatCount = *ptr
	return x
}

// PViewFormats returns the value of pViewFormats from VkFramebufferAttachmentImageInfo
func (x VkFramebufferAttachmentImageInfo) PViewFormats() []VkFormat {
	ptr := func(x **C.VkFormat) *[]VkFormat { /* Slice */
		slc := unsafe.Slice((*VkFormat)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pViewFormats)
	return *ptr
}

// WithPViewFormats copies the provided value into C space and stores it
// at pViewFormats on VkFramebufferAttachmentImageInfo
func (x *VkFramebufferAttachmentImageInfo) WithPViewFormats(y []VkFormat) *VkFramebufferAttachmentImageInfo {
	ptr := func(x *[]VkFormat) **C.VkFormat { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkFormat)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkFormat)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pViewFormats = *ptr
	return x
}

//VkRenderPassAttachmentBeginInfo provides a go interface for VkRenderPassAttachmentBeginInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassAttachmentBeginInfo.html
type VkRenderPassAttachmentBeginInfo C.struct_VkRenderPassAttachmentBeginInfo

// NewVkRenderPassAttachmentBeginInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkRenderPassAttachmentBeginInfo() *VkRenderPassAttachmentBeginInfo {
	sz := unsafe.Sizeof(VkRenderPassAttachmentBeginInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkRenderPassAttachmentBeginInfo)(ptr)
}

// Free releases the memory allocated by the NewVkRenderPassAttachmentBeginInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkRenderPassAttachmentBeginInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkRenderPassAttachmentBeginInfo) AsPtr() *VkRenderPassAttachmentBeginInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkRenderPassAttachmentBeginInfo) AsCPtr() *VkRenderPassAttachmentBeginInfo {
	clone := newVkRenderPassAttachmentBeginInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkRenderPassAttachmentBeginInfo
func (x VkRenderPassAttachmentBeginInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkRenderPassAttachmentBeginInfo) WithDefaultSType() *VkRenderPassAttachmentBeginInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkRenderPassAttachmentBeginInfo
func (x *VkRenderPassAttachmentBeginInfo) WithSType(y VkStructureType) *VkRenderPassAttachmentBeginInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkRenderPassAttachmentBeginInfo
func (x VkRenderPassAttachmentBeginInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkRenderPassAttachmentBeginInfo
func (x *VkRenderPassAttachmentBeginInfo) WithPNext(y unsafe.Pointer) *VkRenderPassAttachmentBeginInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// AttachmentCount returns the value of attachmentCount from VkRenderPassAttachmentBeginInfo
func (x VkRenderPassAttachmentBeginInfo) AttachmentCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.attachmentCount)
	return *ptr
}

// WithAttachmentCount copies the provided value into C space and stores it
// at attachmentCount on VkRenderPassAttachmentBeginInfo
func (x *VkRenderPassAttachmentBeginInfo) WithAttachmentCount(y uint32) *VkRenderPassAttachmentBeginInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.attachmentCount = *ptr
	return x
}

// PAttachments returns the value of pAttachments from VkRenderPassAttachmentBeginInfo
func (x VkRenderPassAttachmentBeginInfo) PAttachments() []VkImageView {
	ptr := func(x **C.VkImageView) *[]VkImageView { /* Slice */
		slc := unsafe.Slice((*VkImageView)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pAttachments)
	return *ptr
}

// WithPAttachments copies the provided value into C space and stores it
// at pAttachments on VkRenderPassAttachmentBeginInfo
func (x *VkRenderPassAttachmentBeginInfo) WithPAttachments(y []VkImageView) *VkRenderPassAttachmentBeginInfo {
	ptr := func(x *[]VkImageView) **C.VkImageView { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImageView)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImageView)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pAttachments = *ptr
	return x
}

//VkPhysicalDeviceUniformBufferStandardLayoutFeatures provides a go interface for VkPhysicalDeviceUniformBufferStandardLayoutFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceUniformBufferStandardLayoutFeatures.html
type VkPhysicalDeviceUniformBufferStandardLayoutFeatures C.struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures

// NewVkPhysicalDeviceUniformBufferStandardLayoutFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceUniformBufferStandardLayoutFeatures() *VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceUniformBufferStandardLayoutFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceUniformBufferStandardLayoutFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceUniformBufferStandardLayoutFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceUniformBufferStandardLayoutFeatures) AsPtr() *VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceUniformBufferStandardLayoutFeatures) AsCPtr() *VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	clone := newVkPhysicalDeviceUniformBufferStandardLayoutFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceUniformBufferStandardLayoutFeatures
func (x VkPhysicalDeviceUniformBufferStandardLayoutFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceUniformBufferStandardLayoutFeatures) WithDefaultSType() *VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceUniformBufferStandardLayoutFeatures
func (x *VkPhysicalDeviceUniformBufferStandardLayoutFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceUniformBufferStandardLayoutFeatures
func (x VkPhysicalDeviceUniformBufferStandardLayoutFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceUniformBufferStandardLayoutFeatures
func (x *VkPhysicalDeviceUniformBufferStandardLayoutFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// UniformBufferStandardLayout returns the value of uniformBufferStandardLayout from VkPhysicalDeviceUniformBufferStandardLayoutFeatures
func (x VkPhysicalDeviceUniformBufferStandardLayoutFeatures) UniformBufferStandardLayout() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.uniformBufferStandardLayout)
	return *ptr
}

// WithUniformBufferStandardLayout copies the provided value into C space and stores it
// at uniformBufferStandardLayout on VkPhysicalDeviceUniformBufferStandardLayoutFeatures
func (x *VkPhysicalDeviceUniformBufferStandardLayoutFeatures) WithUniformBufferStandardLayout(y VkBool32) *VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.uniformBufferStandardLayout = *ptr
	return x
}

//VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures provides a go interface for VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.html
type VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures C.struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures

// NewVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures() *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) AsPtr() *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) AsCPtr() *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	clone := newVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
func (x VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) WithDefaultSType() *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
func (x *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
func (x VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
func (x *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// ShaderSubgroupExtendedTypes returns the value of shaderSubgroupExtendedTypes from VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
func (x VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) ShaderSubgroupExtendedTypes() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.shaderSubgroupExtendedTypes)
	return *ptr
}

// WithShaderSubgroupExtendedTypes copies the provided value into C space and stores it
// at shaderSubgroupExtendedTypes on VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
func (x *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) WithShaderSubgroupExtendedTypes(y VkBool32) *VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.shaderSubgroupExtendedTypes = *ptr
	return x
}

//VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures provides a go interface for VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.html
type VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures C.struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures

// NewVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures() *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) AsPtr() *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) AsCPtr() *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	clone := newVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
func (x VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) WithDefaultSType() *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
func (x *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
func (x VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
func (x *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SeparateDepthStencilLayouts returns the value of separateDepthStencilLayouts from VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
func (x VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) SeparateDepthStencilLayouts() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.separateDepthStencilLayouts)
	return *ptr
}

// WithSeparateDepthStencilLayouts copies the provided value into C space and stores it
// at separateDepthStencilLayouts on VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
func (x *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) WithSeparateDepthStencilLayouts(y VkBool32) *VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.separateDepthStencilLayouts = *ptr
	return x
}

//VkAttachmentReferenceStencilLayout provides a go interface for VkAttachmentReferenceStencilLayout.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReferenceStencilLayout.html
type VkAttachmentReferenceStencilLayout C.struct_VkAttachmentReferenceStencilLayout

// NewVkAttachmentReferenceStencilLayout allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAttachmentReferenceStencilLayout() *VkAttachmentReferenceStencilLayout {
	sz := unsafe.Sizeof(VkAttachmentReferenceStencilLayout{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAttachmentReferenceStencilLayout)(ptr)
}

// Free releases the memory allocated by the NewVkAttachmentReferenceStencilLayout method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAttachmentReferenceStencilLayout) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAttachmentReferenceStencilLayout) AsPtr() *VkAttachmentReferenceStencilLayout { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAttachmentReferenceStencilLayout) AsCPtr() *VkAttachmentReferenceStencilLayout {
	clone := newVkAttachmentReferenceStencilLayout()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkAttachmentReferenceStencilLayout
func (x VkAttachmentReferenceStencilLayout) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkAttachmentReferenceStencilLayout) WithDefaultSType() *VkAttachmentReferenceStencilLayout {
	return x.WithSType(VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkAttachmentReferenceStencilLayout
func (x *VkAttachmentReferenceStencilLayout) WithSType(y VkStructureType) *VkAttachmentReferenceStencilLayout {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkAttachmentReferenceStencilLayout
func (x VkAttachmentReferenceStencilLayout) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkAttachmentReferenceStencilLayout
func (x *VkAttachmentReferenceStencilLayout) WithPNext(y unsafe.Pointer) *VkAttachmentReferenceStencilLayout {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// StencilLayout returns the value of stencilLayout from VkAttachmentReferenceStencilLayout
func (x VkAttachmentReferenceStencilLayout) StencilLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.stencilLayout)
	return *ptr
}

// WithStencilLayout copies the provided value into C space and stores it
// at stencilLayout on VkAttachmentReferenceStencilLayout
func (x *VkAttachmentReferenceStencilLayout) WithStencilLayout(y VkImageLayout) *VkAttachmentReferenceStencilLayout {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.stencilLayout = *ptr
	return x
}

//VkAttachmentDescriptionStencilLayout provides a go interface for VkAttachmentDescriptionStencilLayout.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescriptionStencilLayout.html
type VkAttachmentDescriptionStencilLayout C.struct_VkAttachmentDescriptionStencilLayout

// NewVkAttachmentDescriptionStencilLayout allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAttachmentDescriptionStencilLayout() *VkAttachmentDescriptionStencilLayout {
	sz := unsafe.Sizeof(VkAttachmentDescriptionStencilLayout{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAttachmentDescriptionStencilLayout)(ptr)
}

// Free releases the memory allocated by the NewVkAttachmentDescriptionStencilLayout method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAttachmentDescriptionStencilLayout) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAttachmentDescriptionStencilLayout) AsPtr() *VkAttachmentDescriptionStencilLayout {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAttachmentDescriptionStencilLayout) AsCPtr() *VkAttachmentDescriptionStencilLayout {
	clone := newVkAttachmentDescriptionStencilLayout()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkAttachmentDescriptionStencilLayout
func (x VkAttachmentDescriptionStencilLayout) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkAttachmentDescriptionStencilLayout) WithDefaultSType() *VkAttachmentDescriptionStencilLayout {
	return x.WithSType(VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkAttachmentDescriptionStencilLayout
func (x *VkAttachmentDescriptionStencilLayout) WithSType(y VkStructureType) *VkAttachmentDescriptionStencilLayout {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkAttachmentDescriptionStencilLayout
func (x VkAttachmentDescriptionStencilLayout) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkAttachmentDescriptionStencilLayout
func (x *VkAttachmentDescriptionStencilLayout) WithPNext(y unsafe.Pointer) *VkAttachmentDescriptionStencilLayout {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// StencilInitialLayout returns the value of stencilInitialLayout from VkAttachmentDescriptionStencilLayout
func (x VkAttachmentDescriptionStencilLayout) StencilInitialLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.stencilInitialLayout)
	return *ptr
}

// WithStencilInitialLayout copies the provided value into C space and stores it
// at stencilInitialLayout on VkAttachmentDescriptionStencilLayout
func (x *VkAttachmentDescriptionStencilLayout) WithStencilInitialLayout(y VkImageLayout) *VkAttachmentDescriptionStencilLayout {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.stencilInitialLayout = *ptr
	return x
}

// StencilFinalLayout returns the value of stencilFinalLayout from VkAttachmentDescriptionStencilLayout
func (x VkAttachmentDescriptionStencilLayout) StencilFinalLayout() VkImageLayout {
	ptr := /* Identifier */ (*VkImageLayout)(&x.stencilFinalLayout)
	return *ptr
}

// WithStencilFinalLayout copies the provided value into C space and stores it
// at stencilFinalLayout on VkAttachmentDescriptionStencilLayout
func (x *VkAttachmentDescriptionStencilLayout) WithStencilFinalLayout(y VkImageLayout) *VkAttachmentDescriptionStencilLayout {
	ptr := /* Identifier */ (*C.VkImageLayout)(&y)
	x.stencilFinalLayout = *ptr
	return x
}

//VkTimelineSemaphoreSubmitInfo provides a go interface for VkTimelineSemaphoreSubmitInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTimelineSemaphoreSubmitInfo.html
type VkTimelineSemaphoreSubmitInfo C.struct_VkTimelineSemaphoreSubmitInfo

// NewVkTimelineSemaphoreSubmitInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkTimelineSemaphoreSubmitInfo() *VkTimelineSemaphoreSubmitInfo {
	sz := unsafe.Sizeof(VkTimelineSemaphoreSubmitInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkTimelineSemaphoreSubmitInfo)(ptr)
}

// Free releases the memory allocated by the NewVkTimelineSemaphoreSubmitInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkTimelineSemaphoreSubmitInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkTimelineSemaphoreSubmitInfo) AsPtr() *VkTimelineSemaphoreSubmitInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkTimelineSemaphoreSubmitInfo) AsCPtr() *VkTimelineSemaphoreSubmitInfo {
	clone := newVkTimelineSemaphoreSubmitInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkTimelineSemaphoreSubmitInfo
func (x VkTimelineSemaphoreSubmitInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkTimelineSemaphoreSubmitInfo) WithDefaultSType() *VkTimelineSemaphoreSubmitInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkTimelineSemaphoreSubmitInfo
func (x *VkTimelineSemaphoreSubmitInfo) WithSType(y VkStructureType) *VkTimelineSemaphoreSubmitInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkTimelineSemaphoreSubmitInfo
func (x VkTimelineSemaphoreSubmitInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkTimelineSemaphoreSubmitInfo
func (x *VkTimelineSemaphoreSubmitInfo) WithPNext(y unsafe.Pointer) *VkTimelineSemaphoreSubmitInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// WaitSemaphoreValueCount returns the value of waitSemaphoreValueCount from VkTimelineSemaphoreSubmitInfo
func (x VkTimelineSemaphoreSubmitInfo) WaitSemaphoreValueCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.waitSemaphoreValueCount)
	return *ptr
}

// WithWaitSemaphoreValueCount copies the provided value into C space and stores it
// at waitSemaphoreValueCount on VkTimelineSemaphoreSubmitInfo
func (x *VkTimelineSemaphoreSubmitInfo) WithWaitSemaphoreValueCount(y uint32) *VkTimelineSemaphoreSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.waitSemaphoreValueCount = *ptr
	return x
}

// PWaitSemaphoreValues returns the value of pWaitSemaphoreValues from VkTimelineSemaphoreSubmitInfo
func (x VkTimelineSemaphoreSubmitInfo) PWaitSemaphoreValues() []uint64 {
	ptr := func(x **C.ulonglong) *[]uint64 { /* Slice */
		slc := unsafe.Slice((*uint64)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pWaitSemaphoreValues)
	return *ptr
}

// WithPWaitSemaphoreValues copies the provided value into C space and stores it
// at pWaitSemaphoreValues on VkTimelineSemaphoreSubmitInfo
func (x *VkTimelineSemaphoreSubmitInfo) WithPWaitSemaphoreValues(y []uint64) *VkTimelineSemaphoreSubmitInfo {
	ptr := func(x *[]uint64) **C.ulonglong { /* Slice */
		if len(*x) > 0 {
			slc := (*C.ulonglong)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.ulonglong)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pWaitSemaphoreValues = *ptr
	return x
}

// SignalSemaphoreValueCount returns the value of signalSemaphoreValueCount from VkTimelineSemaphoreSubmitInfo
func (x VkTimelineSemaphoreSubmitInfo) SignalSemaphoreValueCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.signalSemaphoreValueCount)
	return *ptr
}

// WithSignalSemaphoreValueCount copies the provided value into C space and stores it
// at signalSemaphoreValueCount on VkTimelineSemaphoreSubmitInfo
func (x *VkTimelineSemaphoreSubmitInfo) WithSignalSemaphoreValueCount(y uint32) *VkTimelineSemaphoreSubmitInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.signalSemaphoreValueCount = *ptr
	return x
}

// PSignalSemaphoreValues returns the value of pSignalSemaphoreValues from VkTimelineSemaphoreSubmitInfo
func (x VkTimelineSemaphoreSubmitInfo) PSignalSemaphoreValues() []uint64 {
	ptr := func(x **C.ulonglong) *[]uint64 { /* Slice */
		slc := unsafe.Slice((*uint64)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSignalSemaphoreValues)
	return *ptr
}

// WithPSignalSemaphoreValues copies the provided value into C space and stores it
// at pSignalSemaphoreValues on VkTimelineSemaphoreSubmitInfo
func (x *VkTimelineSemaphoreSubmitInfo) WithPSignalSemaphoreValues(y []uint64) *VkTimelineSemaphoreSubmitInfo {
	ptr := func(x *[]uint64) **C.ulonglong { /* Slice */
		if len(*x) > 0 {
			slc := (*C.ulonglong)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.ulonglong)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSignalSemaphoreValues = *ptr
	return x
}

//VkPhysicalDeviceHostQueryResetFeatures provides a go interface for VkPhysicalDeviceHostQueryResetFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceHostQueryResetFeatures.html
type VkPhysicalDeviceHostQueryResetFeatures C.struct_VkPhysicalDeviceHostQueryResetFeatures

// NewVkPhysicalDeviceHostQueryResetFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceHostQueryResetFeatures() *VkPhysicalDeviceHostQueryResetFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceHostQueryResetFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceHostQueryResetFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceHostQueryResetFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceHostQueryResetFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceHostQueryResetFeatures) AsPtr() *VkPhysicalDeviceHostQueryResetFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceHostQueryResetFeatures) AsCPtr() *VkPhysicalDeviceHostQueryResetFeatures {
	clone := newVkPhysicalDeviceHostQueryResetFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceHostQueryResetFeatures
func (x VkPhysicalDeviceHostQueryResetFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceHostQueryResetFeatures) WithDefaultSType() *VkPhysicalDeviceHostQueryResetFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceHostQueryResetFeatures
func (x *VkPhysicalDeviceHostQueryResetFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceHostQueryResetFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceHostQueryResetFeatures
func (x VkPhysicalDeviceHostQueryResetFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceHostQueryResetFeatures
func (x *VkPhysicalDeviceHostQueryResetFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceHostQueryResetFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// HostQueryReset returns the value of hostQueryReset from VkPhysicalDeviceHostQueryResetFeatures
func (x VkPhysicalDeviceHostQueryResetFeatures) HostQueryReset() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.hostQueryReset)
	return *ptr
}

// WithHostQueryReset copies the provided value into C space and stores it
// at hostQueryReset on VkPhysicalDeviceHostQueryResetFeatures
func (x *VkPhysicalDeviceHostQueryResetFeatures) WithHostQueryReset(y VkBool32) *VkPhysicalDeviceHostQueryResetFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.hostQueryReset = *ptr
	return x
}

//VkSemaphoreTypeCreateInfo provides a go interface for VkSemaphoreTypeCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreTypeCreateInfo.html
type VkSemaphoreTypeCreateInfo C.struct_VkSemaphoreTypeCreateInfo

// NewVkSemaphoreTypeCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSemaphoreTypeCreateInfo() *VkSemaphoreTypeCreateInfo {
	sz := unsafe.Sizeof(VkSemaphoreTypeCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSemaphoreTypeCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkSemaphoreTypeCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSemaphoreTypeCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSemaphoreTypeCreateInfo) AsPtr() *VkSemaphoreTypeCreateInfo { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSemaphoreTypeCreateInfo) AsCPtr() *VkSemaphoreTypeCreateInfo {
	clone := newVkSemaphoreTypeCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSemaphoreTypeCreateInfo
func (x VkSemaphoreTypeCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSemaphoreTypeCreateInfo) WithDefaultSType() *VkSemaphoreTypeCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSemaphoreTypeCreateInfo
func (x *VkSemaphoreTypeCreateInfo) WithSType(y VkStructureType) *VkSemaphoreTypeCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSemaphoreTypeCreateInfo
func (x VkSemaphoreTypeCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSemaphoreTypeCreateInfo
func (x *VkSemaphoreTypeCreateInfo) WithPNext(y unsafe.Pointer) *VkSemaphoreTypeCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SemaphoreType returns the value of semaphoreType from VkSemaphoreTypeCreateInfo
func (x VkSemaphoreTypeCreateInfo) SemaphoreType() VkSemaphoreType {
	ptr := /* Identifier */ (*VkSemaphoreType)(&x.semaphoreType)
	return *ptr
}

// WithSemaphoreType copies the provided value into C space and stores it
// at semaphoreType on VkSemaphoreTypeCreateInfo
func (x *VkSemaphoreTypeCreateInfo) WithSemaphoreType(y VkSemaphoreType) *VkSemaphoreTypeCreateInfo {
	ptr := /* Identifier */ (*C.VkSemaphoreType)(&y)
	x.semaphoreType = *ptr
	return x
}

// InitialValue returns the value of initialValue from VkSemaphoreTypeCreateInfo
func (x VkSemaphoreTypeCreateInfo) InitialValue() uint64 {
	ptr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&x.initialValue)
	return *ptr
}

// WithInitialValue copies the provided value into C space and stores it
// at initialValue on VkSemaphoreTypeCreateInfo
func (x *VkSemaphoreTypeCreateInfo) WithInitialValue(y uint64) *VkSemaphoreTypeCreateInfo {
	ptr := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&y)
	x.initialValue = *ptr
	return x
}

//VkPhysicalDeviceTimelineSemaphoreProperties provides a go interface for VkPhysicalDeviceTimelineSemaphoreProperties.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreProperties.html
type VkPhysicalDeviceTimelineSemaphoreProperties C.struct_VkPhysicalDeviceTimelineSemaphoreProperties

// NewVkPhysicalDeviceTimelineSemaphoreProperties allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceTimelineSemaphoreProperties() *VkPhysicalDeviceTimelineSemaphoreProperties {
	sz := unsafe.Sizeof(VkPhysicalDeviceTimelineSemaphoreProperties{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceTimelineSemaphoreProperties)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceTimelineSemaphoreProperties method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceTimelineSemaphoreProperties) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceTimelineSemaphoreProperties) AsPtr() *VkPhysicalDeviceTimelineSemaphoreProperties {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceTimelineSemaphoreProperties) AsCPtr() *VkPhysicalDeviceTimelineSemaphoreProperties {
	clone := newVkPhysicalDeviceTimelineSemaphoreProperties()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceTimelineSemaphoreProperties
func (x VkPhysicalDeviceTimelineSemaphoreProperties) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceTimelineSemaphoreProperties) WithDefaultSType() *VkPhysicalDeviceTimelineSemaphoreProperties {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceTimelineSemaphoreProperties
func (x *VkPhysicalDeviceTimelineSemaphoreProperties) WithSType(y VkStructureType) *VkPhysicalDeviceTimelineSemaphoreProperties {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceTimelineSemaphoreProperties
func (x VkPhysicalDeviceTimelineSemaphoreProperties) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceTimelineSemaphoreProperties
func (x *VkPhysicalDeviceTimelineSemaphoreProperties) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceTimelineSemaphoreProperties {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// MaxTimelineSemaphoreValueDifference returns the value of maxTimelineSemaphoreValueDifference from VkPhysicalDeviceTimelineSemaphoreProperties
func (x VkPhysicalDeviceTimelineSemaphoreProperties) MaxTimelineSemaphoreValueDifference() uint64 {
	ptr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&x.maxTimelineSemaphoreValueDifference)
	return *ptr
}

//VkPhysicalDeviceTimelineSemaphoreFeatures provides a go interface for VkPhysicalDeviceTimelineSemaphoreFeatures.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreFeatures.html
type VkPhysicalDeviceTimelineSemaphoreFeatures C.struct_VkPhysicalDeviceTimelineSemaphoreFeatures

// NewVkPhysicalDeviceTimelineSemaphoreFeatures allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPhysicalDeviceTimelineSemaphoreFeatures() *VkPhysicalDeviceTimelineSemaphoreFeatures {
	sz := unsafe.Sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPhysicalDeviceTimelineSemaphoreFeatures)(ptr)
}

// Free releases the memory allocated by the NewVkPhysicalDeviceTimelineSemaphoreFeatures method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPhysicalDeviceTimelineSemaphoreFeatures) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPhysicalDeviceTimelineSemaphoreFeatures) AsPtr() *VkPhysicalDeviceTimelineSemaphoreFeatures {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPhysicalDeviceTimelineSemaphoreFeatures) AsCPtr() *VkPhysicalDeviceTimelineSemaphoreFeatures {
	clone := newVkPhysicalDeviceTimelineSemaphoreFeatures()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPhysicalDeviceTimelineSemaphoreFeatures
func (x VkPhysicalDeviceTimelineSemaphoreFeatures) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPhysicalDeviceTimelineSemaphoreFeatures) WithDefaultSType() *VkPhysicalDeviceTimelineSemaphoreFeatures {
	return x.WithSType(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPhysicalDeviceTimelineSemaphoreFeatures
func (x *VkPhysicalDeviceTimelineSemaphoreFeatures) WithSType(y VkStructureType) *VkPhysicalDeviceTimelineSemaphoreFeatures {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPhysicalDeviceTimelineSemaphoreFeatures
func (x VkPhysicalDeviceTimelineSemaphoreFeatures) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPhysicalDeviceTimelineSemaphoreFeatures
func (x *VkPhysicalDeviceTimelineSemaphoreFeatures) WithPNext(y unsafe.Pointer) *VkPhysicalDeviceTimelineSemaphoreFeatures {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// TimelineSemaphore returns the value of timelineSemaphore from VkPhysicalDeviceTimelineSemaphoreFeatures
func (x VkPhysicalDeviceTimelineSemaphoreFeatures) TimelineSemaphore() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.timelineSemaphore)
	return *ptr
}

// WithTimelineSemaphore copies the provided value into C space and stores it
// at timelineSemaphore on VkPhysicalDeviceTimelineSemaphoreFeatures
func (x *VkPhysicalDeviceTimelineSemaphoreFeatures) WithTimelineSemaphore(y VkBool32) *VkPhysicalDeviceTimelineSemaphoreFeatures {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.timelineSemaphore = *ptr
	return x
}

//VkDescriptorSetLayoutBindingFlagsCreateInfo provides a go interface for VkDescriptorSetLayoutBindingFlagsCreateInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutBindingFlagsCreateInfo.html
type VkDescriptorSetLayoutBindingFlagsCreateInfo C.struct_VkDescriptorSetLayoutBindingFlagsCreateInfo

// NewVkDescriptorSetLayoutBindingFlagsCreateInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDescriptorSetLayoutBindingFlagsCreateInfo() *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	sz := unsafe.Sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDescriptorSetLayoutBindingFlagsCreateInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDescriptorSetLayoutBindingFlagsCreateInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) AsPtr() *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) AsCPtr() *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	clone := newVkDescriptorSetLayoutBindingFlagsCreateInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x VkDescriptorSetLayoutBindingFlagsCreateInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) WithDefaultSType() *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) WithSType(y VkStructureType) *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x VkDescriptorSetLayoutBindingFlagsCreateInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) WithPNext(y unsafe.Pointer) *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// BindingCount returns the value of bindingCount from VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x VkDescriptorSetLayoutBindingFlagsCreateInfo) BindingCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.bindingCount)
	return *ptr
}

// WithBindingCount copies the provided value into C space and stores it
// at bindingCount on VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) WithBindingCount(y uint32) *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.bindingCount = *ptr
	return x
}

// PBindingFlags returns the value of pBindingFlags from VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x VkDescriptorSetLayoutBindingFlagsCreateInfo) PBindingFlags() []VkDescriptorBindingFlags {
	ptr := func(x **C.VkDescriptorBindingFlags) *[]VkDescriptorBindingFlags { /* Slice */
		slc := unsafe.Slice((*VkDescriptorBindingFlags)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pBindingFlags)
	return *ptr
}

// WithPBindingFlags copies the provided value into C space and stores it
// at pBindingFlags on VkDescriptorSetLayoutBindingFlagsCreateInfo
func (x *VkDescriptorSetLayoutBindingFlagsCreateInfo) WithPBindingFlags(y []VkDescriptorBindingFlags) *VkDescriptorSetLayoutBindingFlagsCreateInfo {
	ptr := func(x *[]VkDescriptorBindingFlags) **C.VkDescriptorBindingFlags { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDescriptorBindingFlags)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDescriptorBindingFlags)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pBindingFlags = *ptr
	return x
}

//VkDeviceMemoryOpaqueCaptureAddressInfo provides a go interface for VkDeviceMemoryOpaqueCaptureAddressInfo.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceMemoryOpaqueCaptureAddressInfo.html
type VkDeviceMemoryOpaqueCaptureAddressInfo C.struct_VkDeviceMemoryOpaqueCaptureAddressInfo

// NewVkDeviceMemoryOpaqueCaptureAddressInfo allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceMemoryOpaqueCaptureAddressInfo() *VkDeviceMemoryOpaqueCaptureAddressInfo {
	sz := unsafe.Sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceMemoryOpaqueCaptureAddressInfo)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceMemoryOpaqueCaptureAddressInfo method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceMemoryOpaqueCaptureAddressInfo) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceMemoryOpaqueCaptureAddressInfo) AsPtr() *VkDeviceMemoryOpaqueCaptureAddressInfo {
	return x
}

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceMemoryOpaqueCaptureAddressInfo) AsCPtr() *VkDeviceMemoryOpaqueCaptureAddressInfo {
	clone := newVkDeviceMemoryOpaqueCaptureAddressInfo()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceMemoryOpaqueCaptureAddressInfo
func (x VkDeviceMemoryOpaqueCaptureAddressInfo) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceMemoryOpaqueCaptureAddressInfo) WithDefaultSType() *VkDeviceMemoryOpaqueCaptureAddressInfo {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceMemoryOpaqueCaptureAddressInfo
func (x *VkDeviceMemoryOpaqueCaptureAddressInfo) WithSType(y VkStructureType) *VkDeviceMemoryOpaqueCaptureAddressInfo {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceMemoryOpaqueCaptureAddressInfo
func (x VkDeviceMemoryOpaqueCaptureAddressInfo) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceMemoryOpaqueCaptureAddressInfo
func (x *VkDeviceMemoryOpaqueCaptureAddressInfo) WithPNext(y unsafe.Pointer) *VkDeviceMemoryOpaqueCaptureAddressInfo {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Memory returns the value of memory from VkDeviceMemoryOpaqueCaptureAddressInfo
func (x VkDeviceMemoryOpaqueCaptureAddressInfo) Memory() VkDeviceMemory {
	ptr := func(x *C.VkDeviceMemory) *VkDeviceMemory { /* Handle */ return (*VkDeviceMemory)(unsafe.Pointer(x)) }(&x.memory)
	return *ptr
}

// WithMemory copies the provided value into C space and stores it
// at memory on VkDeviceMemoryOpaqueCaptureAddressInfo
func (x *VkDeviceMemoryOpaqueCaptureAddressInfo) WithMemory(y VkDeviceMemory) *VkDeviceMemoryOpaqueCaptureAddressInfo {
	ptr := func(x *VkDeviceMemory) *C.VkDeviceMemory { /* Handle */ return (*C.VkDeviceMemory)(unsafe.Pointer(x)) }(&y)
	x.memory = *ptr
	return x
}

func VkWaitSemaphores(device VkDevice, pWaitInfo *VkSemaphoreWaitInfo, timeout uint64) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkSemaphoreWaitInfo) **C.VkSemaphoreWaitInfo { /* Pointer */
		return (**C.VkSemaphoreWaitInfo)(unsafe.Pointer(x))
	}(&pWaitInfo)
	p2 := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&timeout)
	ret := C.vkWaitSemaphores(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkResetQueryPool(device VkDevice, queryPool VkQueryPool, firstQuery uint32, queryCount uint32) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkQueryPool) *C.VkQueryPool { /* Handle */ return (*C.VkQueryPool)(unsafe.Pointer(x)) }(&queryPool)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&firstQuery)
	p3 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&queryCount)
	C.vkResetQueryPool(*p0, *p1, *p2, *p3)
}

func VkGetSemaphoreCounterValue(device VkDevice, semaphore VkSemaphore, pValue *uint64) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSemaphore) *C.VkSemaphore { /* Handle */ return (*C.VkSemaphore)(unsafe.Pointer(x)) }(&semaphore)
	p2 := func(x **uint64) **C.ulonglong { /* Pointer */ return (**C.ulonglong)(unsafe.Pointer(x)) }(&pValue)
	ret := C.vkGetSemaphoreCounterValue(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCmdBeginRenderPass2(commandBuffer VkCommandBuffer, pRenderPassBegin *VkRenderPassBeginInfo, pSubpassBeginInfo *VkSubpassBeginInfo) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x **VkRenderPassBeginInfo) **C.VkRenderPassBeginInfo { /* Pointer */
		return (**C.VkRenderPassBeginInfo)(unsafe.Pointer(x))
	}(&pRenderPassBegin)
	p2 := func(x **VkSubpassBeginInfo) **C.VkSubpassBeginInfo { /* Pointer */
		return (**C.VkSubpassBeginInfo)(unsafe.Pointer(x))
	}(&pSubpassBeginInfo)
	C.vkCmdBeginRenderPass2(*p0, *p1, *p2)
}

func VkCmdEndRenderPass2(commandBuffer VkCommandBuffer, pSubpassEndInfo *VkSubpassEndInfo) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x **VkSubpassEndInfo) **C.VkSubpassEndInfo { /* Pointer */
		return (**C.VkSubpassEndInfo)(unsafe.Pointer(x))
	}(&pSubpassEndInfo)
	C.vkCmdEndRenderPass2(*p0, *p1)
}

func VkGetBufferDeviceAddress(device VkDevice, pInfo *VkBufferDeviceAddressInfo) VkDeviceAddress {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkBufferDeviceAddressInfo) **C.VkBufferDeviceAddressInfo { /* Pointer */
		return (**C.VkBufferDeviceAddressInfo)(unsafe.Pointer(x))
	}(&pInfo)
	ret := C.vkGetBufferDeviceAddress(*p0, *p1)
	retPtr := /* Identifier */ (*VkDeviceAddress)(&ret)
	return *retPtr
}

func VkGetBufferOpaqueCaptureAddress(device VkDevice, pInfo *VkBufferDeviceAddressInfo) uint64 {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkBufferDeviceAddressInfo) **C.VkBufferDeviceAddressInfo { /* Pointer */
		return (**C.VkBufferDeviceAddressInfo)(unsafe.Pointer(x))
	}(&pInfo)
	ret := C.vkGetBufferOpaqueCaptureAddress(*p0, *p1)
	retPtr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&ret)
	return *retPtr
}

func VkGetDeviceMemoryOpaqueCaptureAddress(device VkDevice, pInfo *VkDeviceMemoryOpaqueCaptureAddressInfo) uint64 {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDeviceMemoryOpaqueCaptureAddressInfo) **C.VkDeviceMemoryOpaqueCaptureAddressInfo { /* Pointer */
		return (**C.VkDeviceMemoryOpaqueCaptureAddressInfo)(unsafe.Pointer(x))
	}(&pInfo)
	ret := C.vkGetDeviceMemoryOpaqueCaptureAddress(*p0, *p1)
	retPtr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&ret)
	return *retPtr
}

func VkCmdNextSubpass2(commandBuffer VkCommandBuffer, pSubpassBeginInfo *VkSubpassBeginInfo, pSubpassEndInfo *VkSubpassEndInfo) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x **VkSubpassBeginInfo) **C.VkSubpassBeginInfo { /* Pointer */
		return (**C.VkSubpassBeginInfo)(unsafe.Pointer(x))
	}(&pSubpassBeginInfo)
	p2 := func(x **VkSubpassEndInfo) **C.VkSubpassEndInfo { /* Pointer */
		return (**C.VkSubpassEndInfo)(unsafe.Pointer(x))
	}(&pSubpassEndInfo)
	C.vkCmdNextSubpass2(*p0, *p1, *p2)
}

func VkCreateRenderPass2(device VkDevice, pCreateInfo *VkRenderPassCreateInfo2, pAllocator *VkAllocationCallbacks, pRenderPass *VkRenderPass) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkRenderPassCreateInfo2) **C.VkRenderPassCreateInfo2 { /* Pointer */
		return (**C.VkRenderPassCreateInfo2)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkRenderPass) **C.VkRenderPass { /* Pointer */ return (**C.VkRenderPass)(unsafe.Pointer(x)) }(&pRenderPass)
	ret := C.vkCreateRenderPass2(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCmdDrawIndexedIndirectCount(commandBuffer VkCommandBuffer, buffer VkBuffer, offset VkDeviceSize, countBuffer VkBuffer, countBufferOffset VkDeviceSize, maxDrawCount uint32, stride uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&offset)
	p3 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&countBuffer)
	p4 := /* Identifier */ (*C.VkDeviceSize)(&countBufferOffset)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&maxDrawCount)
	p6 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&stride)
	C.vkCmdDrawIndexedIndirectCount(*p0, *p1, *p2, *p3, *p4, *p5, *p6)
}

func VkCmdDrawIndirectCount(commandBuffer VkCommandBuffer, buffer VkBuffer, offset VkDeviceSize, countBuffer VkBuffer, countBufferOffset VkDeviceSize, maxDrawCount uint32, stride uint32) {
	p0 := func(x *VkCommandBuffer) *C.VkCommandBuffer { /* Handle */
		return (*C.VkCommandBuffer)(unsafe.Pointer(x))
	}(&commandBuffer)
	p1 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&buffer)
	p2 := /* Identifier */ (*C.VkDeviceSize)(&offset)
	p3 := func(x *VkBuffer) *C.VkBuffer { /* Handle */ return (*C.VkBuffer)(unsafe.Pointer(x)) }(&countBuffer)
	p4 := /* Identifier */ (*C.VkDeviceSize)(&countBufferOffset)
	p5 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&maxDrawCount)
	p6 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&stride)
	C.vkCmdDrawIndirectCount(*p0, *p1, *p2, *p3, *p4, *p5, *p6)
}

func VkSignalSemaphore(device VkDevice, pSignalInfo *VkSemaphoreSignalInfo) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkSemaphoreSignalInfo) **C.VkSemaphoreSignalInfo { /* Pointer */
		return (**C.VkSemaphoreSignalInfo)(unsafe.Pointer(x))
	}(&pSignalInfo)
	ret := C.vkSignalSemaphore(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

// VkSurfaceKHR is a Handle to a vulkan resource.
type VkSurfaceKHR C.VkSurfaceKHR

type VkPresentModeKHR uint32

const (
	VK_PRESENT_MODE_IMMEDIATE_KHR    VkPresentModeKHR = 0
	VK_PRESENT_MODE_MAILBOX_KHR      VkPresentModeKHR = 1
	VK_PRESENT_MODE_FIFO_KHR         VkPresentModeKHR = 2
	VK_PRESENT_MODE_FIFO_RELAXED_KHR VkPresentModeKHR = 3
)

var (
	reverseVkPresentModeKHR map[VkPresentModeKHR]string = map[VkPresentModeKHR]string{
		VK_PRESENT_MODE_IMMEDIATE_KHR:    "VK_PRESENT_MODE_IMMEDIATE_KHR",
		VK_PRESENT_MODE_MAILBOX_KHR:      "VK_PRESENT_MODE_MAILBOX_KHR",
		VK_PRESENT_MODE_FIFO_KHR:         "VK_PRESENT_MODE_FIFO_KHR",
		VK_PRESENT_MODE_FIFO_RELAXED_KHR: "VK_PRESENT_MODE_FIFO_RELAXED_KHR",
	}
)

func (x VkPresentModeKHR) String() string {
	if s, ok := reverseVkPresentModeKHR[x]; ok {
		return s
	}
	return fmt.Sprintf("VkPresentModeKHR=%d", x)
}

type VkCompositeAlphaFlagBitsKHR uint32

const (
	VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR          VkCompositeAlphaFlagBitsKHR = (1 << 0)
	VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR  VkCompositeAlphaFlagBitsKHR = (1 << 1)
	VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR VkCompositeAlphaFlagBitsKHR = (1 << 2)
	VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR         VkCompositeAlphaFlagBitsKHR = (1 << 3)
)

var (
	reverseVkCompositeAlphaFlagBitsKHR map[VkCompositeAlphaFlagBitsKHR]string = map[VkCompositeAlphaFlagBitsKHR]string{
		VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR:          "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR",
		VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR:  "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR",
		VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR",
		VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR:         "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR",
	}
)

func (x VkCompositeAlphaFlagBitsKHR) String() string {
	if s, ok := reverseVkCompositeAlphaFlagBitsKHR[x]; ok {
		return s
	}
	return fmt.Sprintf("VkCompositeAlphaFlagBitsKHR=%d", x)
}

type VkColorSpaceKHR uint32

const (
	VK_COLOR_SPACE_SRGB_NONLINEAR_KHR VkColorSpaceKHR = 0
	VK_COLORSPACE_SRGB_NONLINEAR_KHR  VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
)

var (
	reverseVkColorSpaceKHR map[VkColorSpaceKHR]string = map[VkColorSpaceKHR]string{
		VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR",
	}
)

func (x VkColorSpaceKHR) String() string {
	if s, ok := reverseVkColorSpaceKHR[x]; ok {
		return s
	}
	return fmt.Sprintf("VkColorSpaceKHR=%d", x)
}

type VkSurfaceTransformFlagBitsKHR uint32

const (
	VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR                     VkSurfaceTransformFlagBitsKHR = (1 << 0)
	VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR                    VkSurfaceTransformFlagBitsKHR = (1 << 1)
	VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR                   VkSurfaceTransformFlagBitsKHR = (1 << 2)
	VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR                   VkSurfaceTransformFlagBitsKHR = (1 << 3)
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR            VkSurfaceTransformFlagBitsKHR = (1 << 4)
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR  VkSurfaceTransformFlagBitsKHR = (1 << 5)
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR VkSurfaceTransformFlagBitsKHR = (1 << 6)
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR VkSurfaceTransformFlagBitsKHR = (1 << 7)
	VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR                      VkSurfaceTransformFlagBitsKHR = (1 << 8)
)

var (
	reverseVkSurfaceTransformFlagBitsKHR map[VkSurfaceTransformFlagBitsKHR]string = map[VkSurfaceTransformFlagBitsKHR]string{
		VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR:                     "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR",
		VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR:                    "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR",
		VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR:                   "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR",
		VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR:                   "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR",
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR:            "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR",
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR:  "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR",
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR",
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR",
		VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR:                      "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR",
	}
)

func (x VkSurfaceTransformFlagBitsKHR) String() string {
	if s, ok := reverseVkSurfaceTransformFlagBitsKHR[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSurfaceTransformFlagBitsKHR=%d", x)
}

type VkCompositeAlphaFlagsKHR VkFlags

type VkSurfaceTransformFlagsKHR VkFlags

//VkSurfaceCapabilitiesKHR provides a go interface for VkSurfaceCapabilitiesKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceCapabilitiesKHR.html
type VkSurfaceCapabilitiesKHR C.struct_VkSurfaceCapabilitiesKHR

// NewVkSurfaceCapabilitiesKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSurfaceCapabilitiesKHR() *VkSurfaceCapabilitiesKHR {
	sz := unsafe.Sizeof(VkSurfaceCapabilitiesKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSurfaceCapabilitiesKHR)(ptr)
}

// Free releases the memory allocated by the NewVkSurfaceCapabilitiesKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSurfaceCapabilitiesKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSurfaceCapabilitiesKHR) AsPtr() *VkSurfaceCapabilitiesKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSurfaceCapabilitiesKHR) AsCPtr() *VkSurfaceCapabilitiesKHR {
	clone := newVkSurfaceCapabilitiesKHR()
	*clone = *x
	return clone
}

// MinImageCount returns the value of minImageCount from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) MinImageCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.minImageCount)
	return *ptr
}

// MaxImageCount returns the value of maxImageCount from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) MaxImageCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxImageCount)
	return *ptr
}

// CurrentExtent returns the value of currentExtent from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) CurrentExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.currentExtent)
	return *ptr
}

// MinImageExtent returns the value of minImageExtent from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) MinImageExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.minImageExtent)
	return *ptr
}

// MaxImageExtent returns the value of maxImageExtent from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) MaxImageExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.maxImageExtent)
	return *ptr
}

// MaxImageArrayLayers returns the value of maxImageArrayLayers from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) MaxImageArrayLayers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.maxImageArrayLayers)
	return *ptr
}

// SupportedTransforms returns the value of supportedTransforms from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) SupportedTransforms() VkSurfaceTransformFlagsKHR {
	ptr := /* Identifier */ (*VkSurfaceTransformFlagsKHR)(&x.supportedTransforms)
	return *ptr
}

// CurrentTransform returns the value of currentTransform from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) CurrentTransform() VkSurfaceTransformFlagBitsKHR {
	ptr := /* Identifier */ (*VkSurfaceTransformFlagBitsKHR)(&x.currentTransform)
	return *ptr
}

// SupportedCompositeAlpha returns the value of supportedCompositeAlpha from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) SupportedCompositeAlpha() VkCompositeAlphaFlagsKHR {
	ptr := /* Identifier */ (*VkCompositeAlphaFlagsKHR)(&x.supportedCompositeAlpha)
	return *ptr
}

// SupportedUsageFlags returns the value of supportedUsageFlags from VkSurfaceCapabilitiesKHR
func (x VkSurfaceCapabilitiesKHR) SupportedUsageFlags() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.supportedUsageFlags)
	return *ptr
}

//VkSurfaceFormatKHR provides a go interface for VkSurfaceFormatKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceFormatKHR.html
type VkSurfaceFormatKHR C.struct_VkSurfaceFormatKHR

// NewVkSurfaceFormatKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSurfaceFormatKHR() *VkSurfaceFormatKHR {
	sz := unsafe.Sizeof(VkSurfaceFormatKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSurfaceFormatKHR)(ptr)
}

// Free releases the memory allocated by the NewVkSurfaceFormatKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSurfaceFormatKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSurfaceFormatKHR) AsPtr() *VkSurfaceFormatKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSurfaceFormatKHR) AsCPtr() *VkSurfaceFormatKHR {
	clone := newVkSurfaceFormatKHR()
	*clone = *x
	return clone
}

// Format returns the value of format from VkSurfaceFormatKHR
func (x VkSurfaceFormatKHR) Format() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.format)
	return *ptr
}

// ColorSpace returns the value of colorSpace from VkSurfaceFormatKHR
func (x VkSurfaceFormatKHR) ColorSpace() VkColorSpaceKHR {
	ptr := /* Identifier */ (*VkColorSpaceKHR)(&x.colorSpace)
	return *ptr
}

func VkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice VkPhysicalDevice, surface VkSurfaceKHR, pPresentModeCount *uint32, pPresentModes []VkPresentModeKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&surface)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPresentModeCount)
	p3 := func(x *[]VkPresentModeKHR) **C.VkPresentModeKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkPresentModeKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkPresentModeKHR)(unsafe.Pointer((&ptr)))
	}(&pPresentModes)
	ret := C.vkGetPhysicalDeviceSurfacePresentModesKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice VkPhysicalDevice, surface VkSurfaceKHR, pSurfaceFormatCount *uint32, pSurfaceFormats []VkSurfaceFormatKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&surface)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pSurfaceFormatCount)
	p3 := func(x *[]VkSurfaceFormatKHR) **C.VkSurfaceFormatKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSurfaceFormatKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSurfaceFormatKHR)(unsafe.Pointer((&ptr)))
	}(&pSurfaceFormats)
	ret := C.vkGetPhysicalDeviceSurfaceFormatsKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice VkPhysicalDevice, surface VkSurfaceKHR, pSurfaceCapabilities *VkSurfaceCapabilitiesKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&surface)
	p2 := func(x **VkSurfaceCapabilitiesKHR) **C.VkSurfaceCapabilitiesKHR { /* Pointer */
		return (**C.VkSurfaceCapabilitiesKHR)(unsafe.Pointer(x))
	}(&pSurfaceCapabilities)
	ret := C.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice VkPhysicalDevice, queueFamilyIndex uint32, surface VkSurfaceKHR, pSupported *VkBool32) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&queueFamilyIndex)
	p2 := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&surface)
	p3 := func(x **VkBool32) **C.VkBool32 { /* Pointer */ return (**C.VkBool32)(unsafe.Pointer(x)) }(&pSupported)
	ret := C.vkGetPhysicalDeviceSurfaceSupportKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroySurfaceKHR(instance VkInstance, surface VkSurfaceKHR, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkInstance) *C.VkInstance { /* Handle */ return (*C.VkInstance)(unsafe.Pointer(x)) }(&instance)
	p1 := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&surface)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroySurfaceKHR(*p0, *p1, *p2)
}

// VkSwapchainKHR is a Handle to a vulkan resource.
type VkSwapchainKHR C.VkSwapchainKHR

type VkSwapchainCreateFlagBitsKHR uint32

const (
	VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR VkSwapchainCreateFlagBitsKHR = (1 << 0)
	VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR                   VkSwapchainCreateFlagBitsKHR = (1 << 1)
)

var (
	reverseVkSwapchainCreateFlagBitsKHR map[VkSwapchainCreateFlagBitsKHR]string = map[VkSwapchainCreateFlagBitsKHR]string{
		VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
		VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR:                   "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR",
	}
)

func (x VkSwapchainCreateFlagBitsKHR) String() string {
	if s, ok := reverseVkSwapchainCreateFlagBitsKHR[x]; ok {
		return s
	}
	return fmt.Sprintf("VkSwapchainCreateFlagBitsKHR=%d", x)
}

type VkDeviceGroupPresentModeFlagBitsKHR uint32

const (
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR              VkDeviceGroupPresentModeFlagBitsKHR = (1 << 0)
	VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR             VkDeviceGroupPresentModeFlagBitsKHR = (1 << 1)
	VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR                VkDeviceGroupPresentModeFlagBitsKHR = (1 << 2)
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR VkDeviceGroupPresentModeFlagBitsKHR = (1 << 3)
)

var (
	reverseVkDeviceGroupPresentModeFlagBitsKHR map[VkDeviceGroupPresentModeFlagBitsKHR]string = map[VkDeviceGroupPresentModeFlagBitsKHR]string{
		VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR:              "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR",
		VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR:             "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR",
		VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR:                "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR",
		VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR",
	}
)

func (x VkDeviceGroupPresentModeFlagBitsKHR) String() string {
	if s, ok := reverseVkDeviceGroupPresentModeFlagBitsKHR[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDeviceGroupPresentModeFlagBitsKHR=%d", x)
}

type VkDeviceGroupPresentModeFlagsKHR VkFlags

type VkSwapchainCreateFlagsKHR VkFlags

//VkBindImageMemorySwapchainInfoKHR provides a go interface for VkBindImageMemorySwapchainInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemorySwapchainInfoKHR.html
type VkBindImageMemorySwapchainInfoKHR C.struct_VkBindImageMemorySwapchainInfoKHR

// NewVkBindImageMemorySwapchainInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkBindImageMemorySwapchainInfoKHR() *VkBindImageMemorySwapchainInfoKHR {
	sz := unsafe.Sizeof(VkBindImageMemorySwapchainInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkBindImageMemorySwapchainInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkBindImageMemorySwapchainInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkBindImageMemorySwapchainInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkBindImageMemorySwapchainInfoKHR) AsPtr() *VkBindImageMemorySwapchainInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkBindImageMemorySwapchainInfoKHR) AsCPtr() *VkBindImageMemorySwapchainInfoKHR {
	clone := newVkBindImageMemorySwapchainInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkBindImageMemorySwapchainInfoKHR
func (x VkBindImageMemorySwapchainInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkBindImageMemorySwapchainInfoKHR) WithDefaultSType() *VkBindImageMemorySwapchainInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkBindImageMemorySwapchainInfoKHR
func (x *VkBindImageMemorySwapchainInfoKHR) WithSType(y VkStructureType) *VkBindImageMemorySwapchainInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkBindImageMemorySwapchainInfoKHR
func (x VkBindImageMemorySwapchainInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkBindImageMemorySwapchainInfoKHR
func (x *VkBindImageMemorySwapchainInfoKHR) WithPNext(y unsafe.Pointer) *VkBindImageMemorySwapchainInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Swapchain returns the value of swapchain from VkBindImageMemorySwapchainInfoKHR
func (x VkBindImageMemorySwapchainInfoKHR) Swapchain() VkSwapchainKHR {
	ptr := func(x *C.VkSwapchainKHR) *VkSwapchainKHR { /* Handle */ return (*VkSwapchainKHR)(unsafe.Pointer(x)) }(&x.swapchain)
	return *ptr
}

// WithSwapchain copies the provided value into C space and stores it
// at swapchain on VkBindImageMemorySwapchainInfoKHR
func (x *VkBindImageMemorySwapchainInfoKHR) WithSwapchain(y VkSwapchainKHR) *VkBindImageMemorySwapchainInfoKHR {
	ptr := func(x *VkSwapchainKHR) *C.VkSwapchainKHR { /* Handle */ return (*C.VkSwapchainKHR)(unsafe.Pointer(x)) }(&y)
	x.swapchain = *ptr
	return x
}

// ImageIndex returns the value of imageIndex from VkBindImageMemorySwapchainInfoKHR
func (x VkBindImageMemorySwapchainInfoKHR) ImageIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.imageIndex)
	return *ptr
}

// WithImageIndex copies the provided value into C space and stores it
// at imageIndex on VkBindImageMemorySwapchainInfoKHR
func (x *VkBindImageMemorySwapchainInfoKHR) WithImageIndex(y uint32) *VkBindImageMemorySwapchainInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.imageIndex = *ptr
	return x
}

//VkSwapchainCreateInfoKHR provides a go interface for VkSwapchainCreateInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSwapchainCreateInfoKHR.html
type VkSwapchainCreateInfoKHR C.struct_VkSwapchainCreateInfoKHR

// NewVkSwapchainCreateInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkSwapchainCreateInfoKHR() *VkSwapchainCreateInfoKHR {
	sz := unsafe.Sizeof(VkSwapchainCreateInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkSwapchainCreateInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkSwapchainCreateInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkSwapchainCreateInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkSwapchainCreateInfoKHR) AsPtr() *VkSwapchainCreateInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkSwapchainCreateInfoKHR) AsCPtr() *VkSwapchainCreateInfoKHR {
	clone := newVkSwapchainCreateInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkSwapchainCreateInfoKHR) WithDefaultSType() *VkSwapchainCreateInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithSType(y VkStructureType) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithPNext(y unsafe.Pointer) *VkSwapchainCreateInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) Flags() VkSwapchainCreateFlagsKHR {
	ptr := /* Identifier */ (*VkSwapchainCreateFlagsKHR)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithFlags(y VkSwapchainCreateFlagsKHR) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkSwapchainCreateFlagsKHR)(&y)
	x.flags = *ptr
	return x
}

// Surface returns the value of surface from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) Surface() VkSurfaceKHR {
	ptr := func(x *C.VkSurfaceKHR) *VkSurfaceKHR { /* Handle */ return (*VkSurfaceKHR)(unsafe.Pointer(x)) }(&x.surface)
	return *ptr
}

// WithSurface copies the provided value into C space and stores it
// at surface on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithSurface(y VkSurfaceKHR) *VkSwapchainCreateInfoKHR {
	ptr := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&y)
	x.surface = *ptr
	return x
}

// MinImageCount returns the value of minImageCount from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) MinImageCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.minImageCount)
	return *ptr
}

// WithMinImageCount copies the provided value into C space and stores it
// at minImageCount on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithMinImageCount(y uint32) *VkSwapchainCreateInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.minImageCount = *ptr
	return x
}

// ImageFormat returns the value of imageFormat from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) ImageFormat() VkFormat {
	ptr := /* Identifier */ (*VkFormat)(&x.imageFormat)
	return *ptr
}

// WithImageFormat copies the provided value into C space and stores it
// at imageFormat on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithImageFormat(y VkFormat) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkFormat)(&y)
	x.imageFormat = *ptr
	return x
}

// ImageColorSpace returns the value of imageColorSpace from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) ImageColorSpace() VkColorSpaceKHR {
	ptr := /* Identifier */ (*VkColorSpaceKHR)(&x.imageColorSpace)
	return *ptr
}

// WithImageColorSpace copies the provided value into C space and stores it
// at imageColorSpace on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithImageColorSpace(y VkColorSpaceKHR) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkColorSpaceKHR)(&y)
	x.imageColorSpace = *ptr
	return x
}

// ImageExtent returns the value of imageExtent from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) ImageExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.imageExtent)
	return *ptr
}

// WithImageExtent copies the provided value into C space and stores it
// at imageExtent on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithImageExtent(y VkExtent2D) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkExtent2D)(&y)
	x.imageExtent = *ptr
	return x
}

// ImageArrayLayers returns the value of imageArrayLayers from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) ImageArrayLayers() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.imageArrayLayers)
	return *ptr
}

// WithImageArrayLayers copies the provided value into C space and stores it
// at imageArrayLayers on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithImageArrayLayers(y uint32) *VkSwapchainCreateInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.imageArrayLayers = *ptr
	return x
}

// ImageUsage returns the value of imageUsage from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) ImageUsage() VkImageUsageFlags {
	ptr := /* Identifier */ (*VkImageUsageFlags)(&x.imageUsage)
	return *ptr
}

// WithImageUsage copies the provided value into C space and stores it
// at imageUsage on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithImageUsage(y VkImageUsageFlags) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkImageUsageFlags)(&y)
	x.imageUsage = *ptr
	return x
}

// ImageSharingMode returns the value of imageSharingMode from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) ImageSharingMode() VkSharingMode {
	ptr := /* Identifier */ (*VkSharingMode)(&x.imageSharingMode)
	return *ptr
}

// WithImageSharingMode copies the provided value into C space and stores it
// at imageSharingMode on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithImageSharingMode(y VkSharingMode) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkSharingMode)(&y)
	x.imageSharingMode = *ptr
	return x
}

// QueueFamilyIndexCount returns the value of queueFamilyIndexCount from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) QueueFamilyIndexCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.queueFamilyIndexCount)
	return *ptr
}

// WithQueueFamilyIndexCount copies the provided value into C space and stores it
// at queueFamilyIndexCount on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithQueueFamilyIndexCount(y uint32) *VkSwapchainCreateInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.queueFamilyIndexCount = *ptr
	return x
}

// PQueueFamilyIndices returns the value of pQueueFamilyIndices from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) PQueueFamilyIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pQueueFamilyIndices)
	return *ptr
}

// WithPQueueFamilyIndices copies the provided value into C space and stores it
// at pQueueFamilyIndices on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithPQueueFamilyIndices(y []uint32) *VkSwapchainCreateInfoKHR {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pQueueFamilyIndices = *ptr
	return x
}

// PreTransform returns the value of preTransform from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) PreTransform() VkSurfaceTransformFlagBitsKHR {
	ptr := /* Identifier */ (*VkSurfaceTransformFlagBitsKHR)(&x.preTransform)
	return *ptr
}

// WithPreTransform copies the provided value into C space and stores it
// at preTransform on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithPreTransform(y VkSurfaceTransformFlagBitsKHR) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkSurfaceTransformFlagBitsKHR)(&y)
	x.preTransform = *ptr
	return x
}

// CompositeAlpha returns the value of compositeAlpha from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) CompositeAlpha() VkCompositeAlphaFlagBitsKHR {
	ptr := /* Identifier */ (*VkCompositeAlphaFlagBitsKHR)(&x.compositeAlpha)
	return *ptr
}

// WithCompositeAlpha copies the provided value into C space and stores it
// at compositeAlpha on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithCompositeAlpha(y VkCompositeAlphaFlagBitsKHR) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkCompositeAlphaFlagBitsKHR)(&y)
	x.compositeAlpha = *ptr
	return x
}

// PresentMode returns the value of presentMode from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) PresentMode() VkPresentModeKHR {
	ptr := /* Identifier */ (*VkPresentModeKHR)(&x.presentMode)
	return *ptr
}

// WithPresentMode copies the provided value into C space and stores it
// at presentMode on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithPresentMode(y VkPresentModeKHR) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkPresentModeKHR)(&y)
	x.presentMode = *ptr
	return x
}

// Clipped returns the value of clipped from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) Clipped() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.clipped)
	return *ptr
}

// WithClipped copies the provided value into C space and stores it
// at clipped on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithClipped(y VkBool32) *VkSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.clipped = *ptr
	return x
}

// OldSwapchain returns the value of oldSwapchain from VkSwapchainCreateInfoKHR
func (x VkSwapchainCreateInfoKHR) OldSwapchain() VkSwapchainKHR {
	ptr := func(x *C.VkSwapchainKHR) *VkSwapchainKHR { /* Handle */ return (*VkSwapchainKHR)(unsafe.Pointer(x)) }(&x.oldSwapchain)
	return *ptr
}

// WithOldSwapchain copies the provided value into C space and stores it
// at oldSwapchain on VkSwapchainCreateInfoKHR
func (x *VkSwapchainCreateInfoKHR) WithOldSwapchain(y VkSwapchainKHR) *VkSwapchainCreateInfoKHR {
	ptr := func(x *VkSwapchainKHR) *C.VkSwapchainKHR { /* Handle */ return (*C.VkSwapchainKHR)(unsafe.Pointer(x)) }(&y)
	x.oldSwapchain = *ptr
	return x
}

//VkPresentInfoKHR provides a go interface for VkPresentInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentInfoKHR.html
type VkPresentInfoKHR C.struct_VkPresentInfoKHR

// NewVkPresentInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkPresentInfoKHR() *VkPresentInfoKHR {
	sz := unsafe.Sizeof(VkPresentInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkPresentInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkPresentInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkPresentInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkPresentInfoKHR) AsPtr() *VkPresentInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkPresentInfoKHR) AsCPtr() *VkPresentInfoKHR {
	clone := newVkPresentInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkPresentInfoKHR
func (x VkPresentInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkPresentInfoKHR) WithDefaultSType() *VkPresentInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_PRESENT_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithSType(y VkStructureType) *VkPresentInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkPresentInfoKHR
func (x VkPresentInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithPNext(y unsafe.Pointer) *VkPresentInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// WaitSemaphoreCount returns the value of waitSemaphoreCount from VkPresentInfoKHR
func (x VkPresentInfoKHR) WaitSemaphoreCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.waitSemaphoreCount)
	return *ptr
}

// WithWaitSemaphoreCount copies the provided value into C space and stores it
// at waitSemaphoreCount on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithWaitSemaphoreCount(y uint32) *VkPresentInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.waitSemaphoreCount = *ptr
	return x
}

// PWaitSemaphores returns the value of pWaitSemaphores from VkPresentInfoKHR
func (x VkPresentInfoKHR) PWaitSemaphores() []VkSemaphore {
	ptr := func(x **C.VkSemaphore) *[]VkSemaphore { /* Slice */
		slc := unsafe.Slice((*VkSemaphore)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pWaitSemaphores)
	return *ptr
}

// WithPWaitSemaphores copies the provided value into C space and stores it
// at pWaitSemaphores on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithPWaitSemaphores(y []VkSemaphore) *VkPresentInfoKHR {
	ptr := func(x *[]VkSemaphore) **C.VkSemaphore { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSemaphore)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSemaphore)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pWaitSemaphores = *ptr
	return x
}

// SwapchainCount returns the value of swapchainCount from VkPresentInfoKHR
func (x VkPresentInfoKHR) SwapchainCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.swapchainCount)
	return *ptr
}

// WithSwapchainCount copies the provided value into C space and stores it
// at swapchainCount on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithSwapchainCount(y uint32) *VkPresentInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.swapchainCount = *ptr
	return x
}

// PSwapchains returns the value of pSwapchains from VkPresentInfoKHR
func (x VkPresentInfoKHR) PSwapchains() []VkSwapchainKHR {
	ptr := func(x **C.VkSwapchainKHR) *[]VkSwapchainKHR { /* Slice */
		slc := unsafe.Slice((*VkSwapchainKHR)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pSwapchains)
	return *ptr
}

// WithPSwapchains copies the provided value into C space and stores it
// at pSwapchains on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithPSwapchains(y []VkSwapchainKHR) *VkPresentInfoKHR {
	ptr := func(x *[]VkSwapchainKHR) **C.VkSwapchainKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSwapchainKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSwapchainKHR)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pSwapchains = *ptr
	return x
}

// PImageIndices returns the value of pImageIndices from VkPresentInfoKHR
func (x VkPresentInfoKHR) PImageIndices() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pImageIndices)
	return *ptr
}

// WithPImageIndices copies the provided value into C space and stores it
// at pImageIndices on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithPImageIndices(y []uint32) *VkPresentInfoKHR {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pImageIndices = *ptr
	return x
}

// PResults returns the value of pResults from VkPresentInfoKHR
func (x VkPresentInfoKHR) PResults() []VkResult {
	ptr := func(x **C.VkResult) *[]VkResult { /* Slice */
		slc := unsafe.Slice((*VkResult)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pResults)
	return *ptr
}

// WithPResults copies the provided value into C space and stores it
// at pResults on VkPresentInfoKHR
func (x *VkPresentInfoKHR) WithPResults(y []VkResult) *VkPresentInfoKHR {
	ptr := func(x *[]VkResult) **C.VkResult { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkResult)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkResult)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pResults = *ptr
	return x
}

//VkDeviceGroupPresentCapabilitiesKHR provides a go interface for VkDeviceGroupPresentCapabilitiesKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupPresentCapabilitiesKHR.html
type VkDeviceGroupPresentCapabilitiesKHR C.struct_VkDeviceGroupPresentCapabilitiesKHR

// NewVkDeviceGroupPresentCapabilitiesKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupPresentCapabilitiesKHR() *VkDeviceGroupPresentCapabilitiesKHR {
	sz := unsafe.Sizeof(VkDeviceGroupPresentCapabilitiesKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupPresentCapabilitiesKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupPresentCapabilitiesKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupPresentCapabilitiesKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupPresentCapabilitiesKHR) AsPtr() *VkDeviceGroupPresentCapabilitiesKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupPresentCapabilitiesKHR) AsCPtr() *VkDeviceGroupPresentCapabilitiesKHR {
	clone := newVkDeviceGroupPresentCapabilitiesKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupPresentCapabilitiesKHR
func (x VkDeviceGroupPresentCapabilitiesKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupPresentCapabilitiesKHR) WithDefaultSType() *VkDeviceGroupPresentCapabilitiesKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupPresentCapabilitiesKHR
func (x *VkDeviceGroupPresentCapabilitiesKHR) WithSType(y VkStructureType) *VkDeviceGroupPresentCapabilitiesKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupPresentCapabilitiesKHR
func (x VkDeviceGroupPresentCapabilitiesKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupPresentCapabilitiesKHR
func (x *VkDeviceGroupPresentCapabilitiesKHR) WithPNext(y unsafe.Pointer) *VkDeviceGroupPresentCapabilitiesKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// PresentMask returns the value of presentMask from VkDeviceGroupPresentCapabilitiesKHR
func (x VkDeviceGroupPresentCapabilitiesKHR) PresentMask() []uint32 {
	ptr := func(x *[VK_MAX_DEVICE_GROUP_SIZE]C.uint) *[]uint32 { /* Array */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), VK_MAX_DEVICE_GROUP_SIZE)
		return &slc
	}(&x.presentMask)
	return *ptr
}

// Modes returns the value of modes from VkDeviceGroupPresentCapabilitiesKHR
func (x VkDeviceGroupPresentCapabilitiesKHR) Modes() VkDeviceGroupPresentModeFlagsKHR {
	ptr := /* Identifier */ (*VkDeviceGroupPresentModeFlagsKHR)(&x.modes)
	return *ptr
}

//VkDeviceGroupPresentInfoKHR provides a go interface for VkDeviceGroupPresentInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupPresentInfoKHR.html
type VkDeviceGroupPresentInfoKHR C.struct_VkDeviceGroupPresentInfoKHR

// NewVkDeviceGroupPresentInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupPresentInfoKHR() *VkDeviceGroupPresentInfoKHR {
	sz := unsafe.Sizeof(VkDeviceGroupPresentInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupPresentInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupPresentInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupPresentInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupPresentInfoKHR) AsPtr() *VkDeviceGroupPresentInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupPresentInfoKHR) AsCPtr() *VkDeviceGroupPresentInfoKHR {
	clone := newVkDeviceGroupPresentInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupPresentInfoKHR
func (x VkDeviceGroupPresentInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupPresentInfoKHR) WithDefaultSType() *VkDeviceGroupPresentInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupPresentInfoKHR
func (x *VkDeviceGroupPresentInfoKHR) WithSType(y VkStructureType) *VkDeviceGroupPresentInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupPresentInfoKHR
func (x VkDeviceGroupPresentInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupPresentInfoKHR
func (x *VkDeviceGroupPresentInfoKHR) WithPNext(y unsafe.Pointer) *VkDeviceGroupPresentInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SwapchainCount returns the value of swapchainCount from VkDeviceGroupPresentInfoKHR
func (x VkDeviceGroupPresentInfoKHR) SwapchainCount() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.swapchainCount)
	return *ptr
}

// WithSwapchainCount copies the provided value into C space and stores it
// at swapchainCount on VkDeviceGroupPresentInfoKHR
func (x *VkDeviceGroupPresentInfoKHR) WithSwapchainCount(y uint32) *VkDeviceGroupPresentInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.swapchainCount = *ptr
	return x
}

// PDeviceMasks returns the value of pDeviceMasks from VkDeviceGroupPresentInfoKHR
func (x VkDeviceGroupPresentInfoKHR) PDeviceMasks() []uint32 {
	ptr := func(x **C.uint) *[]uint32 { /* Slice */
		slc := unsafe.Slice((*uint32)(unsafe.Pointer(x)), (1 << 31))
		return &slc
	}(&x.pDeviceMasks)
	return *ptr
}

// WithPDeviceMasks copies the provided value into C space and stores it
// at pDeviceMasks on VkDeviceGroupPresentInfoKHR
func (x *VkDeviceGroupPresentInfoKHR) WithPDeviceMasks(y []uint32) *VkDeviceGroupPresentInfoKHR {
	ptr := func(x *[]uint32) **C.uint { /* Slice */
		if len(*x) > 0 {
			slc := (*C.uint)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.uint)(unsafe.Pointer((&ptr)))
	}(&y)
	x.pDeviceMasks = *ptr
	return x
}

// Mode returns the value of mode from VkDeviceGroupPresentInfoKHR
func (x VkDeviceGroupPresentInfoKHR) Mode() VkDeviceGroupPresentModeFlagBitsKHR {
	ptr := /* Identifier */ (*VkDeviceGroupPresentModeFlagBitsKHR)(&x.mode)
	return *ptr
}

// WithMode copies the provided value into C space and stores it
// at mode on VkDeviceGroupPresentInfoKHR
func (x *VkDeviceGroupPresentInfoKHR) WithMode(y VkDeviceGroupPresentModeFlagBitsKHR) *VkDeviceGroupPresentInfoKHR {
	ptr := /* Identifier */ (*C.VkDeviceGroupPresentModeFlagBitsKHR)(&y)
	x.mode = *ptr
	return x
}

//VkDeviceGroupSwapchainCreateInfoKHR provides a go interface for VkDeviceGroupSwapchainCreateInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupSwapchainCreateInfoKHR.html
type VkDeviceGroupSwapchainCreateInfoKHR C.struct_VkDeviceGroupSwapchainCreateInfoKHR

// NewVkDeviceGroupSwapchainCreateInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDeviceGroupSwapchainCreateInfoKHR() *VkDeviceGroupSwapchainCreateInfoKHR {
	sz := unsafe.Sizeof(VkDeviceGroupSwapchainCreateInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDeviceGroupSwapchainCreateInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDeviceGroupSwapchainCreateInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDeviceGroupSwapchainCreateInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDeviceGroupSwapchainCreateInfoKHR) AsPtr() *VkDeviceGroupSwapchainCreateInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDeviceGroupSwapchainCreateInfoKHR) AsCPtr() *VkDeviceGroupSwapchainCreateInfoKHR {
	clone := newVkDeviceGroupSwapchainCreateInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDeviceGroupSwapchainCreateInfoKHR
func (x VkDeviceGroupSwapchainCreateInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDeviceGroupSwapchainCreateInfoKHR) WithDefaultSType() *VkDeviceGroupSwapchainCreateInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDeviceGroupSwapchainCreateInfoKHR
func (x *VkDeviceGroupSwapchainCreateInfoKHR) WithSType(y VkStructureType) *VkDeviceGroupSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDeviceGroupSwapchainCreateInfoKHR
func (x VkDeviceGroupSwapchainCreateInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDeviceGroupSwapchainCreateInfoKHR
func (x *VkDeviceGroupSwapchainCreateInfoKHR) WithPNext(y unsafe.Pointer) *VkDeviceGroupSwapchainCreateInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Modes returns the value of modes from VkDeviceGroupSwapchainCreateInfoKHR
func (x VkDeviceGroupSwapchainCreateInfoKHR) Modes() VkDeviceGroupPresentModeFlagsKHR {
	ptr := /* Identifier */ (*VkDeviceGroupPresentModeFlagsKHR)(&x.modes)
	return *ptr
}

// WithModes copies the provided value into C space and stores it
// at modes on VkDeviceGroupSwapchainCreateInfoKHR
func (x *VkDeviceGroupSwapchainCreateInfoKHR) WithModes(y VkDeviceGroupPresentModeFlagsKHR) *VkDeviceGroupSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkDeviceGroupPresentModeFlagsKHR)(&y)
	x.modes = *ptr
	return x
}

//VkAcquireNextImageInfoKHR provides a go interface for VkAcquireNextImageInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAcquireNextImageInfoKHR.html
type VkAcquireNextImageInfoKHR C.struct_VkAcquireNextImageInfoKHR

// NewVkAcquireNextImageInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkAcquireNextImageInfoKHR() *VkAcquireNextImageInfoKHR {
	sz := unsafe.Sizeof(VkAcquireNextImageInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkAcquireNextImageInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkAcquireNextImageInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkAcquireNextImageInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkAcquireNextImageInfoKHR) AsPtr() *VkAcquireNextImageInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkAcquireNextImageInfoKHR) AsCPtr() *VkAcquireNextImageInfoKHR {
	clone := newVkAcquireNextImageInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkAcquireNextImageInfoKHR
func (x VkAcquireNextImageInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkAcquireNextImageInfoKHR) WithDefaultSType() *VkAcquireNextImageInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkAcquireNextImageInfoKHR
func (x *VkAcquireNextImageInfoKHR) WithSType(y VkStructureType) *VkAcquireNextImageInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkAcquireNextImageInfoKHR
func (x VkAcquireNextImageInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkAcquireNextImageInfoKHR
func (x *VkAcquireNextImageInfoKHR) WithPNext(y unsafe.Pointer) *VkAcquireNextImageInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Swapchain returns the value of swapchain from VkAcquireNextImageInfoKHR
func (x VkAcquireNextImageInfoKHR) Swapchain() VkSwapchainKHR {
	ptr := func(x *C.VkSwapchainKHR) *VkSwapchainKHR { /* Handle */ return (*VkSwapchainKHR)(unsafe.Pointer(x)) }(&x.swapchain)
	return *ptr
}

// WithSwapchain copies the provided value into C space and stores it
// at swapchain on VkAcquireNextImageInfoKHR
func (x *VkAcquireNextImageInfoKHR) WithSwapchain(y VkSwapchainKHR) *VkAcquireNextImageInfoKHR {
	ptr := func(x *VkSwapchainKHR) *C.VkSwapchainKHR { /* Handle */ return (*C.VkSwapchainKHR)(unsafe.Pointer(x)) }(&y)
	x.swapchain = *ptr
	return x
}

// Timeout returns the value of timeout from VkAcquireNextImageInfoKHR
func (x VkAcquireNextImageInfoKHR) Timeout() uint64 {
	ptr := func(x *C.ulonglong) *uint64 { /* Scalar */ return (*uint64)(unsafe.Pointer(x)) }(&x.timeout)
	return *ptr
}

// WithTimeout copies the provided value into C space and stores it
// at timeout on VkAcquireNextImageInfoKHR
func (x *VkAcquireNextImageInfoKHR) WithTimeout(y uint64) *VkAcquireNextImageInfoKHR {
	ptr := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&y)
	x.timeout = *ptr
	return x
}

// Semaphore returns the value of semaphore from VkAcquireNextImageInfoKHR
func (x VkAcquireNextImageInfoKHR) Semaphore() VkSemaphore {
	ptr := func(x *C.VkSemaphore) *VkSemaphore { /* Handle */ return (*VkSemaphore)(unsafe.Pointer(x)) }(&x.semaphore)
	return *ptr
}

// WithSemaphore copies the provided value into C space and stores it
// at semaphore on VkAcquireNextImageInfoKHR
func (x *VkAcquireNextImageInfoKHR) WithSemaphore(y VkSemaphore) *VkAcquireNextImageInfoKHR {
	ptr := func(x *VkSemaphore) *C.VkSemaphore { /* Handle */ return (*C.VkSemaphore)(unsafe.Pointer(x)) }(&y)
	x.semaphore = *ptr
	return x
}

// Fence returns the value of fence from VkAcquireNextImageInfoKHR
func (x VkAcquireNextImageInfoKHR) Fence() VkFence {
	ptr := func(x *C.VkFence) *VkFence { /* Handle */ return (*VkFence)(unsafe.Pointer(x)) }(&x.fence)
	return *ptr
}

// WithFence copies the provided value into C space and stores it
// at fence on VkAcquireNextImageInfoKHR
func (x *VkAcquireNextImageInfoKHR) WithFence(y VkFence) *VkAcquireNextImageInfoKHR {
	ptr := func(x *VkFence) *C.VkFence { /* Handle */ return (*C.VkFence)(unsafe.Pointer(x)) }(&y)
	x.fence = *ptr
	return x
}

// DeviceMask returns the value of deviceMask from VkAcquireNextImageInfoKHR
func (x VkAcquireNextImageInfoKHR) DeviceMask() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.deviceMask)
	return *ptr
}

// WithDeviceMask copies the provided value into C space and stores it
// at deviceMask on VkAcquireNextImageInfoKHR
func (x *VkAcquireNextImageInfoKHR) WithDeviceMask(y uint32) *VkAcquireNextImageInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.deviceMask = *ptr
	return x
}

//VkImageSwapchainCreateInfoKHR provides a go interface for VkImageSwapchainCreateInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSwapchainCreateInfoKHR.html
type VkImageSwapchainCreateInfoKHR C.struct_VkImageSwapchainCreateInfoKHR

// NewVkImageSwapchainCreateInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkImageSwapchainCreateInfoKHR() *VkImageSwapchainCreateInfoKHR {
	sz := unsafe.Sizeof(VkImageSwapchainCreateInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkImageSwapchainCreateInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkImageSwapchainCreateInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkImageSwapchainCreateInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkImageSwapchainCreateInfoKHR) AsPtr() *VkImageSwapchainCreateInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkImageSwapchainCreateInfoKHR) AsCPtr() *VkImageSwapchainCreateInfoKHR {
	clone := newVkImageSwapchainCreateInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkImageSwapchainCreateInfoKHR
func (x VkImageSwapchainCreateInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkImageSwapchainCreateInfoKHR) WithDefaultSType() *VkImageSwapchainCreateInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkImageSwapchainCreateInfoKHR
func (x *VkImageSwapchainCreateInfoKHR) WithSType(y VkStructureType) *VkImageSwapchainCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkImageSwapchainCreateInfoKHR
func (x VkImageSwapchainCreateInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkImageSwapchainCreateInfoKHR
func (x *VkImageSwapchainCreateInfoKHR) WithPNext(y unsafe.Pointer) *VkImageSwapchainCreateInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Swapchain returns the value of swapchain from VkImageSwapchainCreateInfoKHR
func (x VkImageSwapchainCreateInfoKHR) Swapchain() VkSwapchainKHR {
	ptr := func(x *C.VkSwapchainKHR) *VkSwapchainKHR { /* Handle */ return (*VkSwapchainKHR)(unsafe.Pointer(x)) }(&x.swapchain)
	return *ptr
}

// WithSwapchain copies the provided value into C space and stores it
// at swapchain on VkImageSwapchainCreateInfoKHR
func (x *VkImageSwapchainCreateInfoKHR) WithSwapchain(y VkSwapchainKHR) *VkImageSwapchainCreateInfoKHR {
	ptr := func(x *VkSwapchainKHR) *C.VkSwapchainKHR { /* Handle */ return (*C.VkSwapchainKHR)(unsafe.Pointer(x)) }(&y)
	x.swapchain = *ptr
	return x
}

func VkGetPhysicalDevicePresentRectanglesKHR(physicalDevice VkPhysicalDevice, surface VkSurfaceKHR, pRectCount *uint32, pRects []VkRect2D) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&surface)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pRectCount)
	p3 := func(x *[]VkRect2D) **C.VkRect2D { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkRect2D)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkRect2D)(unsafe.Pointer((&ptr)))
	}(&pRects)
	ret := C.vkGetPhysicalDevicePresentRectanglesKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkAcquireNextImage2KHR(device VkDevice, pAcquireInfo *VkAcquireNextImageInfoKHR, pImageIndex *uint32) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkAcquireNextImageInfoKHR) **C.VkAcquireNextImageInfoKHR { /* Pointer */
		return (**C.VkAcquireNextImageInfoKHR)(unsafe.Pointer(x))
	}(&pAcquireInfo)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pImageIndex)
	ret := C.vkAcquireNextImage2KHR(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDeviceGroupSurfacePresentModesKHR(device VkDevice, surface VkSurfaceKHR, pModes *VkDeviceGroupPresentModeFlagsKHR) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSurfaceKHR) *C.VkSurfaceKHR { /* Handle */ return (*C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&surface)
	p2 := func(x **VkDeviceGroupPresentModeFlagsKHR) **C.VkDeviceGroupPresentModeFlagsKHR { /* Pointer */
		return (**C.VkDeviceGroupPresentModeFlagsKHR)(unsafe.Pointer(x))
	}(&pModes)
	ret := C.vkGetDeviceGroupSurfacePresentModesKHR(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDeviceGroupPresentCapabilitiesKHR(device VkDevice, pDeviceGroupPresentCapabilities *VkDeviceGroupPresentCapabilitiesKHR) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkDeviceGroupPresentCapabilitiesKHR) **C.VkDeviceGroupPresentCapabilitiesKHR { /* Pointer */
		return (**C.VkDeviceGroupPresentCapabilitiesKHR)(unsafe.Pointer(x))
	}(&pDeviceGroupPresentCapabilities)
	ret := C.vkGetDeviceGroupPresentCapabilitiesKHR(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkQueuePresentKHR(queue VkQueue, pPresentInfo *VkPresentInfoKHR) VkResult {
	p0 := func(x *VkQueue) *C.VkQueue { /* Handle */ return (*C.VkQueue)(unsafe.Pointer(x)) }(&queue)
	p1 := func(x **VkPresentInfoKHR) **C.VkPresentInfoKHR { /* Pointer */
		return (**C.VkPresentInfoKHR)(unsafe.Pointer(x))
	}(&pPresentInfo)
	ret := C.vkQueuePresentKHR(*p0, *p1)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkAcquireNextImageKHR(device VkDevice, swapchain VkSwapchainKHR, timeout uint64, semaphore VkSemaphore, fence VkFence, pImageIndex *uint32) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSwapchainKHR) *C.VkSwapchainKHR { /* Handle */ return (*C.VkSwapchainKHR)(unsafe.Pointer(x)) }(&swapchain)
	p2 := func(x *uint64) *C.ulonglong { /* Scalar */ return (*C.ulonglong)(unsafe.Pointer(x)) }(&timeout)
	p3 := func(x *VkSemaphore) *C.VkSemaphore { /* Handle */ return (*C.VkSemaphore)(unsafe.Pointer(x)) }(&semaphore)
	p4 := func(x *VkFence) *C.VkFence { /* Handle */ return (*C.VkFence)(unsafe.Pointer(x)) }(&fence)
	p5 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pImageIndex)
	ret := C.vkAcquireNextImageKHR(*p0, *p1, *p2, *p3, *p4, *p5)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetSwapchainImagesKHR(device VkDevice, swapchain VkSwapchainKHR, pSwapchainImageCount *uint32, pSwapchainImages []VkImage) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSwapchainKHR) *C.VkSwapchainKHR { /* Handle */ return (*C.VkSwapchainKHR)(unsafe.Pointer(x)) }(&swapchain)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pSwapchainImageCount)
	p3 := func(x *[]VkImage) **C.VkImage { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkImage)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkImage)(unsafe.Pointer((&ptr)))
	}(&pSwapchainImages)
	ret := C.vkGetSwapchainImagesKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkDestroySwapchainKHR(device VkDevice, swapchain VkSwapchainKHR, pAllocator *VkAllocationCallbacks) {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *VkSwapchainKHR) *C.VkSwapchainKHR { /* Handle */ return (*C.VkSwapchainKHR)(unsafe.Pointer(x)) }(&swapchain)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	C.vkDestroySwapchainKHR(*p0, *p1, *p2)
}

func VkCreateSwapchainKHR(device VkDevice, pCreateInfo *VkSwapchainCreateInfoKHR, pAllocator *VkAllocationCallbacks, pSwapchain *VkSwapchainKHR) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x **VkSwapchainCreateInfoKHR) **C.VkSwapchainCreateInfoKHR { /* Pointer */
		return (**C.VkSwapchainCreateInfoKHR)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkSwapchainKHR) **C.VkSwapchainKHR { /* Pointer */
		return (**C.VkSwapchainKHR)(unsafe.Pointer(x))
	}(&pSwapchain)
	ret := C.vkCreateSwapchainKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

// VkDisplayKHR is a Handle to a vulkan resource.
type VkDisplayKHR C.VkDisplayKHR

// VkDisplayModeKHR is a Handle to a vulkan resource.
type VkDisplayModeKHR C.VkDisplayModeKHR

type VkDisplayPlaneAlphaFlagBitsKHR uint32

const (
	VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR                  VkDisplayPlaneAlphaFlagBitsKHR = (1 << 0)
	VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR                  VkDisplayPlaneAlphaFlagBitsKHR = (1 << 1)
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR               VkDisplayPlaneAlphaFlagBitsKHR = (1 << 2)
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR VkDisplayPlaneAlphaFlagBitsKHR = (1 << 3)
)

var (
	reverseVkDisplayPlaneAlphaFlagBitsKHR map[VkDisplayPlaneAlphaFlagBitsKHR]string = map[VkDisplayPlaneAlphaFlagBitsKHR]string{
		VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR:                  "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR",
		VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR:                  "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR",
		VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR:               "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR",
		VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR",
	}
)

func (x VkDisplayPlaneAlphaFlagBitsKHR) String() string {
	if s, ok := reverseVkDisplayPlaneAlphaFlagBitsKHR[x]; ok {
		return s
	}
	return fmt.Sprintf("VkDisplayPlaneAlphaFlagBitsKHR=%d", x)
}

type VkDisplayModeCreateFlagsKHR VkFlags

type VkDisplayPlaneAlphaFlagsKHR VkFlags

type VkDisplaySurfaceCreateFlagsKHR VkFlags

//VkDisplayPlanePropertiesKHR provides a go interface for VkDisplayPlanePropertiesKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlanePropertiesKHR.html
type VkDisplayPlanePropertiesKHR C.struct_VkDisplayPlanePropertiesKHR

// NewVkDisplayPlanePropertiesKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplayPlanePropertiesKHR() *VkDisplayPlanePropertiesKHR {
	sz := unsafe.Sizeof(VkDisplayPlanePropertiesKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplayPlanePropertiesKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplayPlanePropertiesKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplayPlanePropertiesKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplayPlanePropertiesKHR) AsPtr() *VkDisplayPlanePropertiesKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplayPlanePropertiesKHR) AsCPtr() *VkDisplayPlanePropertiesKHR {
	clone := newVkDisplayPlanePropertiesKHR()
	*clone = *x
	return clone
}

// CurrentDisplay returns the value of currentDisplay from VkDisplayPlanePropertiesKHR
func (x VkDisplayPlanePropertiesKHR) CurrentDisplay() VkDisplayKHR {
	ptr := func(x *C.VkDisplayKHR) *VkDisplayKHR { /* Handle */ return (*VkDisplayKHR)(unsafe.Pointer(x)) }(&x.currentDisplay)
	return *ptr
}

// CurrentStackIndex returns the value of currentStackIndex from VkDisplayPlanePropertiesKHR
func (x VkDisplayPlanePropertiesKHR) CurrentStackIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.currentStackIndex)
	return *ptr
}

//VkDisplayModePropertiesKHR provides a go interface for VkDisplayModePropertiesKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModePropertiesKHR.html
type VkDisplayModePropertiesKHR C.struct_VkDisplayModePropertiesKHR

// NewVkDisplayModePropertiesKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplayModePropertiesKHR() *VkDisplayModePropertiesKHR {
	sz := unsafe.Sizeof(VkDisplayModePropertiesKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplayModePropertiesKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplayModePropertiesKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplayModePropertiesKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplayModePropertiesKHR) AsPtr() *VkDisplayModePropertiesKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplayModePropertiesKHR) AsCPtr() *VkDisplayModePropertiesKHR {
	clone := newVkDisplayModePropertiesKHR()
	*clone = *x
	return clone
}

// DisplayMode returns the value of displayMode from VkDisplayModePropertiesKHR
func (x VkDisplayModePropertiesKHR) DisplayMode() VkDisplayModeKHR {
	ptr := func(x *C.VkDisplayModeKHR) *VkDisplayModeKHR { /* Handle */
		return (*VkDisplayModeKHR)(unsafe.Pointer(x))
	}(&x.displayMode)
	return *ptr
}

// Parameters returns the value of parameters from VkDisplayModePropertiesKHR
func (x VkDisplayModePropertiesKHR) Parameters() VkDisplayModeParametersKHR {
	ptr := /* Identifier */ (*VkDisplayModeParametersKHR)(&x.parameters)
	return *ptr
}

//VkDisplayPropertiesKHR provides a go interface for VkDisplayPropertiesKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPropertiesKHR.html
type VkDisplayPropertiesKHR C.struct_VkDisplayPropertiesKHR

// NewVkDisplayPropertiesKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplayPropertiesKHR() *VkDisplayPropertiesKHR {
	sz := unsafe.Sizeof(VkDisplayPropertiesKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplayPropertiesKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplayPropertiesKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplayPropertiesKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplayPropertiesKHR) AsPtr() *VkDisplayPropertiesKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplayPropertiesKHR) AsCPtr() *VkDisplayPropertiesKHR {
	clone := newVkDisplayPropertiesKHR()
	*clone = *x
	return clone
}

// Display returns the value of display from VkDisplayPropertiesKHR
func (x VkDisplayPropertiesKHR) Display() VkDisplayKHR {
	ptr := func(x *C.VkDisplayKHR) *VkDisplayKHR { /* Handle */ return (*VkDisplayKHR)(unsafe.Pointer(x)) }(&x.display)
	return *ptr
}

// DisplayName returns the value of displayName from VkDisplayPropertiesKHR
func (x VkDisplayPropertiesKHR) DisplayName() *byte {
	ptr := func(x **C.char) **byte { /* Pointer */ return (**byte)(unsafe.Pointer(x)) }(&x.displayName)
	return *ptr
}

// PhysicalDimensions returns the value of physicalDimensions from VkDisplayPropertiesKHR
func (x VkDisplayPropertiesKHR) PhysicalDimensions() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.physicalDimensions)
	return *ptr
}

// PhysicalResolution returns the value of physicalResolution from VkDisplayPropertiesKHR
func (x VkDisplayPropertiesKHR) PhysicalResolution() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.physicalResolution)
	return *ptr
}

// SupportedTransforms returns the value of supportedTransforms from VkDisplayPropertiesKHR
func (x VkDisplayPropertiesKHR) SupportedTransforms() VkSurfaceTransformFlagsKHR {
	ptr := /* Identifier */ (*VkSurfaceTransformFlagsKHR)(&x.supportedTransforms)
	return *ptr
}

// PlaneReorderPossible returns the value of planeReorderPossible from VkDisplayPropertiesKHR
func (x VkDisplayPropertiesKHR) PlaneReorderPossible() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.planeReorderPossible)
	return *ptr
}

// PersistentContent returns the value of persistentContent from VkDisplayPropertiesKHR
func (x VkDisplayPropertiesKHR) PersistentContent() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.persistentContent)
	return *ptr
}

//VkDisplayModeCreateInfoKHR provides a go interface for VkDisplayModeCreateInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModeCreateInfoKHR.html
type VkDisplayModeCreateInfoKHR C.struct_VkDisplayModeCreateInfoKHR

// NewVkDisplayModeCreateInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplayModeCreateInfoKHR() *VkDisplayModeCreateInfoKHR {
	sz := unsafe.Sizeof(VkDisplayModeCreateInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplayModeCreateInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplayModeCreateInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplayModeCreateInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplayModeCreateInfoKHR) AsPtr() *VkDisplayModeCreateInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplayModeCreateInfoKHR) AsCPtr() *VkDisplayModeCreateInfoKHR {
	clone := newVkDisplayModeCreateInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDisplayModeCreateInfoKHR
func (x VkDisplayModeCreateInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDisplayModeCreateInfoKHR) WithDefaultSType() *VkDisplayModeCreateInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDisplayModeCreateInfoKHR
func (x *VkDisplayModeCreateInfoKHR) WithSType(y VkStructureType) *VkDisplayModeCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDisplayModeCreateInfoKHR
func (x VkDisplayModeCreateInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDisplayModeCreateInfoKHR
func (x *VkDisplayModeCreateInfoKHR) WithPNext(y unsafe.Pointer) *VkDisplayModeCreateInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDisplayModeCreateInfoKHR
func (x VkDisplayModeCreateInfoKHR) Flags() VkDisplayModeCreateFlagsKHR {
	ptr := /* Identifier */ (*VkDisplayModeCreateFlagsKHR)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDisplayModeCreateInfoKHR
func (x *VkDisplayModeCreateInfoKHR) WithFlags(y VkDisplayModeCreateFlagsKHR) *VkDisplayModeCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkDisplayModeCreateFlagsKHR)(&y)
	x.flags = *ptr
	return x
}

// Parameters returns the value of parameters from VkDisplayModeCreateInfoKHR
func (x VkDisplayModeCreateInfoKHR) Parameters() VkDisplayModeParametersKHR {
	ptr := /* Identifier */ (*VkDisplayModeParametersKHR)(&x.parameters)
	return *ptr
}

// WithParameters copies the provided value into C space and stores it
// at parameters on VkDisplayModeCreateInfoKHR
func (x *VkDisplayModeCreateInfoKHR) WithParameters(y VkDisplayModeParametersKHR) *VkDisplayModeCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkDisplayModeParametersKHR)(&y)
	x.parameters = *ptr
	return x
}

//VkDisplayPlaneCapabilitiesKHR provides a go interface for VkDisplayPlaneCapabilitiesKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlaneCapabilitiesKHR.html
type VkDisplayPlaneCapabilitiesKHR C.struct_VkDisplayPlaneCapabilitiesKHR

// NewVkDisplayPlaneCapabilitiesKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplayPlaneCapabilitiesKHR() *VkDisplayPlaneCapabilitiesKHR {
	sz := unsafe.Sizeof(VkDisplayPlaneCapabilitiesKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplayPlaneCapabilitiesKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplayPlaneCapabilitiesKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplayPlaneCapabilitiesKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplayPlaneCapabilitiesKHR) AsPtr() *VkDisplayPlaneCapabilitiesKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplayPlaneCapabilitiesKHR) AsCPtr() *VkDisplayPlaneCapabilitiesKHR {
	clone := newVkDisplayPlaneCapabilitiesKHR()
	*clone = *x
	return clone
}

// SupportedAlpha returns the value of supportedAlpha from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) SupportedAlpha() VkDisplayPlaneAlphaFlagsKHR {
	ptr := /* Identifier */ (*VkDisplayPlaneAlphaFlagsKHR)(&x.supportedAlpha)
	return *ptr
}

// MinSrcPosition returns the value of minSrcPosition from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MinSrcPosition() VkOffset2D {
	ptr := /* Identifier */ (*VkOffset2D)(&x.minSrcPosition)
	return *ptr
}

// MaxSrcPosition returns the value of maxSrcPosition from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MaxSrcPosition() VkOffset2D {
	ptr := /* Identifier */ (*VkOffset2D)(&x.maxSrcPosition)
	return *ptr
}

// MinSrcExtent returns the value of minSrcExtent from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MinSrcExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.minSrcExtent)
	return *ptr
}

// MaxSrcExtent returns the value of maxSrcExtent from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MaxSrcExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.maxSrcExtent)
	return *ptr
}

// MinDstPosition returns the value of minDstPosition from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MinDstPosition() VkOffset2D {
	ptr := /* Identifier */ (*VkOffset2D)(&x.minDstPosition)
	return *ptr
}

// MaxDstPosition returns the value of maxDstPosition from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MaxDstPosition() VkOffset2D {
	ptr := /* Identifier */ (*VkOffset2D)(&x.maxDstPosition)
	return *ptr
}

// MinDstExtent returns the value of minDstExtent from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MinDstExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.minDstExtent)
	return *ptr
}

// MaxDstExtent returns the value of maxDstExtent from VkDisplayPlaneCapabilitiesKHR
func (x VkDisplayPlaneCapabilitiesKHR) MaxDstExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.maxDstExtent)
	return *ptr
}

//VkDisplayModeParametersKHR provides a go interface for VkDisplayModeParametersKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModeParametersKHR.html
type VkDisplayModeParametersKHR C.struct_VkDisplayModeParametersKHR

// NewVkDisplayModeParametersKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplayModeParametersKHR() *VkDisplayModeParametersKHR {
	sz := unsafe.Sizeof(VkDisplayModeParametersKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplayModeParametersKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplayModeParametersKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplayModeParametersKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplayModeParametersKHR) AsPtr() *VkDisplayModeParametersKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplayModeParametersKHR) AsCPtr() *VkDisplayModeParametersKHR {
	clone := newVkDisplayModeParametersKHR()
	*clone = *x
	return clone
}

// VisibleRegion returns the value of visibleRegion from VkDisplayModeParametersKHR
func (x VkDisplayModeParametersKHR) VisibleRegion() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.visibleRegion)
	return *ptr
}

// WithVisibleRegion copies the provided value into C space and stores it
// at visibleRegion on VkDisplayModeParametersKHR
func (x *VkDisplayModeParametersKHR) WithVisibleRegion(y VkExtent2D) *VkDisplayModeParametersKHR {
	ptr := /* Identifier */ (*C.VkExtent2D)(&y)
	x.visibleRegion = *ptr
	return x
}

// RefreshRate returns the value of refreshRate from VkDisplayModeParametersKHR
func (x VkDisplayModeParametersKHR) RefreshRate() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.refreshRate)
	return *ptr
}

// WithRefreshRate copies the provided value into C space and stores it
// at refreshRate on VkDisplayModeParametersKHR
func (x *VkDisplayModeParametersKHR) WithRefreshRate(y uint32) *VkDisplayModeParametersKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.refreshRate = *ptr
	return x
}

//VkDisplaySurfaceCreateInfoKHR provides a go interface for VkDisplaySurfaceCreateInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplaySurfaceCreateInfoKHR.html
type VkDisplaySurfaceCreateInfoKHR C.struct_VkDisplaySurfaceCreateInfoKHR

// NewVkDisplaySurfaceCreateInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplaySurfaceCreateInfoKHR() *VkDisplaySurfaceCreateInfoKHR {
	sz := unsafe.Sizeof(VkDisplaySurfaceCreateInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplaySurfaceCreateInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplaySurfaceCreateInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplaySurfaceCreateInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplaySurfaceCreateInfoKHR) AsPtr() *VkDisplaySurfaceCreateInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplaySurfaceCreateInfoKHR) AsCPtr() *VkDisplaySurfaceCreateInfoKHR {
	clone := newVkDisplaySurfaceCreateInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDisplaySurfaceCreateInfoKHR) WithDefaultSType() *VkDisplaySurfaceCreateInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithSType(y VkStructureType) *VkDisplaySurfaceCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithPNext(y unsafe.Pointer) *VkDisplaySurfaceCreateInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// Flags returns the value of flags from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) Flags() VkDisplaySurfaceCreateFlagsKHR {
	ptr := /* Identifier */ (*VkDisplaySurfaceCreateFlagsKHR)(&x.flags)
	return *ptr
}

// WithFlags copies the provided value into C space and stores it
// at flags on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithFlags(y VkDisplaySurfaceCreateFlagsKHR) *VkDisplaySurfaceCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkDisplaySurfaceCreateFlagsKHR)(&y)
	x.flags = *ptr
	return x
}

// DisplayMode returns the value of displayMode from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) DisplayMode() VkDisplayModeKHR {
	ptr := func(x *C.VkDisplayModeKHR) *VkDisplayModeKHR { /* Handle */
		return (*VkDisplayModeKHR)(unsafe.Pointer(x))
	}(&x.displayMode)
	return *ptr
}

// WithDisplayMode copies the provided value into C space and stores it
// at displayMode on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithDisplayMode(y VkDisplayModeKHR) *VkDisplaySurfaceCreateInfoKHR {
	ptr := func(x *VkDisplayModeKHR) *C.VkDisplayModeKHR { /* Handle */
		return (*C.VkDisplayModeKHR)(unsafe.Pointer(x))
	}(&y)
	x.displayMode = *ptr
	return x
}

// PlaneIndex returns the value of planeIndex from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) PlaneIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.planeIndex)
	return *ptr
}

// WithPlaneIndex copies the provided value into C space and stores it
// at planeIndex on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithPlaneIndex(y uint32) *VkDisplaySurfaceCreateInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.planeIndex = *ptr
	return x
}

// PlaneStackIndex returns the value of planeStackIndex from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) PlaneStackIndex() uint32 {
	ptr := func(x *C.uint) *uint32 { /* Scalar */ return (*uint32)(unsafe.Pointer(x)) }(&x.planeStackIndex)
	return *ptr
}

// WithPlaneStackIndex copies the provided value into C space and stores it
// at planeStackIndex on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithPlaneStackIndex(y uint32) *VkDisplaySurfaceCreateInfoKHR {
	ptr := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&y)
	x.planeStackIndex = *ptr
	return x
}

// Transform returns the value of transform from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) Transform() VkSurfaceTransformFlagBitsKHR {
	ptr := /* Identifier */ (*VkSurfaceTransformFlagBitsKHR)(&x.transform)
	return *ptr
}

// WithTransform copies the provided value into C space and stores it
// at transform on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithTransform(y VkSurfaceTransformFlagBitsKHR) *VkDisplaySurfaceCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkSurfaceTransformFlagBitsKHR)(&y)
	x.transform = *ptr
	return x
}

// GlobalAlpha returns the value of globalAlpha from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) GlobalAlpha() float32 {
	ptr := func(x *C.float) *float32 { /* Scalar */ return (*float32)(unsafe.Pointer(x)) }(&x.globalAlpha)
	return *ptr
}

// WithGlobalAlpha copies the provided value into C space and stores it
// at globalAlpha on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithGlobalAlpha(y float32) *VkDisplaySurfaceCreateInfoKHR {
	ptr := func(x *float32) *C.float { /* Scalar */ return (*C.float)(unsafe.Pointer(x)) }(&y)
	x.globalAlpha = *ptr
	return x
}

// AlphaMode returns the value of alphaMode from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) AlphaMode() VkDisplayPlaneAlphaFlagBitsKHR {
	ptr := /* Identifier */ (*VkDisplayPlaneAlphaFlagBitsKHR)(&x.alphaMode)
	return *ptr
}

// WithAlphaMode copies the provided value into C space and stores it
// at alphaMode on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithAlphaMode(y VkDisplayPlaneAlphaFlagBitsKHR) *VkDisplaySurfaceCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkDisplayPlaneAlphaFlagBitsKHR)(&y)
	x.alphaMode = *ptr
	return x
}

// ImageExtent returns the value of imageExtent from VkDisplaySurfaceCreateInfoKHR
func (x VkDisplaySurfaceCreateInfoKHR) ImageExtent() VkExtent2D {
	ptr := /* Identifier */ (*VkExtent2D)(&x.imageExtent)
	return *ptr
}

// WithImageExtent copies the provided value into C space and stores it
// at imageExtent on VkDisplaySurfaceCreateInfoKHR
func (x *VkDisplaySurfaceCreateInfoKHR) WithImageExtent(y VkExtent2D) *VkDisplaySurfaceCreateInfoKHR {
	ptr := /* Identifier */ (*C.VkExtent2D)(&y)
	x.imageExtent = *ptr
	return x
}

func VkCreateDisplayPlaneSurfaceKHR(instance VkInstance, pCreateInfo *VkDisplaySurfaceCreateInfoKHR, pAllocator *VkAllocationCallbacks, pSurface *VkSurfaceKHR) VkResult {
	p0 := func(x *VkInstance) *C.VkInstance { /* Handle */ return (*C.VkInstance)(unsafe.Pointer(x)) }(&instance)
	p1 := func(x **VkDisplaySurfaceCreateInfoKHR) **C.VkDisplaySurfaceCreateInfoKHR { /* Pointer */
		return (**C.VkDisplaySurfaceCreateInfoKHR)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p2 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p3 := func(x **VkSurfaceKHR) **C.VkSurfaceKHR { /* Pointer */ return (**C.VkSurfaceKHR)(unsafe.Pointer(x)) }(&pSurface)
	ret := C.vkCreateDisplayPlaneSurfaceKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDisplayPlaneCapabilitiesKHR(physicalDevice VkPhysicalDevice, mode VkDisplayModeKHR, planeIndex uint32, pCapabilities *VkDisplayPlaneCapabilitiesKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *VkDisplayModeKHR) *C.VkDisplayModeKHR { /* Handle */
		return (*C.VkDisplayModeKHR)(unsafe.Pointer(x))
	}(&mode)
	p2 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&planeIndex)
	p3 := func(x **VkDisplayPlaneCapabilitiesKHR) **C.VkDisplayPlaneCapabilitiesKHR { /* Pointer */
		return (**C.VkDisplayPlaneCapabilitiesKHR)(unsafe.Pointer(x))
	}(&pCapabilities)
	ret := C.vkGetDisplayPlaneCapabilitiesKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkCreateDisplayModeKHR(physicalDevice VkPhysicalDevice, display VkDisplayKHR, pCreateInfo *VkDisplayModeCreateInfoKHR, pAllocator *VkAllocationCallbacks, pMode *VkDisplayModeKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *VkDisplayKHR) *C.VkDisplayKHR { /* Handle */ return (*C.VkDisplayKHR)(unsafe.Pointer(x)) }(&display)
	p2 := func(x **VkDisplayModeCreateInfoKHR) **C.VkDisplayModeCreateInfoKHR { /* Pointer */
		return (**C.VkDisplayModeCreateInfoKHR)(unsafe.Pointer(x))
	}(&pCreateInfo)
	p3 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p4 := func(x **VkDisplayModeKHR) **C.VkDisplayModeKHR { /* Pointer */
		return (**C.VkDisplayModeKHR)(unsafe.Pointer(x))
	}(&pMode)
	ret := C.vkCreateDisplayModeKHR(*p0, *p1, *p2, *p3, *p4)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDisplayModePropertiesKHR(physicalDevice VkPhysicalDevice, display VkDisplayKHR, pPropertyCount *uint32, pProperties []VkDisplayModePropertiesKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *VkDisplayKHR) *C.VkDisplayKHR { /* Handle */ return (*C.VkDisplayKHR)(unsafe.Pointer(x)) }(&display)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p3 := func(x *[]VkDisplayModePropertiesKHR) **C.VkDisplayModePropertiesKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDisplayModePropertiesKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDisplayModePropertiesKHR)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	ret := C.vkGetDisplayModePropertiesKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice VkPhysicalDevice, planeIndex uint32, pDisplayCount *uint32, pDisplays []VkDisplayKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&planeIndex)
	p2 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pDisplayCount)
	p3 := func(x *[]VkDisplayKHR) **C.VkDisplayKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDisplayKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDisplayKHR)(unsafe.Pointer((&ptr)))
	}(&pDisplays)
	ret := C.vkGetDisplayPlaneSupportedDisplaysKHR(*p0, *p1, *p2, *p3)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice VkPhysicalDevice, pPropertyCount *uint32, pProperties []VkDisplayPlanePropertiesKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p2 := func(x *[]VkDisplayPlanePropertiesKHR) **C.VkDisplayPlanePropertiesKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDisplayPlanePropertiesKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDisplayPlanePropertiesKHR)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	ret := C.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

func VkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice VkPhysicalDevice, pPropertyCount *uint32, pProperties []VkDisplayPropertiesKHR) VkResult {
	p0 := func(x *VkPhysicalDevice) *C.VkPhysicalDevice { /* Handle */
		return (*C.VkPhysicalDevice)(unsafe.Pointer(x))
	}(&physicalDevice)
	p1 := func(x **uint32) **C.uint { /* Pointer */ return (**C.uint)(unsafe.Pointer(x)) }(&pPropertyCount)
	p2 := func(x *[]VkDisplayPropertiesKHR) **C.VkDisplayPropertiesKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkDisplayPropertiesKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkDisplayPropertiesKHR)(unsafe.Pointer((&ptr)))
	}(&pProperties)
	ret := C.vkGetPhysicalDeviceDisplayPropertiesKHR(*p0, *p1, *p2)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}

//VkDisplayPresentInfoKHR provides a go interface for VkDisplayPresentInfoKHR.
// See https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPresentInfoKHR.html
type VkDisplayPresentInfoKHR C.struct_VkDisplayPresentInfoKHR

// NewVkDisplayPresentInfoKHR allocates an instance of this struct in the C memory instead
// of the Go memory.
func newVkDisplayPresentInfoKHR() *VkDisplayPresentInfoKHR {
	sz := unsafe.Sizeof(VkDisplayPresentInfoKHR{})
	ptr := C.malloc(C.ulong(sz))
	C.memset(ptr, 0, C.ulong(sz))
	return (*VkDisplayPresentInfoKHR)(ptr)
}

// Free releases the memory allocated by the NewVkDisplayPresentInfoKHR method.
// It does not free pointers stored in the structure. It should only
// be used on CPtr instances.
func (x *VkDisplayPresentInfoKHR) Free() {
	C.free(unsafe.Pointer(x))
}

// AsPtr returns the object as a pointer.
func (x *VkDisplayPresentInfoKHR) AsPtr() *VkDisplayPresentInfoKHR { return x }

// AsCPtr copies the object to C memory and returns the pointer.
func (x *VkDisplayPresentInfoKHR) AsCPtr() *VkDisplayPresentInfoKHR {
	clone := newVkDisplayPresentInfoKHR()
	*clone = *x
	return clone
}

// SType returns the value of sType from VkDisplayPresentInfoKHR
func (x VkDisplayPresentInfoKHR) SType() VkStructureType {
	ptr := /* Identifier */ (*VkStructureType)(&x.sType)
	return *ptr
}

// WithDefaultSType sets the value of SType to the value provided in the
// specification if there is only a single value in the specification.
func (x *VkDisplayPresentInfoKHR) WithDefaultSType() *VkDisplayPresentInfoKHR {
	return x.WithSType(VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR)
}

// WithSType copies the provided value into C space and stores it
// at sType on VkDisplayPresentInfoKHR
func (x *VkDisplayPresentInfoKHR) WithSType(y VkStructureType) *VkDisplayPresentInfoKHR {
	ptr := /* Identifier */ (*C.VkStructureType)(&y)
	x.sType = *ptr
	return x
}

// PNext returns the value of pNext from VkDisplayPresentInfoKHR
func (x VkDisplayPresentInfoKHR) PNext() unsafe.Pointer {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&x.pNext)
	return *ptr
}

// WithPNext copies the provided value into C space and stores it
// at pNext on VkDisplayPresentInfoKHR
func (x *VkDisplayPresentInfoKHR) WithPNext(y unsafe.Pointer) *VkDisplayPresentInfoKHR {
	ptr := func(x *unsafe.Pointer) *unsafe.Pointer { /* Scalar */ return (*unsafe.Pointer)(unsafe.Pointer(x)) }(&y)
	x.pNext = *ptr
	return x
}

// SrcRect returns the value of srcRect from VkDisplayPresentInfoKHR
func (x VkDisplayPresentInfoKHR) SrcRect() VkRect2D {
	ptr := /* Identifier */ (*VkRect2D)(&x.srcRect)
	return *ptr
}

// WithSrcRect copies the provided value into C space and stores it
// at srcRect on VkDisplayPresentInfoKHR
func (x *VkDisplayPresentInfoKHR) WithSrcRect(y VkRect2D) *VkDisplayPresentInfoKHR {
	ptr := /* Identifier */ (*C.VkRect2D)(&y)
	x.srcRect = *ptr
	return x
}

// DstRect returns the value of dstRect from VkDisplayPresentInfoKHR
func (x VkDisplayPresentInfoKHR) DstRect() VkRect2D {
	ptr := /* Identifier */ (*VkRect2D)(&x.dstRect)
	return *ptr
}

// WithDstRect copies the provided value into C space and stores it
// at dstRect on VkDisplayPresentInfoKHR
func (x *VkDisplayPresentInfoKHR) WithDstRect(y VkRect2D) *VkDisplayPresentInfoKHR {
	ptr := /* Identifier */ (*C.VkRect2D)(&y)
	x.dstRect = *ptr
	return x
}

// Persistent returns the value of persistent from VkDisplayPresentInfoKHR
func (x VkDisplayPresentInfoKHR) Persistent() VkBool32 {
	ptr := /* Identifier */ (*VkBool32)(&x.persistent)
	return *ptr
}

// WithPersistent copies the provided value into C space and stores it
// at persistent on VkDisplayPresentInfoKHR
func (x *VkDisplayPresentInfoKHR) WithPersistent(y VkBool32) *VkDisplayPresentInfoKHR {
	ptr := /* Identifier */ (*C.VkBool32)(&y)
	x.persistent = *ptr
	return x
}

func VkCreateSharedSwapchainsKHR(device VkDevice, swapchainCount uint32, pCreateInfos []VkSwapchainCreateInfoKHR, pAllocator *VkAllocationCallbacks, pSwapchains []VkSwapchainKHR) VkResult {
	p0 := func(x *VkDevice) *C.VkDevice { /* Handle */ return (*C.VkDevice)(unsafe.Pointer(x)) }(&device)
	p1 := func(x *uint32) *C.uint { /* Scalar */ return (*C.uint)(unsafe.Pointer(x)) }(&swapchainCount)
	p2 := func(x *[]VkSwapchainCreateInfoKHR) **C.VkSwapchainCreateInfoKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSwapchainCreateInfoKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSwapchainCreateInfoKHR)(unsafe.Pointer((&ptr)))
	}(&pCreateInfos)
	p3 := func(x **VkAllocationCallbacks) **C.VkAllocationCallbacks { /* Pointer */
		return (**C.VkAllocationCallbacks)(unsafe.Pointer(x))
	}(&pAllocator)
	p4 := func(x *[]VkSwapchainKHR) **C.VkSwapchainKHR { /* Slice */
		if len(*x) > 0 {
			slc := (*C.VkSwapchainKHR)(unsafe.Pointer(&((*x)[0])))
			return &slc
		}
		var ptr unsafe.Pointer
		return (**C.VkSwapchainKHR)(unsafe.Pointer((&ptr)))
	}(&pSwapchains)
	ret := C.vkCreateSharedSwapchainsKHR(*p0, *p1, *p2, *p3, *p4)
	retPtr := /* Identifier */ (*VkResult)(&ret)
	return *retPtr
}
